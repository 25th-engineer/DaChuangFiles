在 现今 的 推荐 技术 和 算法 中 最 被 
大家 广泛 认可 和 采用 的 就是 基于 协同 过滤 
的 推荐 方法 本文 将带 你 深入 了解 协同 过滤 
的 秘密 下面 直接 进入 正题 . 1 . 什么 
是 推荐算法 推荐算法 最早在 1992年 就 提出 来了 但是 火 
起来 实际上 是 最近 这些 年的/nr 事情 因为 互联网 的 
爆发 有了 更大 的 数据 量 可以 供 我们 使用 
推荐算法 才有 了 很大 的 用武之地 最开始 所以 我们 在 
网上 找 资料 都是 进 yahoo 然后 分门别类 的 点 
进去 找到 你 想要 的 东西 这 是 一个 人工 
过程 到 后来 我们 用 google 直接 搜索 自己 需要 
的 内容 这些 都 可以 比较 精准 的 找到 你 
想要 的 东西 但是 如果 我 自己 都不/nr 知道 自己 
要 找 什么 肿么 办 最 典型 的 例子 就是 
如果 我 打开 豆瓣 找 电影 或者 我 去 买 
说 我 实际上 不 知道 我 想要 买 什么 或者 
看 什么 这时候 推荐 系统 就 可以 派 上 用场 
了 2 . 推荐算法 的 条件 现在 的 各种各样 的 
推荐算法 但是 不管 怎么样 都绕/nr 不开 几个 条件 这是/i 推荐/v 
的/uj 基本/n 条件/n 1/m ./i 根据/p 和你/nr 共同/d 喜好/v 的/uj 
人/n 来给/i 你/r 推荐/v 2/m ./i 根据/p 你/r 喜欢/v 的/uj 
物品/n 找出/v 和它/nr 相似/v 的/uj 来给/i 你/r 推荐/v 3/m ./i 
根据/p 你/r 给出/v 的/uj 关键字/n 来给/i 你/r 推荐/v 这 实际上 
就 退化 成 搜索算法 了 4 . 根据 上面 的 
几种 条件 组合 起来 给 你 推荐 3 . 推荐算法 
分类 推荐算法 大致 可以 分为 三类 3.1 基于 内容 的 
推荐算法 基于 内容 的 推荐算法 原理 是 用户 喜欢 和 
自己 关注 过 的 Item 在 内容 上 类似 的 
Item 比如 你 看了 哈利波特 I 基于 内容 的 推荐算法 
发现 哈利波特 II VI 与 你 以前 观看 的 在 
内容 上面 共 有 很多 关键词 有 很大 关联性 就把 
后者 推荐给 你 这种 方法 可以 避免 Item 的 冷启动 
问题 冷启动 如果 一个 Item 从 没有 被 关注 过 
其他 推荐算法 则 很少 会去 推荐 但是 基于 内容 的 
推荐算法 可以 分析 Item 之间 的 关系 实现 推荐 弊端 
在于 推荐 的 Item 可能 会 重复 典型 的 就是 
新闻 推荐 如果 你 看了 一则 关于 MH370 的 新闻 
很可能 推荐 的 新闻 和你/nr 浏览 过 的 内容 一致 
另外 一个 弊端 则是 对于 一些 多 媒体 的 推荐 
比如 音乐 电影 图片 等 由于 很难 提 内容 特征 
则 很难 进行 推荐 一种 解决 方式 则是 人工 给 
这些 Item 打 标签 3.2 协同 过滤 推荐算法 协同 过滤 
算法 原理 是 用户 喜欢 那些 具有 相似 兴趣 的 
用户 喜欢 过 的 商品 比如 你 的 朋友 喜欢 
电影 哈利波特 I 那么 就 会 推荐 给 你 这是 
最 简单 的 基于 用户 的 协同 过滤 算法 user 
based collaboratIve filtering 还有 一种 是 基于 Item 的 协同 
过滤 算法 item based collaborative filtering 这 两种 方法 都是 
将 用户 的 所有 数据 读入 到 内存 中 进行 
运算 的 因此 成为 Memory based Collaborative Filtering 另一种 则是 
Model based collaborative filtering 包括 Aspect Model pLSA LDA 聚 
类 SVD Matrix Factorization 等 这种方法 训练 过程 比较 长 
但是 训练 完成后 推荐 过程 比较 快 3.3 基于 知识 
的 推荐算法 最后 一种 方法 是 基于 知识 的 推荐算法 
也 有人 将 这种 方法 归为 基于 内容 的 推荐 
这种 方法 比较 典型 的 是 构建 领域 本体 或者 
是 建立 一定 的 规则 进行 推荐 混合 推荐算法 则会 
融合 以上 方法 以 加权 或者 串联 并联 等 方式 
尽心 融合 当然 推荐 系统 还 包括 很多 方法 其实 
机器学习 或者 数据挖掘 里面 的 方法 很多 都 可以 应用 
在 推荐 系统 中 比如说 LR GBDT RF 这三种 方法 
在 一些 电商 推荐 里面 经常 用到 社交 网络 里面 
的 图 结构 等 都 可以 说 是 推荐 方法 
今天 这 篇 文章 要讲 的 基于 用户 的 协同 
过滤 算法 . 3 什么 是 协同 过滤 协同 过滤 
是 利用 集体 智慧 的 一个 典型 方法 要 理解 
什么 是 协同 过滤 Collaborative Filtering 简称 CF 首先 想 
一个 简单 的 问题 如果 你 现在 想看 个 电影 
但 你 不 知道 具体 看 哪部 你 会 怎么做 
大 部分 的 人 会 问问 周围 的 朋友 看看 
最近 有 什么 好看 的 电影 推荐 而/c 我们/r 一般/a 
更/d 倾向/v 于从/nr 口味/n 比较/d 类似/v 的/uj 朋友/n 那里/r 得到/v 
推荐/v 这 就是 协同 过滤 的 核心 思想 换句话说 就是 
借鉴 和你/nr 相关 人群 的 观点 来 进行 推荐 很好 
理解 4 协同 过滤 的 实现 要 实现 协同 过滤 
的 推荐算法 要 进行 以下 三 个 步骤 4.1 收集 
数据 4.2 找到 相似 用户 和 物品 4.3 进行 推荐 
4.1 收集 数据 这里 的 数据 指 的 都是 用户 
的 历史 行为 数据 比如 用户 的 购买 历史 关注 
收藏 行为 或者 发表 了 某些 评论 给 某个 物品 
打 了 多少 分 等等 这些 都 可以 用来 作为 
数据 供 推荐算法 使用 服务于 推荐算法 需要 特别 指出 的 
在于 不同 的 数据 准确性 不同 粒度 也 不同 在 
使用 时 需要 考虑 到 噪音 所 带来 的 影响 
4.2 找到 相似 用户 和 物品 这一步 也 很简单 其实 
就是 计算 用户 间 以及 物品 间 的 相似 度 
以下 是 几种 计算 相似 度 的 方法 4.3 进行 
推荐 在 知道 了 如何 计算 相似 度 后 就 
可以 进行 推荐 了 在 协同 过滤 中 有 两种 
主流 方法 1 基于 用户 的 协同 过滤 2 基于 
物品 的 协同 过滤 具体 怎么 来 阐述 他们 的 
原理 呢 看 个 图 大家 就 明白 了 基于 
用户 的 CF 的 基本 思想 相当 简单 基于 用户 
对 物品 的 偏好 找到 相邻 邻居 用户 然后 将 
邻居 用户 喜欢 的 推荐 给 当前 用户 计 算上 
就是 将 一个 用户 对 所有 物品 的 偏好 作为 
一个 向量 来 计算 用户 之间 的 相似 度 找到 
K 邻居 后 根据 邻居 的 相似 度 权重 以及 
他们 对 物品 的 偏好 预测 当前 用户 没有 偏好 
的 未 涉及 物品 计算 得到 一个 排序 的 物品 
列表 作为 推荐 下图 给出 了 一个 例子 对于 用户 
A 根据 用户 的 历史 偏好 这里 只 计算 得到 
一个 邻居 用户 C 然后 将 用户 C 喜欢 的 
物品 D 推荐 给 用户 A 基于 物品 的 CF 
的 原理 和 基于 用户 的 CF 类似 只是 在 
计算 邻居 时 采用 物品 本身 而 不是 从 用户 
的 角度 即 基于 用户 对 物品 的 偏好 找到 
相似 的 物品 然后 根据 用户 的 历史 偏好 推荐 
相似 的 物品 给 他 从 计算 的 角度 看 
就是 将 所有 用户 对 某个 物品 的 偏好 作为 
一个 向量 来 计算 物品 之间 的 相似 度 得到 
物品 的 相似 物品 后 根据 用户 历史 的 偏好 
预测 当前 用户 还 没有 表示 偏好 的 物品 计算 
得到 一个 排序 的 物品 列表 作为 推荐 下图 给出 
了 一个 例子 对于 物品 A 根据 所有 用户 的 
历史 偏好 喜欢 物品 A 的 用户 都 喜欢 物品 
C 得出 物品 A 和 物品 C 比较 相似 而 
用户 C 喜欢 物品 A 那么 可以 推断 出 用户 
C 可能 也 喜欢 物品 C 算法 存在 的 问题 
这个 算法 实现 起来 也 比较 简单 但是 在 实际 
应用 中 有时候 也会 有 问题 的 比如 一些 非常 
流行 的 商品 可能 很多 人 都 喜欢 这种 商品 
推荐给 你 就 没什么 意义 了 所以 计算 的 时候 
需要 对 这种 商品 加 一个 权重 或者 把 这种 
商品 完全 去掉 也行 再有 对于 一些 通用 的 东西 
比如 买书 的 时候 的 工具书 如 现代 汉语 词典 
新华字典 神马 的 通用性 太 强了 推荐 也 没什么 必要 
了 适用 场景 在 非 社交 网络 的 网站 中 
内容 内在 的 联系 是 很 重要 的 推荐 原则 
它 比 基于 相似 用户 的 推荐 原则 更加 有效 
比如 在 购书 网站 上 当 你 看 一 本书 
的 时候 推荐 引擎 会给 你 推荐 相关 的 书籍 
这个 推荐 的 重要性 远远 超过 了 网站 首页 对 
该 用户 的 综合 推荐 可以 看到 在 这种 情况 
下 Item CF 的 推荐 成为 了 引导 用户 浏览 
的 重要 手段 同时 Item CF 便于 为 推荐 做出 
解释 在 一个 非 社交 网络 的 网站 中 给 
某个 用户 推荐 一 本书 同时/c 给出/v 的/uj 解释/v 是/v 
某某/r 和你有/nr 相似/v 兴趣/n 的/uj 人也/i 看了/i 这本书/i 这 很难 
让 用户 信服 因为 用户 可能 根本 不 认识 那个人 
但 如果 解释 说 是因为 这 本书 和你/nr 以前 看 
的 某 本书 相似 用户 可能 就 觉得 合理 而 
采纳 了此 推荐 具体 实现 # * coding = utf 
8 * import math import sys from texttable import Texttable 
# # 使用 | A & B | / sqrt 
| A | | B | 计算 余弦 距离 # 
# # def calcCosDistSpe user1 user2 avg _ x = 
0.0 avg _ y = 0.0 for key in user1 
avg _ x + = key 1 avg _ x 
= avg _ x / len user1 for key in 
user2 avg _ y + = key 1 avg _ 
y = avg _ y / len user2 u1 _ 
u2 = 0.0 for key1 in user1 for key2 in 
user2 if key1 1 avg _ x and key2 1 
avg _ y and key1 0 = = key2 0 
u1 _ u2 + = 1 u1u2 = len user1 
* len user2 * 1.0 sx _ sy = u1 
_ u2 / math . sqrt u1u2 return sx _ 
sy # # 计算 余弦 距离 # # def calcCosDist 
user1 user2 sum _ x = 0.0 sum _ y 
= 0.0 sum _ xy = 0.0 for key1 in 
user1 for key2 in user2 if key1 0 = = 
key2 0 sum _ xy + = key1 1 * 
key2 1 sum _ y + = key2 1 * 
key2 1 sum _ x + = key1 1 * 
key1 1 if sum _ xy = = 0.0 return 
0 sx _ sy = math . sqrt sum _ 
x * sum _ y return sum _ xy / 
sx _ sy # # # 相似 余弦 距离 # 
# # def c a l c i m l 
a r y C o s D i s t 
user1 user2 sum _ x = 0.0 sum _ y 
= 0.0 sum _ xy = 0.0 avg _ x 
= 0.0 avg _ y = 0.0 for key in 
user1 avg _ x + = key 1 avg _ 
x = avg _ x / len user1 for key 
in user2 avg _ y + = key 1 avg 
_ y = avg _ y / len user2 for 
key1 in user1 for key2 in user2 if key1 0 
= = key2 0 sum _ xy + = key1 
1 avg _ x * key2 1 avg _ y 
sum _ y + = key2 1 avg _ y 
* key2 1 avg _ y sum _ x + 
= key1 1 avg _ x * key1 1 avg 
_ x if sum _ xy = = 0.0 return 
0 sx _ sy = math . sqrt sum _ 
x * sum _ y return sum _ xy / 
sx _ sy # # 读取 文件 # # def 
readFile file _ name contents _ lines = f = 
open file _ name r contents _ lines = f 
. readlines f . close return contents _ lines # 
# 解压 rating 信息 格式 用户 id \ t 硬盘 
id \ t 用户 rating \ t 时间 # 输入 
数据 集合 # 输出 已经 解压 的 排名 信息 # 
def g e t R a t i n g 
I n f o r m a t i o 
n ratings rates = for line in ratings rate = 
line . split \ t rates . append int rate 
0 int rate 1 int rate 2 return rates # 
# 生成 用户 评分 的 数据结构 # # 输入 所以 
数据 2 1 5 2 4 2 . . . 
# 输出 1 . 用户 打分 字典 2 . 电影 
字典 # 使用 字典 key 是 用户 id value 是 
用户 对 电影 的 评价 # rate _ dic 2 
= 1 5 4 2 . . . . 表示 
用户 2对 电影 1 的 评分 是 5 对 电影 
4 的 评分 是 2 # def c r e 
a t e U s e r R a n 
k D i c rates user _ rate _ dic 
= { } item _ to _ user = { 
} for i in rates user _ rank = i 
1 i 2 if i 0 in user _ rate 
_ dic user _ rate _ dic i 0 . 
append user _ rank else user _ rate _ dic 
i 0 = user _ rank if i 1 in 
item _ to _ user item _ to _ user 
i 1 . append i 0 else item _ to 
_ user i 1 = i 0 return user _ 
rate _ dic item _ to _ user # # 
计算 与 指定 用户 最 相近 的 邻居 # 输入 
指定 用户 ID 所以 用户 数据 所以 物品 数据 # 
输出 与 指定 用户 最 相邻 的 邻居 列表 # 
def c a l c N e a r e 
s t N e i g h b o r 
userid users _ dic item _ dic neighbors = # 
neighbors . append userid for item in users _ dic 
userid for neighbor in item _ dic item 0 if 
neighbor = userid and neighbor not in neighbors neighbors . 
append neighbor neighbors _ dist = for neighbor in neighbors 
dist = c a l c i m l a 
r y C o s D i s t users 
_ dic userid users _ dic neighbor # c a 
l c i m l a r y C o 
s D i s t calcCosDist calcCosDistSpe neighbors _ dist 
. append dist neighbor neighbors _ dist . sort reverse 
= True # print neighbors _ dist return neighbors _ 
dist # # 使用 UserFC 进行 推荐 # 输入 文件名 
用户 ID 邻居 数量 # 输出 推荐 的 电影 ID 
输入 用户 的 电影 列表 电影 对应 用户 的 反序 
表 邻居 列表 # def r e c o m 
m e n d B y U s e r 
F C file _ name userid k = 5 # 
读取 文件 数据 test _ contents = readFile file _ 
name # 文件 数据格式 化成 二维 数组 List 用户 id 
电影 id 电影 评分 . . . test _ rates 
= g e t R a t i n g 
I n f o r m a t i o 
n test _ contents # 格式 化成 字典 数据 # 
1 . 用户 字典 dic 用户 id = 电影 id 
电影 评分 . . . # 2 . 电影 字典 
dic 电影 id = 用户 id1 用户 id2 . . 
. test _ dic test _ item _ to _ 
user = c r e a t e U s 
e r R a n k D i c test 
_ rates # 寻找 邻居 neighbors = c a l 
c N e a r e s t N e 
i g h b o r userid test _ dic 
test _ item _ to _ user k recommend _ 
dic = { } for neighbor in neighbors neighbor _ 
user _ id = neighbor 1 movies = test _ 
dic neighbor _ user _ id for movie in movies 
# print movie if movie 0 not in recommend _ 
dic recommend _ dic movie 0 = neighbor 0 else 
recommend _ dic movie 0 + = neighbor 0 # 
print len recommend _ dic # 建立 推荐 列表 recommend 
_ list = for key in recommend _ dic # 
print key recommend _ list . append recommend _ dic 
key key recommend _ list . sort reverse = True 
# print recommend _ list user _ movies = i 
0 for i in test _ dic userid return i 
1 for i in recommend _ list user _ movies 
test _ item _ to _ user neighbors # # 
# 获取 电影 的 列表 # # # def getMoviesList 
file _ name # print sys . g e t 
d e f a u l t e n c 
o d i n g movies _ contents = readFile 
file _ name movies _ info = { } for 
movie 