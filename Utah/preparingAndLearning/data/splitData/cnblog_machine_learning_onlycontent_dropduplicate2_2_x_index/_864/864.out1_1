这 篇 文章 主要 是 结合 机器学习 实战 将 推荐 
算法 和 SVD 进行 对应 的 结合 不论什么 一个 矩阵 
都能够 分解为 SVD 的 形式 事实上 SVD 意义 就是 利用 
特征 空间 的 转换 进行 数据 的 映射 后面 将 
专门 介绍 SVD 的 基础 概念 先 给出 python 这里 
先给 出 一个 简单 的 矩阵 表示 用户 和 物品 
之间 的 关系 这里 我 自己 有个 疑惑 对 这样 
一个 DATA = U Z Vt 这里 的 U 和V/nr 
真正 的 几何 含义     书上 的 含义 是 
U 将 物品 映 射到 了 新的 特征 空间 V 
的 转置   将 用户 映 射到 了 新的 特征 
空间 以下 是 代码 实现 同一 时候 SVD 还 能够 
用于 降 维 降 维 的 操作 就 是 通过 
保留值 比 較 的 神秘 值 # * coding cp936 
* Created on Mar 8 2011 @ author Peter from 
numpy import * from numpy import linalg as la # 
用到 别名 # 这里 主要 结合 推荐 系统 介绍 SVD 
所以 这里 的 数据 都 能够 看成 是 用户 对 
物品 的 一个 打分 def loadExData return 0 0 0 
2 2 0 0 0 3 3 0 0 0 
1 1 1 1 1 0 0 2 2 2 
0 0 5 5 5 0 0 1 1 1 
0 0 def loadExData2 return 0 0 0 0 0 
4 0 0 0 0 5 0 0 0 3 
0 4 0 0 0 0 3 0 0 0 
0 4 0 0 1 0 4 0 3 3 
4 0 0 0 0 2 2 0 0 5 
4 5 0 0 0 0 5 5 0 0 
0 0 0 0 5 0 1 0 0 5 
0 4 3 4 0 0 0 0 5 5 
0 1 0 0 0 4 0 4 0 0 
0 0 4 0 0 0 2 0 2 5 
0 0 1 2 0 0 0 0 5 0 
0 0 0 4 0 1 0 0 0 0 
0 0 1 2 0 0 def ecludSim inA inB 
return 1.0 / 1.0 + la . norm inA inB 
# 计算 向量 的 第二范式 相当于 直接 计算 了 欧式 
距离 def pearsSim inA inB if len inA 3 return 
1.0 return 0.5 + 0.5 * corrcoef inA inB rowvar 
= 0 0 1 # corrcoef 直接 计算 皮尔逊 相关系数 
def cosSim inA inB num = float inA . T 
* inB denom = la . norm inA * la 
. norm inB return 0.5 + 0.5 * num / 
denom # 计算 余弦 类似 度 # 协同 过滤 算法 
# dataMat 用户 数据 user 用户 simMeas 类似 度 计算 
方式 item 物品 def standEst dataMat user simMeas item n 
= shape dataMat 1 # 计算 列 的 数量 物品 
的 数量 simTotal = 0.0 ratSimTotal = 0.0 for j 
in range n userRating = dataMat user j print dataMat 
user j if userRating = = 0 continue # 假设 
用户 u 没有 对 物品 j 进行 打分 那么 这个 
推断 就 能够 跳过 了 overLap = nonzero logical _ 
and dataMat item . A 0 \ dataMat j . 
A 0 0 # 找到 对 物品 j 和/c item/w 
都打/nr 过分/n 的/uj 用户/n if len overLap = = 0 
similarity = 0 else similarity = simMeas dataMat overLap item 
dataMat overLap j # 利用 类似 度 计算 两个 物品 
之间 的 类似 度 print the % d and % 
d similarity is % f % item j similarity simTotal 
+ = similarity ratSimTotal + = similarity * userRating # 
待 推荐 物品 与 用户 打 过分 的 物品 之间 
的 类似 度 * 用户 对 物品 的 打分 if 
simTotal = = 0 return 0 else return ratSimTotal / 
simTotal # 利用 SVD 进行 分解 可是 这里 是 直接 
用 的 库 里面 的 函数 # 假设 自己 实现 
一个 SVD 分解 我 想 就是 和 矩阵 论 里面 
的 求解 知识 是 一样 的 吧 可是 可能 在 
求 特征值 的 过程 中 会比 較 痛苦 def svdEst 
dataMat user simMeas item n = shape dataMat 1 simTotal 
= 0.0 ratSimTotal = 0.0 U Sigma VT = la 
. svd dataMat # 直接 进行 分解 Sig4 = mat 
eye 4 * Sigma 4 # arrange Sig4 into a 
diagonal matrix xformedItems = dataMat . T * U 4 
* Sig4 . I # create transformed items for j 
in range n userRating = dataMat user j if userRating 
= = 0 or j = = item continue similarity 
= simMeas xformedItems item . T \ xformedItems j . 
T print the % d and % d similarity is 
% f % item j similarity simTotal + = similarity 
ratSimTotal + = similarity * userRating if simTotal = = 
0 return 0 else return ratSimTotal / simTotal # 真正 
的 推荐 函数 后面 两个 函数 就是 採 用 的 
类似 度 的 计算 方法 和 推荐 用 的 方法 
def recommend dataMat user N = 3 simMeas = cosSim 
estMethod = standEst unratedItems = nonzero dataMat user . A 
= = 0 1 # find unrated items nonzero 1 
返回 的 是非 零值 所在 的 行数 返回 的 是 
一个 元组 if len unratedItems = = 0 return you 
rated everything itemScores = for item in unratedItems estimatedScore = 
estMethod dataMat user simMeas item itemScores . append item estimatedScore 
return sorted itemScores key = lambda jj jj 1 reverse 
= True N # 扩展 的 样例 利用 SVD 进行 
图像 的 压缩 # 将 图像 打印 出来 def printMat 
inMat thresh = 0.8 for i in range 32 for 
k in range 32 if float inMat i k thresh 
print 1 else print 0 print # 最后 发现 重构 
出来 的 数据 图 是 差点儿 相同 的 def imgCompress 
numSV = 3 thresh = 0.8 myl = for line 
in open 0 _ 5 . txt . readlines newRow 
= for i in range 32 newRow . append int 
line i myl . append newRow myMat = mat myl 
# 将 数据 读 入了 myMat 其中 print * * 
* * original matrix * * * * * * 
printMat myMat thresh U Sigma VT = la . svd 
myMat SigRecon = mat zeros numSV numSV # 构建 一个 
3 * 3 的 空 矩阵 for k in range 
numSV # construct diagonal matrix from vector SigRecon k k 
= Sigma k reconMat = U numSV * SigRecon * 
VT numSV print * * * * reconstructed matrix using 
% d singular values * * * * * * 
% numSV printMat reconMat thresh 通过 结果 能够 看到 降/v 
维/v 前/f 和降维/nr 后的/nr 图片/n 基本/n 都是/nr 相似/v 的/uj 