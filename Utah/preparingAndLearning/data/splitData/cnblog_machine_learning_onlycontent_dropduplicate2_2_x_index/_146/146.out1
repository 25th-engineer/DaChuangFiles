selenium 是 一个 用于 web 应用程序 测试 的 工具 Selenium 
测试 直接 运行 在 浏览器 中 就像 真正 的 用户 
在 操作 一样 支持 的 浏览器 包括 IE Mozilla Firefox 
Mozilla Suite 等 这个 工具 的 主要 功能 包括 测试 
与 浏览器 的 兼容性 测试 你 的 应用 程序 看 
是否 能够 很 好得 工作 在 不同 浏览器 和 操作 
系统 之上 测试 系统 功能 创建 衰退 测试 检验 软件 
功能 和 用户 需求 支持 自动 录制 动作 和 自动 
生成 Net Java Perl 等 不同 语言 的 测试 脚本 
Selenium 是 ThoughtWorks 专门 为 Web 应用程序 编写 的 一个 
验收 测试工具 要 使用 selenium 之前 呢 必 须得先 下载 
浏览器 驱动器 我 知道 的 浏览器 只有 这些 Chrome 浏览器 
指定 浏览器 Firefox 火狐 Opera 歌剧院 Ie 浏览器 Safari 苹果 
浏览器 其中 我 只 用过 火狐 和 Chrome 浏览器 Chrome 
浏览器 的 驱动 下载 地址 是 http / / chromedriver 
. storage . googleapis . com / index . html 
要 下载 的 版本 必须 是 你 现在 使用 的 
版本 最近 的 或 一样 然后 把 你 下载 的 
驱动 解压 放在 你 的 浏览器 的 文件 中 就 
可以 来了     要是 不行 的话 就 重启 一下 
火狐 浏览器 的 驱动 下载 地址 是 https / / 
github . com / mozilla / geckodriver / releases 他 
的 操作 也 跟 上边 的 一样 不过 他 的 
驱动 就下 最新版 的 就 可以 了 接下来 就是 selenium 
操作 了 # 导报 from selenium import webdriverimport timeimport requests 
# 建立 浏览器 对象 Chrome 浏览器 指定 浏览器 Firefox 火狐 
Opera 歌剧院 Ie 浏览器 Safari 苹果 浏览器 browser = webdriver 
. Chrome # 使用 浏览器 访问 网站 browser . get 
https / / www . baidu . com # 向 
文本框 填充 文本 browser . find _ element _ by 
_ id kw . send _ keys 男 神 鹏 
time . sleep 1 # 模拟 点击 browser . find 
_ element _ by _ id su . click time 
. sleep 5 # 匹配 多个 节点 # elist = 
browser . find _ elements css selector h3 elist = 
browser . find _ elements _ by _ class _ 
name t text _ str = str elist 0 . 
text print text _ str # 点击 链接 browser . 
find _ element _ by _ link _ text text 
_ str . click # 暂停 time . sleep 50 
# 关闭 浏览器 browser . quit 注意 每次 连接 一个 
地址 都给 浏览器 缓冲 时间     一秒 也行 最后 
别忘了 关闭 浏览器 这是 我 简单 的 一个 操作 流程 
他 的 流程 就是 先 打开 百度 然后 搜索 男生 
鹏   然后 进 第一 个 页面   下面 的 
就是 一些 selenium 操作 最 简单 粗暴 却 失传已久 的 
8种 定位 据说 这种 定位 方式 在 江湖上 都 快要 
失传 了 实在 想 不通 为什么 明明 写 起来 最 
简单 粗暴 啊 ~ driver . find _ element name 
wd . send _ keys Selenium2 driver . find _ 
element id su . click 大家 一定会 和我/nr 一样 觉得 
这种 方式 的 定位 实在 是 太 省事 了 ~ 
只 要写 find _ element 就 好啦 下面 我们 来 
总结 一下 这 8种 写法 与 基本 定位 方法 类 
比过来 该 怎么 写 by _ id find _ element 
id by _ xpath find _ element xpath by _ 
link _ text find _ element link text by _ 
partial _ text find _ element partial link text by 
_ name find _ element name by _ tag _ 
name find _ element tag name by _ class _ 
name find _ element class name by _ css _ 
selector find _ element css selector elements 复数 定位 在 
上面 的 例举 的 八中 基本 定位 方式 种 都有 
对应 的 复数形式 分别 是 下面 这些 id 复数 定位 
find _ elements _ by _ id name 复数 定位 
find _ elements _ by _ name class 复数 定位 
find _ elements _ by _ class _ name tag 
复数 定位 find _ elements _ by _ tag _ 
name link 复数 定位 find _ elements _ by _ 
link _ text partial _ link 复数 定位 find _ 
elements _ by _ partial _ link _ text xpath 
复数 定位 find _ elements _ by _ xpath css 
复数 定位 find _ elements _ by _ css _ 
selector 这些 复数 定位 方式 每次 取到 的 都是 具有 
相同 类型 属性 的 一组 元素 所以 返回 的 是 
一个 list 队列 我们 也 可以 利用 这个 去 定位 
单个 的 元素 比如 百度 首页 种 右上角 有 新闻 
视频 地图 贴吧 等 一些 链接 我们 通过 f12 查看 
源码 可以 发现 这些 链接 都有 共同 的 class   
class = mnav selenium 基础 操作 就是 这些 了 希望 
对 你们 有 帮助 