一 准备 样本 接上 一篇 文章 提到 的 问题 根据 
一 个人 的 身高 体重 来 判断 一个人 的 身材 
是否 很好 但 我 手上 没有 样本数据 只能 伪造 一批 
数据 了 伪造 的 数据 比较 标准 用来 学习 还是 
蛮 合适 的 下面 是 我 用来 伪造 数据 的 
代码 string Filename = . / figure _ full . 
csv StreamWriter sw = new StreamWriter Filename false sw . 
WriteLine Height Weight Result Random random = new Random float 
height weight Result result for int i = 0 i 
2000 i + + { height = random . Next 
150 195 weight = random . Next 70 200 if 
height 170 & & weight 120 result = Result . 
Good else result = Result . Bad sw . WriteLine 
$ { height } { weight } { int result 
} } enum Result { Bad = 0 Good = 
1 } View Code 制造 成功 后的/nr 数据 如下 用 
记事本 打开 二 源码 数据 准备好了 我们 就 用 准备好 
的 数据 进行 学习 了 先 贴出 全部 代码 然后 
再 逐一 解释 namespace B i n a r y 
C l a s s i f i c a 
t i o n _ Figure { class Program { 
static readonly string DataPath = Path . Combine Environment . 
CurrentDirectory Data figure _ full . csv static readonly string 
ModelPath = Path . Combine Environment . CurrentDirectory Data FastTree 
_ Model . zip static void Main string args { 
TrainAndSave L o a d A n d P r 
e d i c t i o n Console . 
WriteLine Press any to exit Console . ReadKey } static 
void TrainAndSave { MLContext mlContext = new MLContext / / 
准备 数据 var fulldata = mlContext . Data . LoadFromTextFile 
FigureData path DataPath hasHeader true separatorChar var trainTestData = mlContext 
. Data . TrainTestSplit fulldata testFraction 0.2 var trainData = 
trainTestData . TrainSet var testData = trainTestData . TestSet / 
/ 训练 IEstimator ITransformer d a t a P r 
o c e s s P i p e l 
i n e = mlContext . Transforms . Concatenate Features 
new { Height Weight } . Append mlContext . Transforms 
. N o r m a l i z e 
M e a n V a r i a n 
c e inputColumnName Features outputColumnName F e a t u 
r e s N o r m a l i 
z e d B y M e a n V 
a r IEstimator ITransformer trainer = mlContext . B i 
n a r y C l a s s i 
f i c a t i o n . Trainers 
. FastTree labelColumnName Result f e a t u r 
e C o l u m n N a m 
e F e a t u r e s N 
o r m a l i z e d B 
y M e a n V a r IEstimator ITransformer 
trainingPipeline = d a t a P r o c 
e s s P i p e l i n 
e . Append trainer ITransformer model = trainingPipeline . Fit 
trainData / / 评估 var predictions = model . Transform 
testData var metrics = mlContext . B i n a 
r y C l a s s i f i 
c a t i o n . Evaluate data predictions 
labelColumnName Result scoreColumnName Score P r i n t B 
i n a r y C l a s s 
i f i c a t i o n M 
e t r i c s trainer . ToString metrics 
/ / 保存 模型 mlContext . Model . Save model 
trainData . Schema ModelPath Console . WriteLine $ Model file 
saved to { ModelPath } } static void L o 
a d A n d P r e d i 
c t i o n { var mlContext = new 
MLContext ITransformer model = mlContext . Model . Load ModelPath 
out var inputSchema var predictionEngine = mlContext . Model . 
C r e a t e P r e d 
i c t i o n E n g i 
n e FigureData F i g u r e D 
a t e P r e d i c t 
e d model FigureData test = new FigureData test . 
Weight = 115 test . Height = 171 var prediction 
= predictionEngine . Predict test Console . WriteLine $ Predict 
Result { prediction . PredictedLabel } } } public class 
FigureData { LoadColumn 0 public float Height { get set 
} LoadColumn 1 public float Weight { get set } 
LoadColumn 2 public bool Result { get set } } 
public class F i g u r e D a 
t e P r e d i c t e 
d FigureData { public bool PredictedLabel } } View Code 
三 对 代码 的 解释 1 读取 样本数据 string DataPath 
= Path . Combine Environment . CurrentDirectory Data figure _ 
full . csv MLContext mlContext = new MLContext / / 
准备 数据 var fulldata = mlContext . Data . LoadFromTextFile 
FigureData path DataPath hasHeader true separatorChar var trainTestData = mlContext 
. Data . TrainTestSplit fulldata testFraction 0.2 var trainData = 
trainTestData . TrainSet var testData = trainTestData . TestSet LoadFromTextFile 
FigureData path DataPath hasHeader true separatorChar 用来 读取数据 到 D 
a t a V i e w F i g 
u r e D a t a 类 是 和 
样本数据 对应 的 实体类 LoadColumn 特性 指示 该 属性 对应 
该条 数据 中的 第 几个 数据 public class FigureData { 
LoadColumn 0 public float Height { get set } LoadColumn 
1 public float Weight { get set } LoadColumn 2 
public bool Result { get set } } path 文件 
路径 hasHeader 文本文件 是否 包含 标题 separatorChar 用来 分割 数据 
的 字符 我们 用 的 是 逗号 常用 的 还有 
跳格 符 \ t TrainTestSplit fulldata testFraction 0.2 用来 随机 
分割 数据 分成 学习 数据 和 评估 用 的 数据 
通常 情况 如果 数据 较多 测试数据 取 20% 左右 比较 
合适 如果 数据 量 较少 测试数据 取 10% 左右 比较 
合适 如果 不 通过 分割 准备 两个 数据文件 一个 用来 
训练 一个 用来 评估 效果 是 一样 的 2 训练 
/ / 训练 IEstimator ITransformer d a t a P 
r o c e s s P i p e 
l i n e = mlContext . Transforms . Concatenate 
Features new { Height Weight } . Append mlContext . 
Transforms . N o r m a l i z 
e M e a n V a r i a 
n c e inputColumnName Features outputColumnName F e a t 
u r e s N o r m a l 
i z e d B y M e a n 
V a r IEstimator ITransformer trainer = mlContext . B 
i n a r y C l a s s 
i f i c a t i o n . 
Trainers . FastTree labelColumnName Result f e a t u 
r e C o l u m n N a 
m e F e a t u r e s 
N o r m a l i z e d 
B y M e a n V a r IEstimator 
ITransformer trainingPipeline = d a t a P r o 
c e s s P i p e l i 
n e . Append trainer ITransformer model = trainingPipeline . 
Fit trainData IDataView 这个 数据集 就 类似 一个 表格 它 
的 列 Column 是 可以 动态 增加 的 一 开始 
我们 通过 LoadFromTextFile 获得 的 数据集 包括 Height Weight Result 
这几个 列 在 进行 训练 之前 我们 还要 对 这个 
数据 集 进行 处理 形成 符合 我们 要求 的 数据 
集 Concatenate 这个 方法 是 把 多个 列 组合 成 
一个 列 因为 二元 分类 的 机器学习 算法 只 接收 
一个 特征 列 所以 要把 多个 特征 列 Height Weight 
组合 成 一个 特征 列 Features 组合 的 结果 应该 
是 个 float 数组 N o r m a l 
i z e M e a n V a r 
i a n c e 是 对列 进行 归一化 处理 
这里 输入 列为 Features 输出 列为 F e a t 
u r e s N o r m a l 
i z e d B y M e a n 
V a r 归一化 的 含义 见 本文 最后 一节 
介绍 数据集 就绪 以后 就要 选择 学习 算法 针对 二元 
分类 我们 选择 了 快速 决策树 算法 FastTree 我们 需要 
告诉 这个 算法 特征值 放在 哪个 列 里面 F e 
a t u r e s N o r m 
a l i z e d B y M e 
a n V a r 标签 值 放在 哪个 列 
里面 Result 链接 数据处理 管道 和 算法 形成 学习 管道 
将 数据 集中 的 数据 逐一 通过学习 管道 进行 学习 
形成 机器学习 模型 有了/nr 这个 模型 我们 就 可以 通过 
它 进行 实际 应用 了 但 我们 一般 不会 现在 
就 使用 这个 模型 我们 需要 先 评估 一下 这个 
模型 然后 把 模型 保存 下来 以后 应用 时 再通过 
文件 读 取出 模型 然后 进行 应用 这样 就 不用 
等待 学习 的 时间 了 通常 学习 的 时间 都 
比较 长 3 评估 / / 评估 var predictions = 
model . Transform testData var metrics = mlContext . B 
i n a r y C l a s s 
i f i c a t i o n . 
Evaluate data predictions labelColumnName Result P r i n t 
B i n a r y C l a s 
s i f i c a t i o n 
M e t r i c s trainer . ToString 
metrics 评估 的 过程 就是 对 测试数据 集 进行 批量 
转换 Transform 转 换过 的 数据 集会 多出 一个 PredictedLabel 
的 列 这个 就是 模型 评估 的 结果 逐条 将 
这个 结果 和 实际 结果 Result 进行 比较 就 最终 
形成 了 效果 评估 数据 我们 可以 打印 这个 评估 
结果 查看 其 成功率 一般 成功率 大于 97% 就是 比 
较好 的 模型 了 由于 我们 伪造 的 数据 比较 
整齐 所以 我们 这 次 评估 的 成功率 为 100% 
注意 评估 过程 不会 提升 现有 的 模型 能力 只是 
对 现有 模型 的 一种 检测 4 保存 模型 / 
/ 保存 模型 string ModelPath = Path . Combine Environment 
. CurrentDirectory Data FastTree _ Model . zip mlContext . 
Model . Save model trainData . Schema ModelPath Console . 
WriteLine $ Model file saved to { ModelPath } 这个 
没啥 好 解释 的 5 读取 模型 并 创建 预测 
引擎 / / 读取 模型 var mlContext = new MLContext 
ITransformer model = mlContext . Model . Load ModelPath out 
var inputSchema / / 创建 预测 引擎 var predictionEngine = 
mlContext . Model . C r e a t e 
P r e d i c t i o n 
E n g i n e FigureData F i g 
u r e D a t e P r e 
d i c t e d model 创建 预测 引擎 
的 功能 和 Transform 是 类似 的 不过 Transform 是 
处理 批量 记录 这里 只 处理 一条 数据 而且 这里 
的 输入输出 是 实体 对象 定义 如下 public class FigureData 
{ LoadColumn 0 public float Height { get set } 
LoadColumn 1 public float Weight { get set } LoadColumn 
2 public bool Result { get set } } public 
class F i g u r e D a t 
e P r e d i c t e d 
FigureData { public bool PredictedLabel } 由于 预测 结果 里 
放在 PredictedLabel 字段 中 所以 F i g u r 
e D a t e P r e d i 
c t e d 类 必须 要 包含 PredictedLabel 属性 
目前 F i g u r e D a t 
e P r e d i c t e d 
类 是从 FigureData 类 继承 的 由于 我们 只用到 PredictedLabel 
属性 所以 不 继承 也 没有 关系 如果 继承 的话 
后面 要 调试 的话 会 方便 一点 6 应用 FigureData 
test = new FigureData { Weight = 115 Height = 
171 } var prediction = predictionEngine . Predict test Console 
. WriteLine $ Predict Result { prediction . PredictedLabel } 
这部分 代码 就 比较 简单 test 是 我们 要 预测 
的 对象 预测 后 打印 出 预测 结果 四 附 
数据 归一化 机器 学习 的 算法 中 一般 会 有 
很多 的 乘法 运算 当 运算 的 数字 过大 时 
很容易 在 多次 运算 后 溢出 为了 防止 这种 情况 
就要 对 数据 进行 归一化 处理 归一化 的 目标 就是 
把 参与 运算 的 特征 数 变为 0 1 或 
1 1 之间 的 浮点数 常见 的 处理 方式 有 
min max 标准化 Log 函数 转换 对数函数 转换 等 我们 
这次 采用 的 是 平均 方差 归一化 方法 五 资源 
源码 下载 地址 https / / github . com / 
seabluescn / Study _ ML . NET 工程 名称 B 
i n a r y C l a s s 
i f i c a t i o n _ 
Figure 点击 查看 机器学习 框架 ML . NET 学习 笔记 
系列 文章 目录 