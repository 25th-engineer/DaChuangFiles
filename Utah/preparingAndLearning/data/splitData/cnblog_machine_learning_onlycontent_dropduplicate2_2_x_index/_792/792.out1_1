自己 一直 学习 计算机 视觉 方面 的 东西 现在 想 
学习 一下 数据挖掘 跟 搜索引擎 自己 基础 也 有点 薄弱 
看 朱明 的 那本 数据挖掘 只能 片面 的 了解 这个 
数据挖掘 不过 最近 有一/nr 本书 机器学习 实战 于是乎 通过 实战 
的 形式 了解 一下 基本 的 算法 的 执行 过程 
在 算法 当中 很多 都是/nr 相通 的 模式识别 机器学习 数据挖掘 
自然语言 处理 等等 这些 算法 归结 起来 其实 差 不了 
多少 题外话 不多 说 了 好好学习 k 近邻 算法 对于 
这个 算法 我 用 自己 的话 来 描述 一下 就是 
把 一个 未知数 与 所有 已有 的 数据 样本 求 
距离 对 距离 进行 排序 取 前 k 个数 这 
k 这个数 中 那个 类别 多 那 这个 未知数 就 
属于 哪个 类别 不用说 大家 也 知道 这个 k 的 
选取 还是 很 重要 的 先用 书上 最 简单 的 
例子 表述 一下 # * coding utf 8 * from 
numpy import * import operator def createDataSet group = array 
1.0 1.1 1.0 1.0 0 0 0 0.1 labels = 
A A B B return group labels def classify0 inX 
dataSet labels k # 行 的 个数 也就是 训练 集 
的 个数 dataSetSize = dataSet . shape 0 print dataSetSize 
dataSetSize # tile 表示 将 输入 向量 inX 在行 方向 
上 重复 dataSetSize 次 在 列 的 方向 上 重复 
1次 具体 就是 构建 一个 跟 训练 集 对应 的 
数组 大小 相减 就是 为了 求 距离 diffMat = tile 
inX dataSetSize 1 dataSet print diffMat diffMat sqDiffMat = diffMat 
* * 2 print sqDiffMat sqDiffMat # sum 默认 axis 
= 0 为 普通 相加 axis = 1 为 矩阵 
的 每一个 行向量 相加 sqDistances = sqDiffMat . sum axis 
= 1 print sqDistances sqDistances distances = sqDistances * * 
0.5 print distances distances s o r t e d 
D i s t I n d i c i 
e s = distances . argsort print s o r 
t e d D i s t I n d 
i c i e s s o r t e 
d D i s t I n d i c 
i e s # 定义 一个 词典 classCount = { 
} # range k 为 0 1 2 . . 
. . k 1 print labels labels for i in 
range k voteIlabel = labels s o r t e 
d D i s t I n d i c 
i e s i # 获得 最小 的 k 个 
长度 # get 返回 键值 key 对应 的 值 如果 
key 没有 在 字典 里 则 返回 default 参数 的 
值 这边 default 是 0 功能 计算 每个 标签 类别 
的 个数 classCount voteIlabel = classCount . get voteIlabel 0 
+ 1 # sorted 排序 是 产生 一个 新 的 
列表 sort 是 在 原有 基础 上 排序 key 按 
第一 个 域 进行 排序 Ture 为 逆序 print classCount 
classCount sortedClassCount = sorted classCount . iteritems key = operator 
. itemgetter 1 reverse = True print sortedClassCount sortedClassCount return 
sortedClassCount 0 0 . csharpcode . csharpcode pre { font 
size small color black font family consolas Courier New courier 
monospace background color # ffffff / * white space pre 
* / } . csharpcode pre { margin 0em } 
. csharpcode . rem { color # 008000 } . 
csharpcode . kwrd { color # 0000ff } . csharpcode 
. str { color # 006080 } . csharpcode . 
op { color # 0000c0 } . csharpcode . preproc 
{ color # cc6633 } . csharpcode . asp { 
background color # ffff00 } . csharpcode . html { 
color # 800000 } . csharpcode . attr { color 
# ff0000 } . csharpcode . alt { background color 
# f4f4f4 width 100% margin 0em } . csharpcode . 
lnum { color # 606060 } 这边 我 已经 将 
要 解释 的 地方 标识 了 下面 就是 运行 运行 
结果 如下 1 import kNN2 group labels = kNN . 
createDataSet 3 kNN . classify0 0 0 group labels 3 
4 dataSetSize 4L 5 diffMat array 1 . 1.1 6 
1 . 1 . 7 0 . 0 . 8 
0 . 0.1 9 sqDiffMat array 1 . 1.21 10 
1 . 1 . 11 0 . 0 . 12 
0 . 0.01 13 sqDistances array 2.21 2 . 0 
. 0.01 14 distances array 1.48660687 1.41421356 0 . 0.1 
15 s o r t e d D i s 
t I n d i c i e s array 
2 3 1 0 dtype = int64 16 labels A 
A B B 17 classCount { A 1 B 2 
} 18 sortedClassCount B 2 A 1 19 B . 
csharpcode . csharpcode pre { font size small color black 
font family consolas Courier New courier monospace background color # 
ffffff / * white space pre * / } . 
csharpcode pre { margin 0em } . csharpcode . rem 
{ color # 008000 } . csharpcode . kwrd { 
color # 0000ff } . csharpcode . str { color 
# 006080 } . csharpcode . op { color # 
0000c0 } . csharpcode . preproc { color # cc6633 
} . csharpcode . asp { background color # ffff00 
} . csharpcode . html { color # 800000 } 
. csharpcode . attr { color # ff0000 } . 
csharpcode . alt { background color # f4f4f4 width 100% 
margin 0em } . csharpcode . lnum { color # 
606060 } 对照 这个 结果 看 上面 的 代码 应该 
都 能够 看懂 好 跟 书上 说 得 一样 这个 
例子 没有 实际 的 用处 于是 书上 给出 了 两个 
实际 的 例子 一个 是 使用 k 近邻 算法 改进 
约会 网站 的 配对 效果 算法 过程 如 书中 这个 
例子 给出 了 机器 学习 的 一般 过程 首先 我们 
要 知道 我们 要 做什么 知道 要 做 什么 之后 
我们 要 采集 数据 数据采集 完了 之后 我们 要 将 
数据 进行 预处理 1 因为 我们 采集 过来 的 数据 
可能 面临 杂乱 重复 不完整 等等 原因 常见 处理 方法 
有 数据 集成 数据 清洗 数据 变换 数据 归约 对于 
本例 认为 数据 是 有效 的 我们 处理 是 数据 
变换 将 数据 变成 分类器 可以 识别 的 格式 数据 
归约 将 数据 同一 化 不然 数据 值 大 的 
就 相当于 权重 大了 对 处理 有 影响 定义 一个 
函数 将 文本 转换 为 数组 1 def file2matrix filename 
2 fr = open filename 3 arrayOLines = fr . 
readlines 4 numberOfLines = len arrayOLines 5 print numberOfLines numberOfLines 
6 returnMat = zeros numberOfLines 3 7 print returnMat returnMat 
8 classLabelVector = 9 index = 010 for line in 
arrayOLines 11 # 没有 传入 参数 时 是 默认 去除 
首尾 空格 12 line = line . strip 13 listFromLine 
= line . split \ t 14 returnMat index = 
listFromLine 0 3 15 classLabelVector . append int listFromLine 1 
16 index + = 117 print returnMat returnMat 18 print 
classLabelVector classLabelVector 0 20 19 return returnMat c l a 
s s L a b e l V e c 
t o r 2 0 . csharpcode . csharpcode pre 
{ font size small color black font family consolas Courier 
New courier monospace background color # ffffff / * white 
space pre * / } . csharpcode pre { margin 
0em } . csharpcode . rem { color # 008000 
} . csharpcode . kwrd { color # 0000ff } 
. csharpcode . str { color # 006080 } . 
csharpcode . op { color # 0000c0 } . csharpcode 
. preproc { color # cc6633 } . csharpcode . 
asp { background color # ffff00 } . csharpcode . 
html { color # 800000 } . csharpcode . attr 
{ color # ff0000 } . csharpcode . alt { 
background color # f4f4f4 width 100% margin 0em } . 
csharpcode . lnum { color # 606060 } 运行 结果 
如下 1 reload kNN 2 module kNN from E \ 
Machine Learning \ exercise \ ch02 \ kNN . py 
3 datingDataMat datingLabels = kNN . file2matrix datingTestSet . txt 
4 numberOfLines 1000 5 returnMat array 0 . 0 . 
0 . 6 0 . 0 . 0 . 7 
0 . 0 . 0 . 8 . . . 
9 0 . 0 . 0 . 10 0 . 
0 . 0 . 11 0 . 0 . 0 
. 12 returnMat array 4.09200000 e + 04 8.32697600 e 
+ 00 9.53952000 e 01 13 1.44880000 e + 04 
7.15346900 e + 00 1.67390400 e + 00 14 2.60520000 
e + 04 1.44187100 e + 00 8.05124000 e 01 
15 . . . 16 2.65750000 e + 04 1.06501020 
e + 01 8.66627000 e 01 17 4.81110000 e + 
04 9.13452800 e + 00 7.28045000 e 01 18 4.37570000 
e + 04 7.88260100 e + 00 1.33244600 e + 
00 19 classLabelVector 3 2 1 1 1 1 3 
3 1 3 1 1 2 1 1 1 1 
1 2 3 . csharpcode . csharpcode pre { font 
size small color black font family consolas Courier New courier 
monospace background color # ffffff / * white space pre 
* / } . csharpcode pre { margin 0em } 
. csharpcode . rem { color # 008000 } . 
csharpcode . kwrd { color # 0000ff } . csharpcode 
. str { color # 006080 } . csharpcode . 
op { color # 0000c0 } . csharpcode . preproc 
{ color # cc6633 } . csharpcode . asp { 
background color # ffff00 } . csharpcode . html { 
color # 800000 } . csharpcode . attr { color 
# ff0000 } . csharpcode . alt { background color 
# f4f4f4 width 100% margin 0em } . csharpcode . 
lnum { color # 606060 } 在 我们 进行 模型 
选择 的 时候 我们 可以 通过 图形化 数据 的 方式 
这样 我们 可以 根据 一定 的 经验 就 知道 应该 
使用 什么样 的 模型 我们 通过 Matplotlib 来 显示 图像 
这个 包的/nr 安装 直接 下载 这个 包就/nr 可以 了 如果 
提示 你 缺少 什么 包 补齐 就 好了 根据 作者 
使用 我们 画出 玩 视频 游戏 所 消耗 的 时间 
百分比 与 每周 所 消费 的 冰淇淋 公升 数 1 
import matplotlib2 import matplotlib . pyplot as plt3 fig = 
plt . figure 4 ax = fig . add _ 
subplot 111 / / 这边 111 表示 把 绘图 区域 
分成 1行 * 1列 共 1个 区域 然后 在 区域 
1 上 创建 一个 轴 对象 5 ax . scatter 
datingDataMat 1 datingDataMat 2 / / scatter 表示 散点图 6 
matplotlib . collections . PathCollection object at 0 x 0 
0 0 0 0 0 0 0 0 6 4 
D D 1 2 8 7 plt . show . 
csharpcode . csharpcode pre { font size small color black 
font family consolas Courier New courier monospace background color # 
ffffff / * white space pre * / } . 
csharpcode pre { margin 0em } . csharpcode . rem 
{ color # 008000 } . csharpcode . kwrd { 
color # 0000ff } . csharpcode . str { color 
# 006080 } . csharpcode . op { color # 
0000c0 } . csharpcode . preproc { color # cc6633 
} . csharpcode . asp { background color # ffff00 
} . csharpcode . html { color # 800000 } 
. csharpcode . attr { color # ff0000 } . 
csharpcode . alt { background color # f4f4f4 width 100% 
margin 0em } . csharpcode . lnum { color # 
606060 } 对于 这个 图 很难 看出 有用 的 东西 
用 颜色 进行 标识 如 下图 1 ax . scatter 
datingDataMat 1 datingDataMat 2 15.0 * array datingLabels 15.0 * 
array datingLabels . csharpcode . csharpcode pre { font size 
small color black font family consolas Courier New courier monospace 
background color # ffffff / * white space pre * 
/ } . csharpcode pre { margin 0em } . 
csharpcode . rem { color # 008000 } . csharpcode 
. kwrd { color # 0000ff } . csharpcode . 
str { color # 006080 } . csharpcode . op 
{ color # 0000c0 } . csharpcode . preproc { 
color # cc6633 } . csharpcode . asp { background 
color # ffff00 } . csharpcode . html { color 
# 800000 } . csharpcode . attr { color # 
ff0000 } . csharpcode . alt { background color # 
f4f4f4 width 100% margin 0em } . csharpcode . lnum 
{ color # 606060 } 换 一下 属性 x 轴 
用 每年 获取 的 飞行 常客 里程数 表示 则 三类 
分 的 就 比较 明显 了 下面 就是 归一化 不 
归一化 值 大 的 相当于 权重 就 大 而 权重 
的 大小 是 应该 我们 去 添加 的 不是 由 
值 的 大小 来 对于 归一化 我们 一般 有三种 处理 
方法 1 原值 最小值 / 最大值 最小值 * 新的 最大值 
新的 最小值 + 新的 最小值 2 原值 均值 / 标准差 
3 小数 的 规范化 就是 移动 小数 点位 归化 到 
0 1 之间 我们 就 采用 的 是 第一 种 
方式 这边 我们 新的 最大值 是 1 最小值 是 0 
. 我们 的 归一化 就是 原值 最小值 / 最大值 最小值 
1 def autoNorm dataSet 2 minVals = dataSet . min 
0 3 maxVals = dataSet . max 0 4 print 
minVals minVals 5 print maxVals maxVals 6 ranges = maxVals 
minVals7 normDataSet = zeros shape dataSet 8 m = dataSet 
. shape 0 9 print m m 10 normDataSet = 
dataSet tile minVals m 1 11 normDataSet = normDataSet / 
tile ranges m 1 12 return normDataSet ranges minVals13 . 
csharpcode . csharpcode pre { font size small color black 
font family consolas Courier New courier monospace background color # 
ffffff / * white space pre * / } . 
csharpcode pre { margin 0em } . csharpcode . rem 
{ color # 008000 } . csharpcode . kwrd { 
color # 0000ff } . csharpcode . str { color 
# 006080 } . csharpcode . op { color # 
0000c0 } . csharpcode . preproc { color # cc6633 
} . csharpcode . asp { background color # ffff00 
} . csharpcode . html { color # 800000 } 
. csharpcode . attr { color # ff0000 } . 
csharpcode . alt { background color # f4f4f4 width 100% 
margin 0em } . csharpcode . lnum { color # 
606060 } 执行 结果 1 reload kNN 2 module kNN 
from E \ Machine Learning \ exercise \ ch02 \ 
kNN . py 3 normMat ranges minVals = kNN . 
autoNorm datingDataMat 4 minVals array 0 . 0 . 0.001156 
5 maxVals array 9.12730000 e + 04 2.09193490 e + 
01 1.69551700 e + 00 6 m 1000L 7 normMat8 
array 0.44832535 0.39805139 0.56233353 9 0.15873259 0.34195467 0.98724416 10 0.28542943 
0.06892523 0.47449629 11 . . . 12 0.29115949 0.50910294 0.51079493 
13 0.52711097 0.43665451 0.4290048 14 0.47940793 0.3768091 0.78571804 15 ranges16 
array 9.12730000 e + 04 2.09193490 e + 01 1.69436100 
e + 00 17 minVals18 array 0 . 0 . 
0.001156 为了 评估 算法 我们 将 数据 分成 训练 集 
和 测试 集 通常用 70% 的 数据 作为 训练 集 
用 剩下 30% 的 数据 作为 测试 集 很 重要 
的 一点 是 训练 集 和 测试 集 均要 含有 
各种 类型 的 数据 通常 我们 要 对 数据 进行 
洗牌 然后再 分成 训练 集 和 测试 集 下面 进行 
测试 1 def datingClassTest 2 hoRatio = 0.103 datingDataMat datingLabels 
= file2matrix datingTestSet . txt 4 normMat ranges minVals = 
autoNorm datingDataMat 5 m = normMat . shape 0 6 
numTestVecs = int m * hoRatio 7 errorCount = 0.08 
for i in range numTestVecs 9 # 这边 的 意思 
是 拿 前 10% 的 数据 作为 测试 后 90% 
的 数据 是 训练样本 10 classifierResult = classify0 normMat i 
normMat numTestVecs m datingLabels numTestVecs m 5 11 print the 
classifier came back with % d the real answer is 
% d % classifierResult datingLabels i 12 if classifierResult = 
datingLabels i 13 errorCount + = 1.014 print the total 
error rate is % f % errorCount / float numTestVecs 
. csharpcode . csharpcode pre { font size small color 
black font family consolas Courier New courier monospace background color 
# ffffff / * white space pre * / } 
. csharpcode pre { margin 0em } . csharpcode . 
rem { color # 008000 } . csharpcode . kwrd 
{ color # 0000ff } . csharpcode . str { 
color # 006080 } . csharpcode . op { color 
# 0000c0 } . csharpcode . preproc { color # 
cc6633 } . csharpcode . asp { background color # 
ffff00 } . csharpcode . html { color # 800000 
} . csharpcode . attr { color # ff0000 } 
. csharpcode . alt { background color # f4f4f4 width 
100% margin 0em } . csharpcode . lnum { color 
# 606060 } 得到 的 结果 1 import kNN2 kNN 
. datingClassTest 3 the classifier came back with 3 the 
real answer is 34 the classifier came back with 2 
the real answer is 25 the classifier came back with 
1 the real answer is 16 7 the classifier came 
back with 3 the real answer is 38 the classifier 
came back with 3 the real answer is 39 the 
classifier came back with 2 the real answer is 210 
the classifier came back with 2 the real answer is 
111 the classifier came back with 1 the real answer 
is 112 the total error rate is 0.040000 . csharpcode 
. csharpcode pre { font size small color black font 
family consolas Courier New courier monospace background color # ffffff 
/ * white space pre * / } . csharpcode 
pre { margin 0em } . csharpcode . rem { 
color # 008000 } . csharpcode . kwrd { color 
# 0000ff } . csharpcode . str { color # 
006080 } . csharpcode . op { color # 0000c0 
} . csharpcode . preproc { color # cc6633 } 
. csharpcode . asp { background color # ffff00 } 
. csharpcode . html { color # 800000 } . 
csharpcode . attr { color # ff0000 } . csharpcode 
. alt { background color # f4f4f4 width 100% margin 
0em } . csharpcode . lnum { color # 606060 
} 这个 结果 还好 我 这边 设置 的 k 为 
5 k 的 变化 结果 也会 变化 所有 怎么 选择 
这个 k 也是 值得 研究 的 最后 为 了 适合 
系统 的 使用 变得 直观 一点 写下 如下 函数 1 
def classifyPerson 2 resultList = not at all in small 
doses in large doses 3 percentTats = float raw _ 
input percentage of time spent playing video games 4 ffMiles 
= float raw _ input frequent flier miles earned per 
year 5 iceCream = float raw _ input liters of 
ice cream consumed per year 6 datingDataMat datingLabels = file2matrix 
datingTestSet . txt 7 normMat ranges minVals = autoNorm datingDataMat 
8 inArr = array ffMiles percentTats iceCream 9 classifierResult = 
classify0 inArr minVals / ranges normMat datingLabels 3 10 # 
这边 减 1 是 由于 最后 分类 的 数据 是 
1 2 3对 应到 数组 中 是 0 1 211 
print You will probably like this person resultList classifierResult 1 
. csharpcode . csharpcode pre { font size small color 
black font family consolas Courier New courier monospace background color 
# ffffff / * white space pre * / } 
. csharpcode pre { margin 0em } . csharpcode . 
rem { color # 008000 } . csharpcode . kwrd 
{ color # 0000ff } . csharpcode . str { 
color # 006080 } . csharpcode . op { color 
# 0000c0 } . csharpcode . preproc { color # 
cc6633 } . csharpcode . asp { background color # 
ffff00 } . csharpcode . html { color # 800000 
} . csharpcode . attr { color # ff0000 } 
. csharpcode . alt { background color # f4f4f4 width 
100% margin 0em } . csharpcode . lnum { color 
# 606060 } 运行 结果 如下 1 import kNN2 kNN 
. classifyPerson 3 percentage of time spent playing video games 
114 frequent flier miles earned per year 111115 liters of 
ice cream consumed per year 0.66 You will probably like 
this person in large doses7 kNN . classifyPerson 8 percentage 
of time spent playing video games 109 frequent flier miles 
earned per year 1000010 liters of ice cream consumed per 
year 0.511 You will probably like this person in small 
doses . csharpcode . csharpcode pre { font size small 
color black font family consolas Courier New courier monospace background 
color # ffffff / * white space pre * / 
} . csharpcode pre { margin 0em } . csharpcode 
. rem { color # 008000 } . csharpcode . 
kwrd { color # 0000ff } . csharpcode . str 
{ color # 006080 } . csharpcode . op { 
color # 0000c0 } . csharpcode . preproc { color 
# cc6633 } . csharpcode . asp { background color 
# ffff00 } . csharpcode . html { color # 
800000 } . csharpcode . attr { color # ff0000 
} . csharpcode . alt { background color # f4f4f4 
width 100% margin 0em } . csharpcode . lnum { 
color # 606060 } 下一个 demo 是 手写 识别系统 书中 
为了 简化 只设 别0/nr 9 的 数字 作者 这边 是 
将 图像 数据 转化成 向量 写下 如下 函数 1 # 
把 图像 文本 数据 存入 returnVect2 def img2vector filename 3 
# 图像 像素 是 32 * 324 returnVect = zeros 
1 1024 5 fr = open filename 6 for i 
in range 32 7 lineStr = fr . readline 8 
for j in range 32 9 returnVect 0 32 * 
i + j = int lineStr j 10 return returnVect 
. csharpcode . csharpcode pre { font size small color 
black font family consolas Courier New courier monospace background color 
# ffffff / * white space pre * / } 
. csharpcode pre { margin 0em } . csharpcode . 
rem { color # 008000 } . csharpcode . kwrd 
{ color # 0000ff } . csharpcode . str { 
color # 006080 } . csharpcode . op { color 
# 0000c0 } . csharpcode . preproc { color # 
cc6633 } . csharpcode . asp { background color # 
ffff00 } . csharpcode . html { color # 800000 
} . csharpcode . attr { color # ff0000 } 
. csharpcode . alt { background color # f4f4f4 width 
100% margin 0em } . csharpcode . lnum { color 
# 606060 } 运行 查看 如下 1 import kNN2 kNN 
. img2vector testDigits / 0 _ 13 . txt 3 
array 0 . 0 . 0 . . . . 
0 . 0 . 0 . 4 testVector = kNN 
. img2vector testDigits / 0 _ 13 . txt 5 
testVector 0 0 31 6 array 0 . 0 . 
0 . 0 . 0 . 0 . 0 . 
0 . 0 . 0 . 0 . 0 . 
0 . 7 0 . 1 . 1 . 1 
. 1 . 0 . 0 . 0 . 0 
. 0 . 0 . 0 . 0 . 8 
0 . 0 . 0 . 0 . 0 . 
. csharpcode . csharpcode pre { font size small color 
black font family consolas Courier New courier monospace background color 
# ffffff / * white space pre * / } 
. csharpcode pre { margin 0em } . csharpcode . 
rem { color # 008000 } . csharpcode . kwrd 
{ color # 0000ff } . csharpcode . str { 
color # 006080 } . csharpcode . op { color 
# 0000c0 } . csharpcode . preproc { color # 
cc6633 } . csharpcode . asp { background color # 
ffff00 } . csharpcode . html { color # 800000 
} . csharpcode . attr { color # ff0000 } 
. csharpcode . alt { background color # f4f4f4 width 
100% margin 0em } . csharpcode . lnum { color 
# 606060 } 分类 函数 已经有 下面 就是 测试 模型 
1 def h a n d w r i t 
i n g C l a s s T e 
s t 2 hwLabels = 3 # 获取 文件目录 4 
trainingFileList = listdir trainingDigits 5 m = len trainingFileList 6 
trainingMat = zeros m 1024 7 for i in range 
m 8 fileNameStr = trainingFileList i 9 # 得到 数组 
如 0 _ 12 txt 0 是 第一 个 数据 
0 _ 1210 fileStr = fileNameStr . split . 0 
11 # 得到 数组 如 0 12 获得 第一 个 
数 0 从/p 这边/r 看出/v 文件名/n 还是/c 有/v 很大/a 作用/v 
的/uj 12 classNumStr = int fileStr . split _ 0 
13 hwLabels . append classNumStr 14 trainingMat i = img2vector 
trainingDigits / % s % fileNameStr 15 testFileList = listdir 
testDigits 16 errorCount = 0.017 mTest = len testFileList 18 
for i in range mTest 19 fileNameStr = testFileList i 
20 fileStr = fileNameStr . split . 0 21 classNumStr 
= int fileStr . split _ 0 22 vectorUnderTest = 
img2vector testDigits / % s % fileNameStr 23 classifierResult = 
classify0 vectorUnderTest trainingMat hwLabels 3 24 print the classifier came 
back with % d the real answer is % d 
% classifierResult classNumStr 25 if classifierResult = classNumStr errorCount + 
= 1.026 print \ nthe total number of errors is 
% d % errorCount27 print \ nthe total error rate 
is % f % errorCount / float mTest . csharpcode 
. csharpcode pre { font size small color black font 
family consolas Courier New courier monospace background color # ffffff 
/ * white space pre * / } . csharpcode 
pre { margin 0em } . csharpcode . rem { 
color # 008000 } . csharpcode . kwrd { color 
# 0000ff } . csharpcode . str { color # 
006080 } . csharpcode . op { color # 0000c0 
} . csharpcode . preproc { color # cc6633 } 
. csharpcode . asp { background color # ffff00 } 
. csharpcode . html { color # 800000 } . 
csharpcode . attr { color # ff0000 } . csharpcode 
. alt { background color # f4f4f4 width 100% margin 
0em } . csharpcode . lnum { color # 606060 
} 最后 得到 的 结果 1 import kNN2 kNN . 
h a n d w r i t i n 
g C l a s s T e s t 
3 the classifier came back with 0 the real answer 
is 04 the classifier came back with 0 the real 
answer is 05 6 the classifier came back with 9 
the real answer is 97 the classifier came back with 
9 the real answer is 98 the classifier came back 
with 9 the real answer is 99 the classifier came 
back with 9 the real answer is 910 11 the 
total number of errors is 1112 13 the total error 
rate is 0.011628 . csharpcode . csharpcode pre { font 
size small color black font family consolas Courier New courier 
monospace background color # ffffff / * white space pre 
* / } . csharpcode pre { margin 0em } 
. csharpcode . rem { color # 008000 } . 
csharpcode . kwrd { color # 0000ff } . csharpcode 
. str { color # 006080 } . csharpcode . 
op { color # 0000c0 } . csharpcode . preproc 
{ color # cc6633 } . csharpcode . asp { 
background color # ffff00 } . csharpcode . html { 
color # 800000 } . csharpcode . attr { color 
# ff0000 } . csharpcode . alt { background color 
# f4f4f4 width 100% margin 0em } . csharpcode . 
lnum { color # 606060 } 错误率 还是 很低 的 
这个 模型 是 可行 的 最后 作者 给出 k 近邻 
算法 的 不足 k 近邻 算法 必须 保存 全部 数据集 
训练 集 大 的话 占用 存储空间 大 由于 要 对 
每个 数据 计算 距离 是 浮点 型 计算 计算 量大 
另外 相似性 的 判断 是 根据 欧式 距离 来 的 
这样 如果 计算 欧式 距离 的 属性 中 如果 有 
无关 属性 或者 噪音 数据 比较 多 的话 那 这个 
测量 的 距离 就 不是 真正 的 距离 误差 较大 
解决 办法 有给/nr 重要 属性 的 权重 加大 刚 学习 
Python 主要 以看 代码 自己 照着 敲 代码 思考 了 
一下 整个 思路 了解 了 基本 的 Python 语法 下面 
继续 学习 决策树 