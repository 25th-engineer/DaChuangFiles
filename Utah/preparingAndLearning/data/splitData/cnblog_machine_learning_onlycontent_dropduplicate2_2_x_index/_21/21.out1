1 . Iris data setIris 数据集 是 常用 的 分类 
实验 数据集 由 Fisher 1936 收集整理 Iris 也称 鸢尾 花卉 
数据集 是 一类 多重 变量 分析 的 数据集 数据集 包含 
150个 数据集 分为 3类 每类 50个 数据 每个 数据 包含 
4个 属性 可 通过 花萼 长度 花萼 宽度 花瓣 长度 
花瓣 宽度 4个 属性 预测 鸢尾 花卉 属于 Setosa Versicolour 
Virginica 三个 种类 中的 哪 一类 该 数据集 包含 了 
5个 属性 Sepal . Length 花萼 长度 单位 是 cm 
Sepal . Width 花萼 宽度 单位 是 cm Petal . 
Length 花瓣 长度 单位 是 cm Petal . Width 花瓣 
宽度 单位 是 cm species 种类 Iris Setosa 山 鸢尾 
Iris Versicolour 杂色 鸢尾 以及 Iris Virginica 维吉尼亚 鸢尾 如表 
11 所示 的 iris 部分 数据集 表 116.42 . 85.62 
. 2252.33 . 3114.92 . 54.51 . 724.93 . 11.50 
. 105.73 . 81.70 . 304.43 . 21.30 . 205.43 
. 41.50 . 406.93 . 15.12 . 326.73 . 14.41 
. 415.13 . 71.50 . 405.22 . 73.91 . 416.93 
. 14.91 . 515.841 . 20.205 . 43.91 . 70.407 
. 73.86 . 72.226 . 33.34 . 71.612 . Neural 
Network2 . 1 P e r f o r m 
T e n s o r F l o w 
提供 一个 高水平 的 机器学习 API tf . contrib . 
learn 使得 容易 配置 configure 训练 train 和 评估 evaluate 
各种 机器学习 模型 tf . contrib . learn 库 的 
使用 可以 概括 为 五个 步骤 如下 所示 1 Load 
CSVs containing Iris training / test data into a TensorFlow 
Dataset2 Construct a neural network classifier3 Fit the model using 
the training data4 Evaluate the accuracy of the model5 Classify 
new samples2 . 2 Code 本节 以对 Iris 数据集 进行 
分类 为例 进行 介绍 如下 所示 是 完整 的 TensorFlow 
程序 from _ _ future _ _ import absolute _ 
importfrom _ _ future _ _ import divisionfrom _ _ 
future _ _ import print _ functionimport osimport urllibimport numpy 
as npimport tensorflow as tf # Data setsIRIS _ TRAINING 
= iris _ training . csv IRIS _ TRAINING _ 
URL = http / / download . tensorflow . org 
/ data / iris _ training . csv IRIS _ 
TEST = iris _ test . csv IRIS _ TEST 
_ URL = http / / download . tensorflow . 
org / data / iris _ test . csv def 
main # If the training and test sets aren t 
stored locally download them . if not os . path 
. exists IRIS _ TRAINING raw = urllib . urlopen 
IRIS _ TRAINING _ URL . read with open IRIS 
_ TRAINING w as f f . write raw if 
not os . path . exists IRIS _ TEST raw 
= urllib . urlopen IRIS _ TEST _ URL . 
read with open IRIS _ TEST w as f f 
. write raw # Load datasets . training _ set 
= tf . contrib . learn . datasets . base 
. load _ csv _ with _ header filename = 
IRIS _ TRAINING target _ dtype = np . int 
features _ dtype = np . float32 test _ set 
= tf . contrib . learn . datasets . base 
. load _ csv _ with _ header filename = 
IRIS _ TEST target _ dtype = np . int 
features _ dtype = np . float32 # Specify that 
all features have real value datafeature _ columns = tf 
. contrib . layers . real _ valued _ column 
dimension = 4 # Build 3 layer DNN with 10 
20 10 units respectively . classifier = tf . contrib 
. learn . DNNClassifier feature _ columns = feature _ 
columns hidden _ units = 10 20 10 n _ 
classes = 3 model _ dir = / tmp / 
iris _ model # Define the training inputsdef get _ 
train _ inputs x = tf . constant training _ 
set . data y = tf . constant training _ 
set . target return x y # Fit model . 
classifier . fit input _ fn = get _ train 
_ inputs steps = 2000 # Define the test inputsdef 
get _ test _ inputs x = tf . constant 
test _ set . data y = tf . constant 
test _ set . target return x y # Evaluate 
accuracy . accuracy _ score = classifier . evaluate input 
_ fn = get _ test _ inputs steps = 
1 accuracy print \ nTest Accuracy { 0 f } 
\ n . format accuracy _ score # Classify two 
new flower samples . def new _ samples return np 
. array 6.4 3.2 4.5 1.5 5.8 3.1 5.0 1.7 
dtype = np . float32 predictions = list classifier . 
predict input _ fn = new _ samples print New 
Samples Class Predictions { } \ n . format predictions 
if _ _ name _ _ = = _ _ 
main _ _ main 3 . Analysis3 . 1 Load 
data 对于 本文 的 程序 Iris 数据集 被 分为 两部分 
训练 集 有 120个 样例 保存 在 iris _ training 
. csv 文件 中 测试 集 有 30个 样例 保存 
在 iris _ test . csv 文件 中 1 import 
module 首先 程序 引入 必要 module 然后 定义 了 数据集 
的 本地 路径 和 网络 路径 from _ _ future 
_ _ import absolute _ importfrom _ _ future _ 
_ import divisionfrom _ _ future _ _ import print 
_ functionimport osimport urllibimport tensorflow as tfimport numpy as npIRIS 
_ TRAINING = iris _ training . csv IRIS _ 
TRAINING _ URL = http / / download . tensorflow 
. org / data / iris _ training . csv 
IRIS _ TEST = iris _ test . csv IRIS 
_ TEST _ URL = http / / download . 
tensorflow . org / data / iris _ test . 
csv2 Open File 若 本地 路径 上 不存在 数据集 指定 
的 文件 则 通过 网上 下载 if not os . 
path . exists IRIS _ TRAINING raw = urllib . 
urlopen IRIS _ TRAINING _ URL . read with open 
IRIS _ TRAINING w as f f . write raw 
if not os . path . exists IRIS _ TEST 
raw = urllib . urlopen IRIS _ TEST _ URL 
. read with open IRIS _ TEST w as f 
f . write raw 3 load Dataset 接着 将 Iris 
数据集 加载 到 TensorFlow 框架 中 使其 TensorFlow 能够 直接 
使用 这 其中 使用 了 learn . datasets . base 
模块 的 load _ csv _ with _ header 函数 
该 方法 有 三个 参数 filename 指定 了 CSV 文件 
的 名字 target _ dtype 指定 了 数据 集中 目标 
数据类型 其为 numpy datatype 类型 features _ dtype 指定 了 
数据 集中 特征向量 的 数据类型 其为 numpy datatype 类型 如表 
11 所示 Iris 数据 中 的 目标 值 为 0 
~ 2 所以 可以 定义 为 整型数据 就 可以 了 
即 np . int 如下 所示 # Load datasets . 
training _ set = tf . contrib . learn . 
datasets . base . load _ csv _ with _ 
header filename = IRIS _ TRAINING target _ dtype = 
np . int features _ dtype = np . float32 
test _ set = tf . contrib . learn . 
datasets . base . load _ csv _ with _ 
header filename = IRIS _ TEST target _ dtype = 
np . int features _ dtype = np . float32 
由于 tf . contrib . learn 中的 数据类型 Datasets 是以 
元祖 类型定义 的 所以 用户 可以 通过 data 和 target 
两个 域 属性 访问 特征向量 数据 和 目标 数据 即 
training _ set . data 和 training _ set . 
target 为 训练 数据 集中 的 特征向量 和 目标 数据 
3.2 Construct Estimatortf . contrib . learn 预定义 了 许多 
模型 称为 Estimators 用户 以 黑箱模型 使用 Estimator 来 训练 
和 评估 数据 本节 使用 tf . contrib . learn 
. DNNClassifier 来 训练 数据 如下 所示 # Specify that 
all features have real value datafeature _ columns = tf 
. contrib . layers . real _ valued _ column 
dimension = 4 # Build 3 layer DNN with 10 
20 10 units respectively . classifier = tf . contrib 
. learn . DNNClassifier feature _ columns = feature _ 
columns hidden _ units = 10 20 10 n _ 
classes = 3 model _ dir = / tmp / 
iris _ model 首先 程序定义 了 模型 的 feature columns 
其 指定 了 数据 集中 特征向量 的 数据类型 每种 类型 
都 有一个 名字 由于 本节 的 数据 是 实数 型 
所以 这里 使用 . real _ valued _ column 类型 
该 类型 第一 个 参数 指定 了 列 名字 第二个 
参数 指定 了 列 的 数量 其中 所有 的 特征 
类型 都 定义 在 tensorflow / contrib / layers / 
python / layers / feature _ column . py . 
然后 程序 创建 了 DNNClassifier 模型 feature _ columns = 
feature _ columns 指定 所 创建 的 特征向量 类型 hidden 
_ units = 10 20 10 设置 隐藏 层 的 
层数 并 指定 每层 神经元 的 数据 量 n _ 
classes = 3 指定 目标 类型 的 数量 Iris 数据 
有 三类 所以 这里 为 3 model _ dir = 
/ tmp / iris _ model 指定 模型 在 训练 
期间 保存 的 路径 3.3 Describe p i p e 
l i n e T e n s o r 
F l o w 框架 的 数据 都 是以 Tensor 
对象 存在 即 要么 是 constant placeholder 或 Variable 类型 
通常 训练 数据 是以 placeholder 类型定义 然后 用户 训练 时 
传递 所有 的 数据 本节 则将 训练 数据 存储 在 
constant 类型 中 如下 所示 # Define the training inputsdef 
get _ train _ inputs x = tf . constant 
training _ set . data y = tf . constant 
training _ set . target return x y 3.4 Fit 
DNNClassifier 创建 分类器 后 就 可以 调用 神经 网络 中 
DNNClassifier 模型 的 fit 函数 来 训练 模型 了 如下 
所示 # Fit model . classifier . fit input _ 
fn = get _ train _ inputs steps = 2000 
通过 向 fit 传递 get _ train _ inputs 函数 
返回 的 训练 数据 并 指定 训练 的 步数 为 
2000步 3.5 Evaluate Model 训练 模型 后 就 可以 通过 
evaluate 函数 来 评估 模型 的 泛化 能力 了 与 
fit 函数 类似 evaluate 函数 的 输入 数据 也需 为 
Tensor 类型 所以 定义 了 get _ test _ inputs 
函 数来 转换 数据 # Define the test inputsdef get 
_ test _ inputs x = tf . constant test 
_ set . data y = tf . constant test 
_ set . target return x y # Evaluate accuracy 
. accuracy _ score = classifier . evaluate input _ 
fn = get _ test _ inputs steps = 1 
accuracy print \ nTest Accuracy { 0 f } \ 
n . format accuracy _ score 注意 由于 evaluate 函数 
的 返回值 是 一个 Map 类型 即 dict 类型 所以 
直接 根据 accuracy 键 获 取值 accuracy _ score 3.6 
Classify Samples 在 训练 模型 后 就 可以 使用 estimator 
模型 的 predict 函数 来 预测 样例 如表 31 有 
所示 的 两个 样例 希望 预测 其 为什么 类型 表 
31Sepal LengthSepal WidthPetal LengthPetal Width6 . 43 . 24.51 . 
55.83 . 151.7 如下 所示 的 程序 # Classify two 
new flower samples . def new _ samples return np 
. array 6.4 3.2 4.5 1.5 5.8 3.1 5.0 1.7 
dtype = np . float32 predictions = list classifier . 
predict input _ fn = new _ samples print New 
Samples Class Predictions { } \ n . format predictions 
输出 New Samples Class Predictions 1 2 注意 由于 predict 
函数 执行 的 返回 结果 类型 是 generator 所以 上述 
程序 将其 转换 为 一个 list 对象 4 . Logging 
and Monitoring 由于 TensorFlow 的 机器学习 Estimator 是 黑箱 学习 
用户 无法 了解 模型 执行 发生 了 什么 以及 模型 
什么 时候 收敛 所以 tf . contrib . learn 提供 
的 一个 Monitor API 可以 帮助 用户 记录 和 评估 
模型 4.1 Default V a l i d a t 
i o n M o n i t o r 
默认 使用 fit 函数 训练 Estimator 模型 时 TensorFlow 会 
产生 一些 summary 数据 到 fit 函数 指定 的 路径 
中 用户 可以 使用 Tensorborad 来 展示 更 详细 的 
信息 如图 1 所示 执行 上述 程序 DNNClassifier 的 fit 
和 evaluate 函数 后 默认 在 TensorBoard 页面 显示 的 
常量 信息 图 14.2 Monitors 为了 让 用户 更 直观 
地 了解 模型 训练 过程 的 细节 tf . contrib 
. learn 提供 了 一些 高级 Monitors 使得 用户 在 
调用 fit 函数 时 可以 使用 Monitors 来 记录 和 
跟踪 模型 的 执行 细节 如表 41 所示 是 fitt 
函数 支持 的 Monitors 类型 表 4 1 M o 
n i t o r D e s c r 
i p t i o n C a p t 
u r e V a r i a b l 
e 每 执行 n 步 训练 就将 保存 指定 的 
变量值 到 一个 集合 collection 中 PrintTensor 每 执行 n 
步 训练 记录 指定 的 Tensor 值 SummarySaver 每 执行 
n 步 训练 使用 tf . summary . FileWriter 函数 
保存 tf . Summary 缓存 V a l i d 
a t i o n M o n i t 
o r 每 执行 n 步 训练 记录 一 批评 
估 metrics 同时 可 设置 停止 条件 如 \ tensorflow 
\ examples \ tutorials \ monitors \ iris _ monitors 
. py 所示 的 程序 from _ _ future _ 
_ import absolute _ importfrom _ _ future _ _ 
import divisionfrom _ _ future _ _ import print _ 
functionimport osimport numpy as npimport tensorflow as tftf . logging 
. set _ verbosity tf . logging . INFO # 
Data setsIRIS _ TRAINING = os . path . join 
os . path . dirname _ _ file _ _ 
iris _ training . csv IRIS _ TEST = os 
. path . join os . path . dirname _ 
_ file _ _ iris _ test . csv def 
main unused _ argv # Load datasets . training _ 
set = tf . contrib . learn . datasets . 
base . load _ csv _ with _ header filename 
= IRIS _ TRAINING target _ dtype = np . 
int features _ dtype = np . float test _ 
set = tf . contrib . learn . datasets . 
base . load _ csv _ with _ header filename 
= IRIS _ TEST target _ dtype = np . 
int features _ dtype = np . float validation _ 
metrics = { accuracy tf . contrib . learn . 
MetricSpec metric _ fn = tf . contrib . metrics 
. streaming _ accuracy prediction _ key = classes precision 
tf . contrib . learn . MetricSpec metric _ fn 
= tf . contrib . metrics . streaming _ precision 
prediction _ key = classes recall tf . contrib . 
learn . MetricSpec metric _ fn = tf . contrib 
. metrics . streaming _ recall prediction _ key = 
classes mean tf . contrib . learn . MetricSpec metric 
_ fn = tf . contrib . metrics . streaming 
_ mean prediction _ key = classes } validation _ 
monitor = tf . contrib . learn . monitors . 
V a l i d a t i o n 
M o n i t o r test _ set 
. data test _ set . target every _ n 
_ steps = 50 metrics = validation _ metrics early 
_ stopping _ metric = loss early _ stopping _ 
metric _ minimize = True early _ stopping _ rounds 
= 200 # Specify that all features have real value 
datafeature _ columns = tf . contrib . layers . 
real _ valued _ column dimension = 4 # Build 
3 layer DNN with 10 20 10 units respectively . 
classifier = tf . contrib . learn . DNNClassifier feature 
_ columns = feature _ columns hidden _ units = 
10 20 10 n _ classes = 3 model _ 
dir = / tmp / iris _ model config = 
tf . contrib . learn . RunConfig save _ checkpoints 
_ secs = 1 # Fit model . classifier . 
fit x = training _ set . data y = 
training _ set . target steps = 2000 monitors = 
validation _ monitor # Evaluate accuracy . accuracy _ score 
= classifier . evaluate x = test _ set . 
data y = test _ set . target accuracy print 
Accuracy { 0 f } . format accuracy _ score 
# Classify two new flower samples . new _ samples 
= np . array 6.4 3.2 4.5 1.5 5.8 3.1 
5.0 1.7 dtype = float y = list classifier . 
predict new _ samples print Predictions { } . format 
str y if _ _ name _ _ = = 
_ _ main _ _ tf . app . run 
4.3 Configuring V a l i d a t i 
o n M o n i t o r 如图 
1 所示 如果 没有 指定 任何 evaluation metrics 那么 V 
a l i d a t i o n M 
o n i t o r 默认 会 记录 loss 
和 accuracy 信息 但 用户 可以 通过 创建 V a 
l i d a t i o n M o 
n i t o r 对象 来 自定义 metrics 信息 
即 通过 向Va/nr l i d a t i o 
n M o n i t o r 构造函数 传递 
一个 metrics 参数 该 参数 是 一个 Map 类型 dist 
其中 的 key 是 希望 显示 的 名字 value 是 
一个 MetricSpec 对象 其中 tf . contrib . learn . 
MetricSpec 类 的 构造函数 有 如下 四个 参数 metric _ 
fn 是 一个 函数 TensorFlow 在 tf . contrib . 
metrics 模块 中 预定义 了 一些 函数 用户 可以 直接 
使用 prediction _ key 如果 模型 返回 一个 Tensor 或与 
一个 单一 的 入口 那么 这个 参数 可以 被 忽略 
label _ key 可选 weights _ key 可选 如下 所示 
创建 一个 dist 类型 的 对象 validation _ metrics = 
{ accuracy tf . contrib . learn . MetricSpec metric 
_ fn = tf . contrib . metrics . streaming 
_ accuracy prediction _ key = classes precision tf . 
contrib . learn . MetricSpec metric _ fn = tf 
. contrib . metrics . streaming _ precision prediction _ 
key = classes recall tf . contrib . learn . 
MetricSpec metric _ fn = tf . contrib . metrics 
. streaming _ recall prediction _ key = classes mean 
tf . contrib . learn . MetricSpec metric _ fn 
= tf . contrib . metrics . streaming _ mean 
prediction _ key = classes } validation _ monitor = 
tf . contrib . learn . monitors . V a 
l i d a t i o n M o 
n i t o r test _ set . data 
test _ set . target every _ n _ steps 
= 50 metrics = validation _ metrics early _ stopping 
_ metric = loss early _ stopping _ metric _ 
minimize = True early _ stopping _ rounds = 200 
注意 Python 中的 dist 可以 直接 以 一对 { } 
初始 化元素 如上 validation _ metrics 对象 创建 所示 5 
. 参考文献 1 . TensorFlow à Develop à Get Started 
à tf . contrib . learn Quickstart 2 . TensorFlow 
à Develop à Get Started à Logging and Monitoring Basics 
with tf . contrib . learn 