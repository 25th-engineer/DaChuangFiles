在 opencv3 . 0 中 提供 了 一个 ml . 
cpp 的 文件 这 里面 全是/nr 机器 学习 的 算法 
共 提供 了 这么 几种 1 正 态 贝叶斯 normal 
Bayessian classifier     我 已在 另外 一 篇 博文 
中 介绍 过 在 opencv3 中 实现 机器 学习 之 
利用 正 态 贝叶斯 分类 2 K 最 近邻 k 
nearest neighbors classifier3 支持 向量 机 support vectors machine   
  请 参考 我 的 另外 一篇 博客 在 opencv3 
中 实现 机器 学习 之 利用 svm 支持 向量 机 
分类 4 决策树   decision tree5 ADA Boost adaboost6 梯度 
提升 决策树 gradient boosted trees7 随机 森林 random forest8 人工神经网络 
artificial neural networks9 EM 算法 expectation maximization 这些 算法 在 
任何 一本 机器学习 书本上 都 可以 介绍 过 他们 大致 
的 分类 过程 都很/nr 相似 主要 分为 三 个 环节 
一 收集 样本数据 sampleData 二 训练 分类器 mode 三 对 
测试数据 testData 进行 预测 不同 的 地方 就是 在 opencv 
中的 参数 设定 假设 训练 数据 为 trainingDataMat 且 已经 
标注 好 labelsMat 待 测 数据 为 testMat . 1 
正 态 贝叶斯 / / 创建 贝叶斯 分类器 Ptr N 
o r m a l B a y e s 
C l a s s i f i e r 
model = N o r m a l B a 
y e s C l a s s i f 
i e r create / / 设置 训练 数据 Ptr 
TrainData tData = TrainData create trainingDataMat ROW _ SAMPLE labelsMat 
/ / 训练 分类器 model train tData / / 预测 
数据 float response = model predict testMat 2 K 最 
近邻 Ptr KNearest knn = KNearest create / / 创建 
knn 分类器 knn setDefaultK K / / 设定 k 值 
knn setIsClassifier true / / 设置 训练 数据 Ptr TrainData 
tData = TrainData create trainingDataMat ROW _ SAMPLE labelsMat knn 
train tData float response = knn predict testMat 3 支持 
向量 机 Ptr SVM svm = SVM create / / 
创建 一个 分类器 svm setType SVM C _ SVC / 
/ 设置 svm 类型 svm setKernel SVM POLY / / 
设置 核 函数 svm setDegree 0.5 svm setGamma 1 svm 
setCoef0 1 svm setNu 0.5 svm setP 0 svm setTermCriteria 
TermCriteria TermCriteria MAX _ ITER + TermCriteria EPS 1000 0.01 
svm setC C Ptr TrainData tData = TrainData create trainingDataMat 
ROW _ SAMPLE labelsMat svm train tData float response = 
svm predict testMat 4 决策树   decision treePtr DTrees dtree 
= DTrees create / / 创建 分类器 dtree setMaxDepth 8 
/ / 设置 最大 深度 dtree s e t M 
i n a m p l e C o u 
n t 2 dtree setUseSurrogates false dtree setCVFolds 0 / 
/ 交叉 验证 dtree setUse1SERule false dtree s e t 
T r u n c a t e P r 
u n e d T r e e false Ptr 
TrainData tData = TrainData create trainingDataMat ROW _ SAMPLE labelsMat 
dtree train tData float response = dtree predict testMat 5 
ADA Boost adaboostPtr Boost boost = Boost create boost setBoostType 
Boost DISCRETE boost setWeakCount 100 boost s e t W 
e i g h t T r i m R 
a t e 0.95 boost setMaxDepth 2 boost setUseSurrogates false 
boost setPriors Mat Ptr TrainData tData = TrainData create trainingDataMat 
ROW _ SAMPLE labelsMat boost train tData float response = 
boost predict testMat 6 梯度 提升 决策树 gradient boosted trees 
此 算法 在 opencv3 . 0 中被 注释 掉了 原因 
未知 因此 此处 提供 一个 老 版本 的 算法 GBTrees 
Params params GBTrees DEVIANCE _ LOSS / / loss _ 
function _ type 100 / / weak _ count 0.1 
f / / shrinkage 1.0 f / / subsample _ 
portion 2 / / max _ depth false / / 
use _ surrogates Ptr TrainData tData = TrainData create trainingDataMat 
ROW _ SAMPLE labelsMat Ptr GBTrees gbtrees = StatModel train 
GBTrees tData params float response = gbtrees predict testMat 7 
随机 森林 random forestPtr RTrees rtrees = RTrees create rtrees 
setMaxDepth 4 rtrees s e t M i n a 
m p l e C o u n t 2 
rtrees s e t R e g r e s 
s i o n A c c u r a 
c y 0 . f rtrees setUseSurrogates false rtrees setMaxCategories 
16 rtrees setPriors Mat rtrees s e t C a 
l c u l a t e V a r 
I m p o r t a n c e 
false rtrees s e t A c t i v 
e V a r C o u n t 1 
rtrees setTermCriteria TermCriteria TermCriteria MAX _ ITER 5 0 Ptr 
TrainData tData = TrainData create trainingDataMat ROW _ SAMPLE labelsMat 
rtrees train tData float response = rtrees predict testMat 8 
人工神经网络 artificial neural networksPtr ANN _ MLP ann = ANN 
_ MLP create ann setLayerSizes layer _ sizes ann s 
e t A c t i v a t i 
o n F u n c t i o n 
ANN _ MLP SIGMOID _ SYM 1 1 ann setTermCriteria 
TermCriteria TermCriteria MAX _ ITER + TermCriteria EPS 300 FLT 
_ EPSILON ann setTrainMethod ANN _ MLP BACKPROP 0.001 Ptr 
TrainData tData = TrainData create trainingDataMat ROW _ SAMPLE labelsMat 
ann train tData float response = ann predict testMat 9 
EM 算法 expectation maximizationEM 算法 与 前面 的 稍微 有点 
不同 它 需要 创建 很多 个 model 将 trainingDataMat 分成 
很多 个 modelSamples 每个 modelSamples 训练 出 一个 model 训练 
核心 代码 为 int nmodels = int labelsMat . size 
vector Ptr EM em _ models nmodels Mat modelSamples for 
i = 0 i nmodels i + + { const 
int componentCount = 3 modelSamples . release for j = 
0 j labelsMat . rows j + + { if 
labelsMat . at int j 0 = = i modelSamples 
. push _ back trainingDataMat . row j } / 
/ learn models if modelSamples . empty { Ptr EM 
em = EM create em s e t C l 
u s t e r s N u m b 
e r componentCount em s e t C o v 
a r i a n c e M a t 
r i x T y p e EM COV _ 
MAT _ DIAGONAL em trainEM modelSamples noArray noArray noArray em 
_ models i = em } } 预测 Mat logLikelihoods 
1 nmodels CV _ 64FC1 Scalar DBL _ MAX for 
i = 0 i nmodels i + + { if 
em _ models i . empty logLikelihoods . at double 
i = em _ models i predict2 testMat noArray 0 
} 这么 多 的 机器学习 算法 在 实际 用 途中 
照 我 的 理解 其实 只 需要 掌握 svm 算法 
就 可以 了 ANN 算法 在 opencv 中 也叫 多层 
感知机 因此 在 训练 的 时候 需要 分 多层 EM 
算法 需要 为 每 一类 创建 一个 model 其中 一些 
算法 的 具体 代码 练习 在 opencv3 中的 机器学习 算法 
练习 对 OCR 进行 分类 