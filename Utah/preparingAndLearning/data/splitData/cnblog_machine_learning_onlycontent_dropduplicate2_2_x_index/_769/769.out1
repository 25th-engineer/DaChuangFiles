简单 来说 机器 学习 的 核心 步骤 在于 获取 学习 
数据 选择 机器 算法 定型 模型 评估 模型 预测模型 结果 
下面 本人 就 以 判断 日报 内容 是否 合格 为例 
为 大家 简单 的 阐述 一下 C # 的 机器学习 
第一步 问题 分析 根据 需求 可以 得出 我们 的 模型 
是以 日报 的 内容 做 为 学习 的 特征 确定 
的 然后 通过 模型 判断 将该 目标 对象 预测 为 
是否 符合 标准 合格 与 不合格 简单 来说 就是 一种 
分类 场景 此 场景 结果 属于 二元 分类 不是 A 
就是 B 那么 也 就 确定 了 核心 算法 为 
分类 算法 当然 还有 其它 的 分类 算法 有兴趣 的 
可以 自己 去 了解 一下 在 这里 就 不多 做 
说明 了 第二步 环境 准备 其他 的 代码 编译 运行 
的 环境 并 没有 太多 要求 你 只 需要 引用 
C # 机器学习 的 NuGet   包 名为 Microsoft . 
ML 具体 的 安装 步骤 在此 就不 做 详细 介绍 
了 第三步 准备 数据 这里 会 准备 两个 数据集 一个 
定型 模型 的 数据集 可以 称之为 学习 资料 wikipedia detox 
250 line data . tsv 数据 实例 部分 展示 如下 
你 的 数据 按照 这种 排列 格式 即可 该 该 
格式 的 定义 取决于 你 的 输入 数据集 类 的 
结构 在 下面 会 讲到 Sentiment SentimentText 1 第一天 上班 
无事 1 完成 了 领导 的 安排 任务 1 编写 
了 一些 代码 然 后写 了 一些 杂七杂八 的 文档 
1 和/c 一般/a 的/uj 码/n 农/zg 做了/i 一样/r 的/uj 事情/n 
1 和 产品 经理 一起 做 了 一些 项目 上 
的 事情 1 早 上来 的 时候 就 开始 讨论 
需求 然后 开始 写 代码 快 下班 的 时候 完成 
了 整个 过程 的 文档 分享 0 * * * 
项目 的 整体 编排 会议 设计图 的 首页 以及 我 
的 个人 中心 制作 0 * * 项目 需求 的 
对接 需求 的 梳理 实体 结构 的 定义 数据库 的 
迁移 脑 图 的 完善 0 1 * * 项目 
的 模板 消息 代码 编写 2 * * 项目管理 后台 
的 模板 发送 完善 定型 模型 数据集 准备好 之后 还有 
一个 评估 模型 的 测试 数据集 可以 称之为 标准答案 wikipedia 
detox 250 line test/w ./i tsv/w 格式/n 与/p 上面/f 展示/v 
的/uj 评估/vn 数据集/i 一样/r 定型/b 数据/n 的/uj 数据/n 越/d 丰富/a 
算法/n 的/uj 回归/v 曲线/n 方程/n 就会/i 越/d 接近/v 理想/n 的/uj 
模型/n 方程/n 你 的 模型 预测 结果 就会 越 符合 
你 的 要求 第四步 定义/n 特征/n 类/q 根据/p 分享/v 的/uj 
模型/n 确定/v 其/r 分析/vn 的/uj 特征/n 项并/nr 定义/n 为/p 相关/v 
的/uj 类/q 并且/c 需要/v 引用/v 机器学习/i 的/uj 包/v using/w  /i 
Microsoft/w ./i ML/w ./i Data/w 由此 模型 定义 的 数据集 
类 如下 结果 可看 注释 / / / summary / 
/ / 输入 数据集 类 / / / / summary 
public class SentimentData { / / / summary / / 
/ 日志 是否 合格 的 值 0 为 合格 1 
不 合格 / / / / summary Column ordinal 0 
name Label public float Sentiment / / / summary / 
/ / 日报 内容 / / / / summary Column 
ordinal 1 public string SentimentText } / / / summary 
/ / / 预测 结果集 类 / / / / 
summary public class e n t i m e n 
t P r e d i c t i o 
n { / / / summary / / / 预测值 
是否 合格 / / / / summary ColumnName PredictedLabel public 
bool Prediction { get set } / / / summary 
/ / / 或然率 结果 分布 概率 / / / 
/ summary ColumnName Probability public float Probability { get set 
} } 第一 个 SentimentData 类 为 输入 数据集 类 
指 的 就是 根据 定型 的 数据集 的 特征 项 
定义 的 集 类 第二个 e n t i m 
e n t P r e d i c t 
i o n 类 为 预测 结果集 类 也 就是 
你 所 需要 的 结果 的 类 定义 该类 的 
结构 一般 受 你 所 使用 的 学习 算法 影响 
根据 你 的 学习 管道 输出 的 结果 以及 个人 
需求 的 综合 考虑 来 定义 输入 集 类 带 
的 Column 属性 标注 其 在 数据集 的 格式 位置 
的 编排 以及 何为 Label 值 预测 集 的 PredictedLabel 
在 预测 和 评估 过程 中 使用 第五步 代码 实现 
首先 定义 以 指定 这些 路径 和 _/nr textLoader   变量 
用来 读取数据 或者 是 保存 实验 数据 具体 如下 所示 
_ trainDataPath   具有 用于 定型 模型 的 数据 集 
路径 _ testDataPath   具有 用于 评估 模型 的 数据 
集 路径 _ modelPath   具有 在 其中 保存 定型 
模型 的 路径 _ textLoader   是 用于 加载 和 
转换 数据集 的   TextLoader 然后 定义 程序 的 入口 
main 函数 以及 相应 的 处理 方法 定义 SaveModelAsFile 方法 
将 模型 保存为 . zip 文件 代码 如下 所示 private 
static void SaveModelAsFile MLContext mlContext ITransformer model { using var 
fs = new FileStream _ modelPath FileMode . Create FileAccess 
. Write FileShare . Write mlContext . Model . Save 
model fs Console . WriteLine 模型 保存 路径 为 { 
0 } _ modelPath Console . ReadLine } 定义 Train 
方法 选择 学习 方法 并且 创建 相应 的 学习 管道 
输出 定型 后的/nr 模型 model 代码 如下 所示 public static 
ITransformer Train MLContext mlContext string dataPath { IDataView dataView = 
_ textLoader . Read dataPath / / 数据 特征 化 
按照 管道 所需 的 格式 转换 数据 var pipeline = 
mlContext . Transforms . Text . FeaturizeText inputColumnName SentimentText outputColumnName 
Features / / 根据 学习 算法 添加 学习 管道 . 
Append mlContext . B i n a r y C 
l a s s i f i c a t 
i o n . Trainers . FastTree numLeaves 50 numTrees 
50 m i n D a t a p o 
i n t s I n L e a v 
e s 20 / / 得到 模型 var model = 
pipeline . Fit dataView Console . WriteLine / / 返回 
定型 模型 return model } 模型 定型 之后 我们 需要 
创建 一个 方法 Evaluate 来 评测 该 模型 的 质量 
根据 你 自己 的 标准 测试 数据集 与 该 模型 
的 符合 程度 来 判断 并且 输出 相应 的 指标 
该 指标 参数 根据 你 所 调用 的 评估 方法 
返回 具体 的 根据 你 的 算法 方程 返回 相应 
的 方程 的 参数 代码 如下 所示 public static void 
Evaluate MLContext mlContext ITransformer model { var dataView = _ 
textLoader . Read _ testDataPath Console . WriteLine = = 
= = = = = = = = = = 
= = = 用 测试 数据 评估 模型 的 准确性 
= = = = = = = = = = 
= = = = = var predictions = model . 
Transform dataView / / 评测 定型 模型 的 质量 var 
metrics = mlContext . B i n a r y 
C l a s s i f i c a 
t i o n . Evaluate predictions Label Console . 
WriteLine Console . WriteLine 模型 质量 量度 评估 Console . 
WriteLine Console . WriteLine $ 精度 { metrics . Accuracy 
P2 } Console . WriteLine $ Auc { metrics . 
Auc P2 } Console . WriteLine = = = = 
= = = = = = = = = = 
= 模型 结束 评价 = = = = = = 
= = = = = = = = = Console 
. ReadLine / / 评测 完成 之后 开始 保存 定型 
的 模型 SaveModelAsFile mlContext model } 定义 单个 数据 的 
预测 方法 Predict 与 批处理 预测 的 方法 P r 
e d i c t W i t h M 
o d e l L o a d e d 
F r o m F i l e 单个 数据集 
的 预测 代码 如下 所示 private static void Predict MLContext 
mlContext ITransformer model { / / 创建 包装 器 var 
p r e d i c t i o n 
F u n c t i o n = model 
. C r e a t e P r e 
d i c t i o n E n g 
i n e SentimentData e n t i m e 
n t P r e d i c t i 
o n mlContext SentimentData sampleStatement = new SentimentData { SentimentText 
= 爱车 新 需求 开发 麦 扣 日志 监控 部分 
页面 数据 绑定 } / / 预测 结果 var resultprediction 
= p r e d i c t i o 
n F u n c t i o n . 
Predict sampleStatement Console . WriteLine Console . WriteLine = = 
= = = = = = = = = = 
= = = 单个 测试数据 预测 = = = = 
= = = = = = = = = = 
= Console . WriteLine Console . WriteLine $ 日报 内容 
{ sampleStatement . SentimentText } | 是否 合格 { Convert 
. ToBoolean resultprediction . Prediction 合格 不 合格 } | 
符合率 { resultprediction . Probability } Console . WriteLine = 
= = = = = = = = = = 
= = = = 预测 结束 = = = = 
= = = = = = = = = = 
= Console . WriteLine Console . ReadLine } 批处理 数据集 
预测 方法 代码 如下 所示 public static void P r 
e d i c t W i t h M 
o d e l L o a d e d 
F r o m F i l e MLContext mlContext 
{ IEnumerable SentimentData sentiments = new { new SentimentData { 
SentimentText = 1 完成 爱车 年卡/nr 代码 编写 2 与 
客户 完成 需求 对接 } new SentimentData { SentimentText = 
没有 工作 内容 } } ITransformer loadedModel using var stream 
= new FileStream _ modelPath FileMode . Open FileAccess . 
Read FileShare . Read { loadedModel = mlContext . Model 
. Load stream } / / 创建 预测 也 称之为 
创建 预测 房屋 var s e n t i m 
e n t t r e a m i n 
g D a t a V i e w = 
mlContext . Data . R e a d F r 
o m E n u m e r a b 
l e sentiments var predictions = loadedModel . Transform s 
e n t i m e n t t r 
e a m i n g D a t a 
V i e w / / 使用 模型 预测 结果 
值 为 1 不 合格 还是 0 合格 var predictedResults 
= mlContext . CreateEnumerable e n t i m e 
n t P r e d i c t i 
o n predictions reuseRowObject false Console . WriteLine Console . 
WriteLine = = = = = = = = = 
= = = = = = 多 样本 加载 模型 
的 预测 试验 = = = = = = = 
= = = = = = = = var s 
e n t i m e n t s A 
n d P r e d i c t i 
o n s = sentiments . Zip predictedResults sentiment prediction 
= sentiment prediction foreach var item in s e n 
t i m e n t s A n d 
P r e d i c t i o n 
s { Console . WriteLine $ 日报 内容 { item 
. sentiment . SentimentText } | 是否 合格 { Convert 
. ToBoolean item . prediction . Prediction 合格 不 合格 
} | 符合率 { item . prediction . Probability } 
} Console . WriteLine = = = = = = 
= = = = = = = = = 预测 
结束 = = = = = = = = = 
= = = = = = Console . ReadLine } 
在 以上 的 方法 定义 完成 之后 开始 进行 方法 
的 调用 public static void Main string args { / 
/ 创建 一个 MLContext 为 ML 作业 提供 一个 上下文 
MLContext mlContext = new MLContext seed 0 / / 初始化 
_ textLoader 以 将其 重复 应用于 所 需要 的 数据集 
_ textLoader = mlContext . Data . CreateTextLoader columns new 
TextLoader . Column { new TextLoader . Column Label DataKind 
. Bool 0 new TextLoader . Column SentimentText DataKind . 
Text 1 } separatorChar \ t hasHeader true / / 
定型 模型 var model = Train mlContext _ trainDataPath / 
/ 评测 模型 Evaluate mlContext model / / 单个 数据 
预测 Predict mlContext model / / 批处理 预测 数据 P 
r e d i c t W i t h 
M o d e l L o a d e 
d F r o m F i l e mlContext 
} 准备 代码 之后 你 的 小小的 机器 人 就要 
开始 学习 啦 好吧 开始 编译 运 行吧 运行 产生 
结果 为 由于 训练 的 数据 集 特征 化 参数 
的 准确性 以及 数据 的 涵盖 广度 不够 导致 定义 
的 模型 质量 非常 的 不 理想 因此 我们 可以 
看到 我们 的 预测 结果 也 是 不够 符合 我们 
的 理想 状态 可见 我们 小 机器 的 学习 之路 
是 非常 漫长 的 过程 啊 由 此次 的 机器 
学习 的 小小 实践 本人 也 深有体会 机器 就像 一个 
小孩 一样 首先 你 得 根据 他 的 性格 特征 
化 参数 确定 应该 给予 他 什么样 的 学习 环境 
学习 算法 创建 的 学习 管道 并 提供 学习 资料 
定型 机器学习 模型 数据集 然后 为 其 确定 一个 发展 
目标 评估 模型 数据集 并且 不断 的 进行 考试 单个 
数据 的 预测 与 批量 数据 的 预测 考试 需要 
特定 的 考试 场地 预测 所 需要 调用 的 方法 
通过 该 种 方式 让 机器 不断 的 学习 不断 
的 精进 