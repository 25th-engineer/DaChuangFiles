import numpy as np import matplotlib . pyplot as plt 
from sklearn import datasets from sklearn . model _ selection 
import train _ test _ split from sklearn . tree 
import D e c i s i o n T 
r e e C l a s s i f 
i e r D e c i s i o 
n T r e e R e g r e 
s s o r def load _ data 加载 用于 
分类 问题 的 数据集 数据集 采用 scikit learn 自带 的 
iris 数据集 # scikit learn 自带 的 iris 数据集 iris 
= datasets . load _ iris X _ train = 
iris . data y _ train = iris . target 
return train _ test _ split X _ train y 
_ train test _ size = 0.25 random _ state 
= 0 stratify = y _ train # 分类 决策树 
D e c i s i o n T r 
e e C l a s s i f i 
e r 模型 def test _ D e c i 
s i o n T r e e C l 
a s s i f i e r * data 
X _ train X _ test y _ train y 
_ test = data clf = D e c i 
s i o n T r e e C l 
a s s i f i e r clf . 
fit X _ train y _ train print Training score 
% f % clf . score X _ train y 
_ train print Testing score % f % clf . 
score X _ test y _ test # 产生 用于 
分类 问题 的 数据集 X _ train X _ test 
y _ train y _ test = load _ data 
# 调用 test _ D e c i s i 
o n T r e e C l a s 
s i f i e r test _ D e 
c i s i o n T r e e 
C l a s s i f i e r 
X _ train X _ test y _ train y 
_ test def test _ D e c i s 
i o n T r e e C l a 
s s i f i e r _ criterion * 
data 测试 D e c i s i o n 
T r e e C l a s s i 
f i e r 的 预测 性能 随 criterion 参数 
的 影响 X _ train X _ test y _ 
train y _ test = data criterions = gini entropy 
for criterion in criterions clf = D e c i 
s i o n T r e e C l 
a s s i f i e r criterion = 
criterion clf . fit X _ train y _ train 
print criterion % s % criterion print Training score % 
f % clf . score X _ train y _ 
train print Testing score % f % clf . score 
X _ test y _ test # 调用 test _ 
D e c i s i o n T r 
e e C l a s s i f i 
e r _ criterion test _ D e c i 
s i o n T r e e C l 
a s s i f i e r _ criterion 
X _ train X _ test y _ train y 
_ test def test _ D e c i s 
i o n T r e e C l a 
s s i f i e r _ splitter * 
data 测试 D e c i s i o n 
T r e e C l a s s i 
f i e r 的 预测 性能 随 划分 类型 
的 影响 X _ train X _ test y _ 
train y _ test = data splitters = best random 
for splitter in splitters clf = D e c i 
s i o n T r e e C l 
a s s i f i e r splitter = 
splitter clf . fit X _ train y _ train 
print splitter % s % splitter print Training score % 
f % clf . score X _ train y _ 
train print Testing score % f % clf . score 
X _ test y _ test # 调用 test _ 
D e c i s i o n T r 
e e C l a s s i f i 
e r _ splitter test _ D e c i 
s i o n T r e e C l 
a s s i f i e r _ splitter 
X _ train X _ test y _ train y 
_ test def test _ D e c i s 
i o n T r e e C l a 
s s i f i e r _ depth * 
data maxdepth 测试 D e c i s i o 
n T r e e C l a s s 
i f i e r 的 预测 性能 随 max 
_ depth 参数 的 影响 X _ train X _ 
test y _ train y _ test = data depths 
= np . arange 1 maxdepth training _ scores = 
testing _ scores = for depth in depths clf = 
D e c i s i o n T r 
e e C l a s s i f i 
e r max _ depth = depth clf . fit 
X _ train y _ train training _ scores . 
append clf . score X _ train y _ train 
testing _ scores . append clf . score X _ 
test y _ test # # 绘图 fig = plt 
. figure ax = fig . add _ subplot 1 
1 1 ax . plot depths training _ scores label 
= traing score marker = o ax . plot depths 
testing _ scores label = testing score marker = * 
ax . set _ xlabel maxdepth ax . set _ 
ylabel score ax . set _ title Decision Tree Classification 
ax . legend framealpha = 0.5 loc = best plt 
. show # 调用 test _ D e c i 
s i o n T r e e C l 
a s s i f i e r _ depth 
test _ D e c i s i o n 
T r e e C l a s s i 
f i e r _ depth X _ train X 
_ test y _ train y _ test maxdepth = 
100 import os import pydotplus from io import StringIO from 
sklearn . tree import export _ graphviz from sklearn . 
tree import D e c i s i o n 
T r e e C l a s s i 
f i e r D e c i s i 
o n T r e e R e g r 
e s s o r X _ train X _ 
test y _ train y _ test = load _ 
data clf = D e c i s i o 
n T r e e C l a s s 
i f i e r clf . fit X _ 
train y _ train export _ graphviz clf F / 
/ out 