第一章 机器 学习 的 基础 1.1 编程语言 与 开发 环境 
1 . 1.1 Python 安装 略 1 . 2.2 Python 
安装包 的 安装 可以选 选择 安装 集 成包 anaconda 略 
1 . 1.3 IDE 配置 及 安装 测试 IDE 选择 
UltraEdit 高级 文本 编辑器 配置 步骤 如下 1 选择 高级 
用户 工具 命令 如 . 4 所示 . 5 配置 
UltraEdit 步骤 1 2 在 如 . 5 所示 输入 
各项 参数 然后 单击 应用 按钮 . 5 配置 UltraEdit 
步骤 2 3 按照 如 . 6 所示 进行 设置 
然后 单击 确定 按钮 . 6 配置 UltraEdit 步骤 3 
通过 测试代码 检验 安装 效果 # coding utf 8 # 
Filename mytest1 . py import numpy as np # 导入 
NumPy 库 from numpy import * # 导入 NumPy 库 
import matplotlib . pyplot as plt # 测试 数据集 二维 
list dataSet = 1 2 3 4 5 6 7 
8 9 10 dataMat = mat dataSet . T # 
将 数据集 转换 为 NumPy 矩阵 并转 秩 plt . 
scatter dataMat 0 dataMat 1 c = red marker = 
o # 绘制 数据 散点图 # 绘制 直线 图形 X 
= np . linspace 2 2 100 # 产生 直线 
数据 # 建立 线性方程 Y = 2.8 * X + 
9 plt . plot X Y # 绘制 直 线图 
plt . show # 显示 绘制 效果 . 7 显示 
执行 效果 1.2 对象 矩阵 与 矢量化 编程 1 . 
2.1 对象 与 维度 略 1 . 2.2 初识 矩阵 
略 1 . 2.3 矢量化 编程 与 GPU 运算 略 
1 . 2.4 理解 数学公式 与 NumPy 矩阵 运算 1 
. 矩阵 的 初始化 # coding utf 8 import numpy 
as np # 导入 NumPy 包 #/i 创建/v 3/m */i 
5/m 的/uj 全0/nr 矩阵/n 和全1/nr 的/uj 矩阵/n myZero = np 
. zeros 3 5 # 3 * 5 的 全0/nr 
矩阵 print myZero myZero = np . ones 3 5 
# # 3 * 5 的 全1/nr 矩阵 print myZero 
输出 结果 Connected to pydev debugger build 141.1580 0 . 
0 . 0 . 0 . 0 . 0 . 
0 . 0 . 0 . 0 . 0 . 
0 . 0 . 0 . 0 . 1 . 
1 . 1 . 1 . 1 . 1 . 
1 . 1 . 1 . 1 . 1 . 
1 . 1 . 1 . 1 . # 生成 
随机 矩阵 myRand = np . random . rand 3 
4 # 3行 4列 的 0 ~ 1 之间 的 
随机数 矩阵 print myRand 输出 结果 如下 0.14689327 0.15077077 0.88018968 
0.75112348 0.30944489 0.77563281 0.82905038 0.25430367 0.53958541 0.89695376 0.90681161 0.25453046 # 
单位阵 myEye = np . eye 3 # 3 * 
3 的 矩阵 print myEye 输出 结果 如下 1 . 
0 . 0 . 0 . 1 . 0 . 
0 . 0 . 1 . 2 . 矩阵 的 
元素 运算 矩阵 的 元素 运 算是 指 矩阵 在 
元素 级别 的 加减乘除 运算 # 元素 的 加 和减/nr 
条件 是 矩阵 的 行数 和 列数 必须 相同 from 
numpy import * # 导入 NumPy 包 myOnes = ones 
3 3 # 3 * 3 的 全1/nr 矩阵 myEye 
= eye 3 print myOnes + myEye print myOnes myEye 
输出 结果 如下 2 . 1 . 1 . 1 
. 2 . 1 . 1 . 1 . 2 
. 0 . 1 . 1 . 1 . 0 
. 1 . 1 . 1 . 0 . # 
矩阵 乘法 mymatrix = mat 1 2 3 4 5 
6 7 8 9 a = 10 print a * 
mymatrix 输出 结果 10 20 30 40 50 60 70 
80 90 # 矩阵 所有 元素 求和 mymatrix = mat 
1 2 3 4 5 6 7 8 9 print 
mymatrix . sum 输出 结果 45 矩阵 各 元素 的 
积 矩阵 的 点乘 同 维 对应 元素 的 相乘 
当 矩阵 的 维度 不 同时 会 根据 一定 的 
广播 将 维数 扩 充到 一致 的 形式 mymatrix1 = 
mat 1 2 3 4 5 6 7 8 9 
mymatrix2 = 1.5 * ones 3 3 print multiply mymatrix1 
mymatrix2 输出 结果 1.5 3 . 4.5 6 . 7.5 
9 . 10.5 12 . 13.5 # 矩阵 各 元素 
的 n 次幂 n = 2 mymatrix1 = mat 1 
2 3 4 5 6 7 8 9 print power 
mymatrix1 2 输出 结果 1 4 9 16 25 36 
49 64 81 # 矩阵 乘以 矩阵 mymatrix1 = mat 
1 2 3 4 5 6 7 8 9 mymatrix2 
= mat 1 2 3 print mymatrix1 * mymatrix2 输出 
结果 14 32 50 # 矩阵 的 转置 mymatrix1 = 
mat 1 2 3 4 5 6 7 8 9 
print mymatrix1 . T # 矩阵 的 转置 mymatrix1 . 
transpose # 矩阵 的 转置 print mymatrix1 输出 结果 如下 
1 4 7 2 5 8 3 6 9 1 
2 3 4 5 6 7 8 9 mymatrix = 
mymatrix1 0 # 按 行 切片 print u 按 行 
切片 mymatrix mymatrix = mymatrix1 . T 0 # 按 
列 切片 print u 按 列 切片 mymatrix mymatrix = 
mymatrix1 . copy # 矩阵 的 复制 print u 复制 
矩阵 mymatrix # 比较 print u 矩阵 元素 的 比较 
\ n mymatrix mymatrix1 . T 输出 结果 矩阵 的 
行数 和 列数 3 3 按 行 切片 1 2 
3 按 列 切片 1 4 7 复制 矩阵 1 
2 3 4 5 6 7 8 9 矩阵 元素 
的 比较 False True True False False True False False 
False 1 . 2.5 Linalg 线性代数 库 在 矩阵 的 
基本 运算 基础 之上 NumPy 的 Linalg 库 可以 满足 
大多数 的 线性 代数运算 . 矩阵 的 行列式 . 矩阵 
的 逆 . 矩阵 的 对称 . 矩阵 的 秩 
. 可逆矩阵 求解 线性方程 1 . 矩阵 的 行列式 In 
4 from numpy import * In 5 # n 阶 
矩阵 的 行列式 运算 In 6 A = mat 1 
2 3 4 5 6 7 8 9 In 7 
print det A linalg . det A det A 6.66133814775 
e 162 . 矩阵 的 逆 In 8 from numpy 
import * In 9 A = mat 1 2 3 
4 5 6 7 8 9 In 10 invA = 
linalg . inv A # 矩阵 的 逆 In 11 
print inv A invA inv A 4.50359963 e + 15 
9.00719925 e + 15 4.50359963 e + 15 9.00719925 e 
+ 15 1.80143985 e + 16 9.00719925 e + 15 
4.50359963 e + 15 9.00719925 e + 15 4.50359963 e 
+ 15 3 . 矩阵 的 对称 In 12 from 
numpy import * In 13 A = mat 1 2 
3 4 5 6 7 8 9 In 14 AT 
= A . T In 15 print A * AT 
14 32 50 32 77 122 50 122 194 4 
. 矩阵 的 秩 In 16 from numpy import * 
In 17 A = mat 1 2 3 4 5 
6 7 8 9 In 18 print linalg . matrix 
_ rank A # 矩阵 的 秩 25 . 可逆矩阵 
求解 1.3 机器 学习 的 数学 基础 1 . 3.1 
相似 度 的 度量 范数 来自 百度 百科 向量 的 
范数 可以 简单 形象 的 理解 为 长度 或者 向 
量到 坐标系 原点 的 距离 或者 相应 空间 内 两点 
之间 的 距离 向量 的 范数 定义 向量 的 范数 
是 一个 函数 | | x | | 满足 非 
负性 | | x | | ≥ 0 齐 次性 
| | cx | | = | c | | 
| x | | 三角 不等式 | | x + 
y | | ≤ | | x | | + 
| | y | | L1 范数 | | x 
| | 为 x 向量 各个 元素 绝对值 之和 L2 
范数 | | x | | 为 x 向量 各个 
元素 的 平方和 的 开方 L2 范数 又称 Euclidean 范数 
或者 Frobenius 范数 Lp 范数 | | x | | 
为 x 向量 各个 元素 绝对值 p 次方 和的1/nr / 
p 次方 L ∞ 范数 | | x | | 
为 x 向量 各个 元素 绝对值 最大 的 元素 如下 
向量范数 的 运算 如下 In 27 A = 8 1 
6 In 28 # 手工 计算 In 29 modA = 
sqrt sum power A 2 In 30 # 库函数 In 
31 normA = linalg . norm A In 32 print 
modA modA norm A normA modA 10.0498756211 norm A 10.04987562111 
. 3.2 各类 距离 的 意义 与 Python 代码 的 
实现 本 小节 所列 的 距离 公式 列表 和 代码 
如下 • 闵可夫 斯基 距离 Minkowski Distance • 欧式 距离 
Euclidean Distance • 曼哈顿 距离 Manhattan Distance • 切比雪夫 距离 
Chebyshev Distance • 夹角 余弦 Cosine • 汉明 距离 Hamming 
Distance • 杰 卡德 相似系数 Jaccard Similiarity Coeffcient 1 . 
闵可夫 斯基 距离 Minkowski Distance 严格 意义 上 讲 闵可夫 
斯基 距离 不是 一种 距离 而是 一组 距离 的 定义 
两个 n 维 变量 A x11 x12 . . . 
x1n 与 B x21 x22 . . . x2n 间 
的 闵可夫 斯基 距离 定义 为 其中 p 是 一个 
变 参数 • 当 p = 1时 就是 曼哈顿 距离 
• 当 p = 2时 就是 欧式 距离 • 当 
p = ∞ 时 就是 切比雪夫 距离 根据 变 参数 
的 不同 闵 可供 夫斯基 可以 表示 一类 的 距离 
2 . 欧式 距离 Euclidean Distance 欧氏距离 L2 范数 是 
最 易于 理解 的 一种 距离 计算方法 源自 欧式空间 中 
两点 间 的 距离 公式 如图所示 1 二维 平面 上 
两点 a x1 y1 与 b x2 y2 间 的 
欧式 距离 2 三维空间 两点 A x1 y1 z1 与 
B x2 y2 z2 3 两个 n 维 向量 A 
x11 x12 . . . x1n 与 B x21 x22 
. . . x2n 间 的 欧氏距离 4 Python 实现 
欧式 距离 In 33 from numpy import * In 34 
vector1 = mat 1 2 3 In 35 vector2 = 
mat 4 5 6 In 36 print sqrt vector1 vector2 
* vector1 vector2 . T 5.19615242 3 . 曼哈顿 距离 
Manhattan Distance 1 二维 平面 两点 A x1 y1 与 
B x2 y2 间 的 曼哈顿 距离 2 两个 n 
维 向量 A x11 x12 . . . x1n 与 
B x21 x22 . . . x2n 间 的 曼哈顿 
距离 3 Python 实现 曼哈顿 In 1 from numpy import 
* In 2 vector1 = mat 1 2 3 In 
3 vector2 = mat 4 5 6 In 4 print 
sum abs vector1 vector2 94 切比雪夫 距离 Chebyshev Distance 1 
二维 平面 两点 A x1 y1 与 B x2 y2 
间 的 切比雪夫 距离 2 两个 n 维 平面 两点 
A x11 y12 . . x1n 与 B x21 y22 
. . x2n 间 的 切比雪夫 距离 这个 公式 的 
另外 一种 等价 形式 是 3 Python 实现 切比雪夫 距离 
In 1 from numpy import * In 2 vector1 = 
mat 1 2 3 In 3 vector2 = mat 4 
7 5 In 4 print abs vector1 vector2 . max 
55 . 夹角 余弦 Consine 几何 中的 夹角 余弦 可 
用来 衡量 两个 向量 方向 的 差异 1 二维 平面 
两点 A x1 y1 与 B x2 y2 间 的 
夹角 余弦公式 2 两个 n 维 样本点 A x11 x12 
x13 . . . x1n 与 B x21 x22 . 
. . x2n 的 夹角 余弦 即 夹角 余弦 取值 
范围 为 1 1 夹角 余弦 越大 表示 向量 的 
夹角 越小 夹角 余弦 越小 表示 两个 向量 的 夹角 
越大 当 两个 向量 的 方向 重 合时 夹角 余弦 
取 最大值 1 当 两个 向量 的 方向 完全 相反 
时 夹角 余弦 取值 最小值 1 . 3 Python 实现 
夹角 余弦 In 7 from numpy import * In 8 
vector1 = mat 1 2 3 In 9 vector2 = 
mat 4 7 5 In 10 cosV12 = dot vector1 
vector2 . T / linalg . norm vector1 * linalg 
. norm vector2 In 11 print cosV12 0.92966968 6 . 
汉明 距离 Hamming Distance 1 汉明 距离 的 定义 两个 
等长 的 字符串 s1 和 s2 之间 的 汉明 距离 
定义 为 将 其中 一个 变为 另外 一个 所 需要 
的 最小 替换 次数 例如 字符串 111 与 1001 之间 
的 汉明 距离 为 2 . 应用 信息 编码 为了 
增强 容错性 应使/nr 编码 间 的 最小 汉明 距离 尽可能 
大 2 使用 Python 实现 汉明 距离 In 20 from 
numpy import * In 21 matV = mat 1 1 
0 1 0 1 0 0 1 0 1 1 
0 0 0 1 1 1 In 22 smstr = 
nonzero matV 0 matV 1 In 23 smstr Out 23 
array 0 0 0 0 0 0 dtype = int64 
array 0 2 3 5 6 7 dtype = int64 
In 24 print shape smstr 0 6L 7 . 杰 
卡德 相似系数 Jaccard Similarity Coefficient 1 杰 卡德 相似系数 两个 
集合 A 和B的/nr 交集 元素 在 A B 的 并 
集中 所占 的 比例 成为 两个 集合 的 杰 卡德 
相似系数 用 符号 J A B 表示 杰 卡德 相似系数 
是 衡量 两个 集合 的 相似 度 的 一种 指标 
2 杰 卡德 距离 与 杰 卡德 相似系数 相反 的 
概念 是 杰 卡德 距离 Jaccard Distance 杰 卡德 距离 
可用 如下 的 公式 表示 杰 卡德 距离 用 两个 
集合 中 不同 元素 占 所有 元素 的 比例 来 
衡量 两个 集合 的 区分度 3 杰 卡德 相似系数 与 
杰 卡德 距离 的 应用 可将 杰 卡德 相似系数 用在 
衡量 样本 的 相似 度上 样本 A 与 样本 B 
是 两个 n 维 向量 而且 所有 维 度上 的 
取值 都是 0 或者 1 . 例如 A 0111 和B/nr 
1011 我们 将 样本 看成 一个 集合 1 表示 该 
集合 包含 该 元素 0 表示 集合 不 包含 该 
元素 P 样本 A 与 B 都是 1 的 维度 
的 个数 q 样本 A 是 1 样本 B 是 
0 的 维度 的 个数 r   样本 A 是 
0 样本 B 是 1 的 维度 的 个数 s 
样本 A 与 B 都是 0 的 维度 的 个数 
那么 样本 A 与 B 的 杰 卡德 相似系数 可以 
表示 为 这里 p + q + r 可以 理解 
为 A 与 B 的 并 集 的 元素 个数 
而 p 是 A 与 B 的 交集 的 元素 
个数 4 Python 实现 杰 卡德 距离 In 25 from 
numpy import * In 26 import scipy . spatial . 
distance as dist # 导入 Scipy 距离 公式 In 27 
matV = mat 1 1 0 1 0 1 0 
0 1 0 1 1 0 0 0 1 1 
1 In 28 print dist . jaccard dist . pdist 
matV jaccard dist . jaccard 0.75 1 . 3.3 理解 
随机性 略 1 . 3.4 回顾 概率论 略 1 . 
3.5 多元 统计 基础 略 1 . 3.6 特征 相关性 
1 . 相关系数 1 相关系数 定义 2 相关 距离 定义 
3 Python 实现 相关 系数 In 13 from numpy import 
* In 14 matV = mat 1 1 0 1 
0 1 0 0 1 0 1 1 0 0 
0 1 1 1 . . . In 15 mv1 
= mean matV 0 # 第一列 的 均值 In 16 
mv2 = mean matV 1 # 第二列 的 均值 In 
17 # 计算 两列 的 标准差 In 18 dv1 = 
std matV 0 In 19 dv2 = std matV 1 
In 20 corref = mean multiply matV 0 mv1 matV 
1 mv2 / dv1 * dv2 In 21 print corref2 
马氏 距离 1 马氏 距离 的 定义 有M个/nr 样本 向量 
X1 ~ Xm 协方差 矩阵 记为 均值 记为 向量 μ 
则 其中 样本 向量 X 到 μ 的 距离 为 
而 其中 xi 与 Xj 之间 的 马氏 距离 为 
若 协方差 矩阵 是 单位矩阵 各个 样本 向量 之间 独立 
同 分布 则 公式 变成 欧式 距离 公式 若 协方差 
是 对角 矩阵 则 公式 变成 可 标准化 的 欧式 
距离 公式 2 马氏 距离 的 优点 量纲 无关 排除 
变量 之间 的 相关性 的 干扰 3 马氏 距离 的 
Python 计算 In 49 from numpy import * In 50 
matV = mat 1 1 0 1 0 1 0 
0 1 0 1 1 0 0 0 1 1 
1 In 51 covinv = linalg . inv cov matV 
In 52 tp = matV . T 0 matV . 
T 1 In 53 distma = sqrt dot dot tp 
coninv tp . T In 54 distma = sqrt dot 
dot tp covinv tp . T In 55 distma Out 
55 matrix 2.02547873 1 . 3.7 再谈 矩阵 空间 的 
变换 略 5/m ./i 特征值/n 和/c 特征向量/n python/w 求取/v 矩阵/n 
的/uj 特征值/n 和/c 特征向量/n In 56 A = 8 1 
6 3 5 7 4 9 2 In 57 evals 
evecs = linalg . eig A In 58 print 特征值 
evals \ n 特征向量 evecs 特征值 15 . 4.89897949 4.89897949 
特征向量 0.57735027 0.81305253 0.34164801 0.57735027 0.47140452 0.47140452 0.57735027 0.34164801 0.81305253 
1 . 3.8   数据 的 归一化 2 . 欧式 
距离 标准化 X * = X M / 标准化 的 
后的值/nr = 标准化 前 的 值 分量 的 均值 / 
分量 的 标准 差 两个 n 维 向量 的 之间 
的 标准化 的 欧式 距离 公式 标准化 欧式 距离 Python 
的 实现 In 2 from numpy import * In 3 
vectormat = mat 1 2 3 4 5 6 In 
4 v12 = vectormat 0 vectormat 1 In 5 print 
sqrt v12 * v12 . T 5.19615242 In 6 # 
norm In 7 varmat = std vectormat . T axis 
= 0 In 16 normvmat = vectormat mean vectormat / 
varmat . T In 17 normv12 = normvmat 0 normvmat 
1 In 18 sqrt normv12 * normv12 . T Out 
18 matrix 8.5732141 1.4 数据 处理 和 可视化 1 . 
4.1 数据 的 导入 和 内存管理 1 . 数据表 文件 
的 读取 Python 读取 数据表 例程 # coding utf 8 
import sys import os from numpy import * # 配置 
UTF 8 的 输出 环境 reload sys sys . s 
e t d e f a u l t e 
n c o d i n g utf 8 # 
数据文件 转 矩阵 # path 数据文件 路径 # delimiter 行内 
字段 分隔符 def file2matrix path delimiter recordlist = fp = 
open path rb # 读取 文件 内容 content = fp 
. read fp . close rowlist = content . splitlines 
# 按 行 转化 为 一维 表 # 逐行 遍历 
结果 按 分割 符 分割为 行向量 recordlist = map eval 
row . split delimiter for row in rowlist if row 
. strip return mat recordlist # 返回 转换 后的/nr 矩阵 
形式 root = testdata # 数据文件 所在 路径 pathlist = 
os . listdir root for path in pathlist recordmat = 
file2matrix root + / + path # 文件 到 矩阵 
的 转换 print shape recordmat 2 . 对象 的 持久化 
有时候 我们 希望 数据 以 对象 的 方式 保存 Pytho 
提供 了 cPickle 模块 支持 对象 的 读写 # 继续 
上面 的 代码 import cPickle as pickle # 导入 序列化 
库 file _ obj = open root + / recordmat 
. dat wb pickle . dump recordmat 0 file _ 
obj # 强 生成 的 矩阵 对象 保存 到 指定 
的 位置 file _ obj . close # c 此段 
代码 可将 刚才 转换 为 矩阵 的 数据 持久化 为 
对象 的 文件 # 读取 序列化 后的/nr 文件 read _ 
obj = open root + / recordmat . dat rb 
readmat = pickle . load read _ obj # 从 
指定 的 位置 读取 对象 print shape readmat 3 . 
高效 的 读取 大 文本 的 文件 # 按 行 
读取 文件 读取 指定 的 行数 nmax = 0 按 
行 读取 全部 def readfilelines path nmax = 0 fp 
= open path rb ncount = 0 # 读取 行 
while True content = fp . readline if content = 
= or ncount = nmax and nmax = 0 # 
判断 文件尾 或 读完 指定 行数 break yield content # 
返回 读取 的 行 if nmax = 0 ncount + 
= 1 fp . close root = testdata / 01 
. txt # 数据文件 所在 路径 for line in readfilelines 
path nmax = 10 # 读取 10行 print line . 
strip 1 . 4.2 表 与 线性 结构 的 可视化 
示例代码 In 1 import numpy as np In 2 import 
matplotlib . pyplot as plt In 3 # 曲线 数据 
加入 噪声 In 4 x = np . linspace 5 
5 200 In 5 y = np . sin x 
# 给出 y 与 x 的 基本 关系 In 6 
yn = y + np . random . rand 1 
len y * 1.5 # 加入 噪声 的 点 集 
In 7 # 绘图 In 8 fig = plt . 
figure In 9 ax = fig . add _ subplot 
1 1 1 In 10 ax . scatter x yn 
c = blue marker = o Out 10 matplotlib . 
collections . PathCollection at 0x6b7f780 In 11 ax . plot 
x y + 0.75 r Out 11 matplotlib . lines 
. Line2D at 0x6d510f0 In 12 plt . show 1 
. 4.3 树 与 分类 结构 的 可视化 略 1 
. 4.4 图 与 网格 结构 的 可视化 略 资料 
来源 及 版权 所有 机器学习 算法 原理 与 编程 实践 
郑捷 