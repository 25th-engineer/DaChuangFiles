1 . scikit learn 介绍 scikit learn 是 Python 的 
一个 开源 机器学习 模块 它 建立 在 NumPy SciPy 和 
matplotlib 模块 之上 值得一提的是 scikit learn 最先 是由 David Cournapeau 
在 2007年 发起 的 一个 Google Summer of Code 项目 
从 那时 起 这个 项目 就 已经 拥有 很多 的 
贡献者 了 而且 该 项目 目前 为止 也 是由 一个 
志愿者 团队 在 维护 着 scikit learn 最大 的 特点 
就是 为 用户 提供 各种 机器学习 算法 接口 可以 让 
用户 简单 高效 地 进行 数据 挖掘 和 数据 分析 
scikit learn 主页 scikit learn homepage2 . scikit learn 安装 
scikit learn 的 安装 方法 有 很多 种 而且 也 
是 适用 于 各种 主流 操作系统 scikit learn 主页 上 
也 分别 详细 地 介绍 了 在 不同 操作系统 下 
的 三种 安装 方法 具体 安装 详情请 移步 至 installing 
scikit learn 在 这里 首先 向 大家 推荐 一款 学习 
Python 的 强大 的 开发 环境 python x y python 
x y 是 一个 基于 python 的 科学计算 软件包 它 
包含 集成 开发 环境 Eclipse 和 Python 开发 插件 pydev 
数据 交互式 编辑 和 可视化 工具 spyder 而且还 内嵌 了 
Python 的 基础 数据库 numpy 和 高级 数学 库 scipy 
3D 可视化 工具集 MayaVi Python 界面 开发 库 PyQt Python 
与 C / C + + 混合 编译器 SWIG 除此之外 
python x y 配备 了 丰富 齐全 的 帮助 文档 
非常 方便 科研 人员 使用 对于 像 楼主 这样 在 
学校 习惯了 用 Matlab 仿真 搞 科研 的 学生 而言 
python x y 是 学习 Python 的 一个 绝佳 选择 
其中 内嵌 的 spyder 提供 了 类似于 Matlab 的 交互 
界面 可以 很 方便 地 使用 python x y 的 
下载 请 点击 这里 python x y 下载 由于 scikit 
learn 是 基于 NumPy SciPy 和 matplotlib 模块 的 所以 
在 安装 scikit learn 之前 必须 要 安装 这 3个 
模块 这就 很麻烦 但是 如果 你 提前 像 楼主 这样 
安装 了 python x y 它 本身 已经 包含 上述 
的 模块 你 只需 下载 与 你 匹配 的 scikit 
learn 版本 直接 点击 安装 即可 scikit learn 各种 版本 
下载 scikit learn 下载 3 . scikit learn 载入 数据集 
scikit learn 内 包含 了 常用 的 机器学习 数据集 比如 
做 分类 的 iris 和 digit 数据集 用于 回归 的 
经典 数据集 Boston house prices scikit learn 载入 数据集 实例 
from sklearn import datasets iris = datasets . load _ 
iris scikit learn 载入 的 数据集 是以 类似于 字典 的 
形式 存放 的 该 对象 中 包含 了 所有 有关 
该 数据 的 数据 信息 甚至 还 有 参考 文献 
其中 的 数据 值 统一 存放 在 . data 的 
成员 中 比如 我们 要 将 iris 数据 显示 出来 
只需 显示 iris 的 data 成员 print iris . data 
数据 都 是以 n 维 n 个 特征 矩阵 形式 
存放 和 展现 iris 数据 中 每个 实例 有4维/nr 特征 
分别为 sepal length sepal width petal length 和 petal width 
显示 iris 数据 5.1 3.5 1.4 0.2 4.9 3 . 
1.4 0.2 . . . . . . 5.9 3 
. 5.1 1.8 如果 是 对于 监督 学习 比如 分类 
问题 数据 中 会 包含 对应 的 分类 结果 其 
存在 . target 成员 中 print iris . target 对于 
iris 数据 而言 就是 各个 实例 的 分类 结果 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 
1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 2 
2 2 2 2 2 2 2 2 2 2 
2 2 2 2 2 2 2 2 2 2 
2 2 2 2 2 2 2 2 2 2 
2 2 2 2 2 2 2 2 2 2 
2 2 2 2 2 2 2 2 2 4 
. scikit learn 学习 和 预测 scikit learn 提供 了 
各种 机器学习 算法 的 接口 允许 用户 可以 很 方便 
地 使用 每个 算法 的 调用 就像 一个 黑箱 对于 
用户 来说 我们 只 需要 根据 自己 的 需求 设置 
相应 的 参数 比如 调用 最 常用 的 支撑 向量 
分类机 SVC from sklearn import svm clf = svm . 
SVC gamma = 0.001 C = 100 . # 不 
希望 使用 默认 参数 使用 用户 自己 给定 的 参数 
print clf 分类器 的 具体 信息 和 参数 SVC C 
= 100.0 cache _ size = 200 class _ weight 
= None coef0 = 0.0 degree = 3 gamma = 
0.001 kernel = rbf max _ iter = 1 probability 
= False random _ state = None shrinking = True 
tol = 0.001 verbose = False 分类器 的 学习 和 
预测 可以 分别 利用 fit X Y 和 predict T 
来 实现 例如 将 digit 数据 划分 为 训练 集 
和 测试 集 前 n 1个 实例 为 训练 集 
最后 一个 为 测试 集 这里 只是 举例说明 fit 和 
predict 函数 的 使用 然后/c 利用/n fit/w 和/c predict/w 分别/d 
完成/v 学习/v 和/c 预测/vn 代码 如下 from sklearn import datasets 
from sklearn import svm clf = svm . SVC gamma 
= 0.001 C = 100 . digits = datasets . 
load _ digits clf . fit digits . data 1 
digits . target 1 result = clf . predict digits 
. data 1 print result 预测 结果 为 8 我们 
可以 通过 程序 来 查看 测试 集中 的 手写体 实例 
到底 长 什么样 来 简单 验证 一下 分类 效果 代码 
和 结果 如下 所示 import matplotlib . pyplot as plot 
plot . figure 1 figsize = 3 3 plot . 
imshow digits . images 1 cmap = plot . cm 
. gray _ r interpolation = nearest plot . show 
最后 一个 手写体 实例 为 我们 可以 看到 这 就是 
一个 手写 的 数字 8 的 实际上 正确 的 分类 
也是 8 我们 通过 这个 简单 的 例子 就是 为了 
简单 的 学习 如何 来 使用 scikit learn 来 解决 
分类 问题 实际上 这个 问题 要 复杂 得多 PS 学习 
就 是 循序渐进 弄懂 一个 例子 就会 弄懂 第二个 . 
. . 然后 就是 第 n 个 最后 就 会 
形成 自己 的 知识 和 理论 你 就 可以 轻松 
掌握 来 解决 各种 遇到 的 复杂 问题 再为 各位 
展示 一个 scikit learn 解决 digit 分类 手写体 识别 的 
程序 by   Gael Varoquaux 相信 看过 这个 程序 大家 
一定 会对 scikit learn 机器学习 库 有了 一定 的 了解 
和 认识 import matplotlib . pyplot as plt # Import 
datasets classifiers and performance metrics from sklearn import datasets svm 
metrics # The digits dataset digits = datasets . load 
_ digits # The data that we are interested in 
is made of 8x8 images of digits let s # 
have a look at the first 3 images stored in 
the ` images ` attribute of the # dataset . 
If we were working from image files we could load 
them using # pylab . imread . Note that each 
image must have the same size . For these # 
images we know which digit they represent it is given 
in the target of # the dataset . images _ 
and _ labels = list zip digits . images digits 
. target for index image label in enumerate images _ 
and _ labels 4 plt . subplot 2 4 index 
+ 1 plt . axis off plt . imshow image 
cmap = plt . cm . gray _ r interpolation 
= nearest plt . title Training % i % label 
# To apply a classifier on this data we need 
to flatten the image to # turn the data in 
a samples feature matrix n _ samples = len digits 
. images data = digits . images . reshape n 
_ samples 1 # Create a classifier a support vector 
classifier classifier = svm . SVC gamma = 0.001 # 
We learn the digits on the first half of the 
digits classifier . fit data n _ samples / 2 
digits . target n _ samples / 2 # Now 
predict the value of the digit on the second half 
expected = digits . target n _ samples / 2 
predicted = classifier . predict data n _ samples / 
2 print Classification report for classifier % s \ n 
% s \ n % classifier metrics . classification _ 
report expected predicted print Confusion matrix \ n % s 
% metrics . confusion _ matrix expected predicted images _ 
and _ predictions = list zip digits . images n 
_ samples / 2 predicted for index image prediction in 
enumerate images _ and _ predictions 4 plt . subplot 
2 4 index + 5 plt . axis off plt 
. imshow image cmap = plt . cm . gray 
_ r interpolation = nearest plt . title Prediction % 
i % prediction plt . show 输出 结果 Classification report 
for classifier SVC C = 1.0 cache _ size = 
200 class _ weight = None coef0 = 0.0 degree 
= 3 gamma = 0.001 kernel = rbf max _ 
iter = 1 probability = False random _ state = 
None shrinking = True tol = 0.001 verbose = False 
precision recall f1 score support 0 1.00 0.99 0.99 88 
1 0.99 0.97 0.98 91 2 0.99 0.99 0.99 86 
3 0.98 0.87 0.92 91 4 0.99 0.96 0.97 92 
5 0.95 0.97 0.96 91 6 0.99 0.99 0.99 91 
7 0.96 0.99 0.97 89 8 0.94 1.00 0.97 88 
9 0.93 0.98 0.95 92 avg / total 0.97 0.97 
0.97 899 Confusion matrix 87 0 0 0 1 0 
0 0 0 0 0 88 1 0 0 0 
0 0 1 1 0 0 85 1 0 0 
0 0 0 0 0 0 0 79 0 3 
0 4 5 0 0 0 0 0 88 0 
0 0 0 4 0 0 0 0 0 88 
1 0 0 2 0 1 0 0 0 0 
90 0 0 0 0 0 0 0 0 1 
0 88 0 0 0 0 0 0 0 0 
0 0 88 0 0 0 0 1 0 1 
0 0 0 90 5 . 总结 1 scikit learn 
的 介绍 和 安装 2 对 scikit learn 有个 概括 
的 了解 能够 尝试 利用 scikit learn 来 进行 数据 
挖掘 和 分析 6 . 参考 内容 1   An 
introduction to machine learning with scikit learn 2 机器学习 实战 
