一 概述 本篇 我们 首先 通过 回归 算法 实现 一个 
葡萄酒 品质 预测 的 程序 然后 通过 AutoML 的 方法 
再 重新 实现 通过 对比 两 种 实现 方式 来 
学习 AutoML 的 应用 首先 数据集 来自于 竞赛 网站 kaggle 
. com 的 UCI Wine Quality Dataset 数据集 访问 地址 
https / / www . kaggle . com / c 
/ uci wine quality dataset / data 该 数据集 输入 
为 一些 葡萄酒 的 化学 检测 数据 比如 酒精度 等 
输出 为 品酒 师的/nr 打分 具体 字段 描述 如下 Data 
fields Input variables based on physicochemical tests 1 fixed acidity 
2 volatile acidity 3 citric acid 4 residual sugar 5 
chlorides 6 free sulfur dioxide 7 total sulfur dioxide 8 
density 9 pH 10 sulphates 11 alcohol Output variable based 
on sensory data 12 quality score between 0 and 10 
Other 13 id unique ID for each sample needed for 
submission 二 代码 namespace Regression _ WineQuality { public class 
WineData { LoadColumn 0 public float FixedAcidity LoadColumn 1 public 
float VolatileAcidity LoadColumn 2 public float CitricACID LoadColumn 3 public 
float ResidualSugar LoadColumn 4 public float Chlorides LoadColumn 5 public 
float F r e e u l f u r 
D i o x i d e LoadColumn 6 public 
float T o t a l u l f u 
r D i o x i d e LoadColumn 7 
public float Density LoadColumn 8 public float PH LoadColumn 9 
public float Sulphates LoadColumn 10 public float Alcohol LoadColumn 11 
ColumnName Label public float Quality LoadColumn 12 public float Id 
} public class WinePrediction { ColumnName Score public float P 
r e d i c t i o n Q 
u a l i t y } class Program { 
static readonly string ModelFilePath = Path . Combine Environment . 
CurrentDirectory MLModel model . zip static void Main string args 
{ Train Prediction Console . WriteLine Hit any key to 
finish the app Console . ReadKey } public static void 
Train { MLContext mlContext = new MLContext seed 1 / 
/ 准备 数据 string TrainDataPath = Path . Combine Environment 
. CurrentDirectory Data winequality data full . csv var fulldata 
= mlContext . Data . LoadFromTextFile WineData path TrainDataPath separatorChar 
hasHeader true var trainTestData = mlContext . Data . TrainTestSplit 
fulldata testFraction 0.2 var trainData = trainTestData . TrainSet var 
testData = trainTestData . TestSet / / 创建 学习 管道 
并 通过 训练 数据 调整 模型 var d a t 
a P r o c e s s P i 
p e l i n e = mlContext . Transforms 
. DropColumns Id . Append mlContext . Transforms . N 
o r m a l i z e M e 
a n V a r i a n c e 
nameof WineData . F r e e u l f 
u r D i o x i d e . 
Append mlContext . Transforms . N o r m a 
l i z e M e a n V a 
r i a n c e nameof WineData . T 
o t a l u l f u r D 
i o x i d e . Append mlContext . 
Transforms . Concatenate Features new string { nameof WineData . 
FixedAcidity nameof WineData . VolatileAcidity nameof WineData . CitricACID nameof 
WineData . ResidualSugar nameof WineData . Chlorides nameof WineData . 
F r e e u l f u r D 
i o x i d e nameof WineData . T 
o t a l u l f u r D 
i o x i d e nameof WineData . Density 
nameof WineData . PH nameof WineData . Sulphates nameof WineData 
. Alcohol } var trainer = mlContext . Regression . 
Trainers . L b f g s P o i 
s s o n R e g r e s 
s i o n labelColumnName Label f e a t 
u r e C o l u m n N 
a m e Features var trainingPipeline = d a t 
a P r o c e s s P i 
p e l i n e . Append trainer var 
trainedModel = trainingPipeline . Fit trainData / / 评估 var 
predictions = trainedModel . Transform testData var metrics = mlContext 
. Regression . Evaluate predictions labelColumnName Label scoreColumnName Score P 
r i n t R e g r e s 
s i o n M e t r i c 
s trainer . ToString metrics / / 保存 模型 Console 
. WriteLine = = = = = = Save model 
to local file = = = = = = = 
= = mlContext . Model . Save trainedModel trainData . 
Schema ModelFilePath } static void Prediction { MLContext mlContext = 
new MLContext seed 1 ITransformer loadedModel = mlContext . Model 
. Load ModelFilePath out var modelInputSchema var predictor = mlContext 
. Model . C r e a t e P 
r e d i c t i o n E 
n g i n e WineData WinePrediction loadedModel WineData wineData 
= new WineData { FixedAcidity = 7.6 f VolatileAcidity = 
0.33 f CitricACID = 0.36 f ResidualSugar = 2.1 f 
Chlorides = 0.034 f F r e e u l 
f u r D i o x i d e 
= 26f T o t a l u l f 
u r D i o x i d e = 
172f Density = 0.9944 f PH = 3.42 f Sulphates 
= 0.48 f Alcohol = 10.5 f } var wineQuality 
= predictor . Predict wineData Console . WriteLine $ Wine 
Data Quality is { wineQuality . P r e d 
i c t i o n Q u a l 
i t y } } } } View Code 关于 
泊松 回归 的 算法 我们/r 在/p 进行/v 人脸/n 颜值/nr 判断/v 
的/uj 那/r 篇文章/n 已经/d 介绍/v 过了/i 这个 程序 没有 涉及 
任何 新 的 知识点 就不 重复 解释 了 主要 目的 
是 和 下面 的 AutoML 代码 对比 用 的 三 
自动 学习 我们 发现 机器 学习 的 大致 流程 基本 
都 差不多 如 准备 数据 明确 特征 选择 算法 训练 
等 有时 我们 存在 这样 一个 问题 该 选择 什么 
算法 算法 的 参数 该 如何 配置 等等 而 自动 
学习 就 解决 了 这个 问题 框架 会 多次 重复 
数据 选择 算法 选择 参数 调 优 评估 结果 这 
一 过程 通过 这个 过程 找出 评估 效果 最好 的 
模型 全部 代码 如下 namespace Regression _ WineQuality { public 
class WineData { LoadColumn 0 public float FixedAcidity LoadColumn 1 
public float VolatileAcidity LoadColumn 2 public float CitricACID LoadColumn 3 
public float ResidualSugar LoadColumn 4 public float Chlorides LoadColumn 5 
public float F r e e u l f u 
r D i o x i d e LoadColumn 6 
public float T o t a l u l f 
u r D i o x i d e LoadColumn 
7 public float Density LoadColumn 8 public float PH LoadColumn 
9 public float Sulphates LoadColumn 10 public float Alcohol LoadColumn 
11 ColumnName Label public float Quality LoadColumn 12 public float 
ID } public class WinePrediction { ColumnName Score public float 
P r e d i c t i o n 
Q u a l i t y } class Program 
{ static readonly string ModelFilePath = Path . Combine Environment 
. CurrentDirectory MLModel model . zip static readonly string TrainDataPath 
= Path . Combine Environment . CurrentDirectory Data winequality data 
train . csv static readonly string TestDataPath = Path . 
Combine Environment . CurrentDirectory Data winequality data test . csv 
static void Main string args { TrainAndSave L o a 
d A n d P r e d i c 
t i o n Console . WriteLine Hit any key 
to finish the app Console . ReadKey } public static 
void TrainAndSave { MLContext mlContext = new MLContext seed 1 
/ / 准备 数据 var trainData = mlContext . Data 
. LoadFromTextFile WineData path TrainDataPath separatorChar hasHeader true var testData 
= mlContext . Data . LoadFromTextFile WineData path TestDataPath separatorChar 
hasHeader true var progressHandler = new R e g r 
e s s i o n E x p e 
r i m e n t P r o g 
r e s s H a n d l e 
r uint ExperimentTime = 200 ExperimentResult R e g r 
e s s i o n M e t r 
i c s experimentResult = mlContext . Auto . C 
r e a t e R e g r e 
s s i o n E x p e r 
i m e n t ExperimentTime . Execute trainData Label 
progressHandler progressHandler Debugger . PrintTopModels experimentResult RunDetail R e g 
r e s s i o n M e t 
r i c s best = experimentResult . BestRun ITransformer 
trainedModel = best . Model / / 评估 BestRun var 
predictions = trainedModel . Transform testData var metrics = mlContext 
. Regression . Evaluate predictions labelColumnName Label scoreColumnName Score Debugger 
. P r i n t R e g r 
e s s i o n M e t r 
i c s best . TrainerName metrics / / 保存 
模型 Console . WriteLine = = = = = = 
Save model to local file = = = = = 
= = = = mlContext . Model . Save trainedModel 
trainData . Schema ModelFilePath } static void L o a 
d A n d P r e d i c 
t i o n { MLContext mlContext = new MLContext 
seed 1 ITransformer loadedModel = mlContext . Model . Load 
ModelFilePath out var modelInputSchema var predictor = mlContext . Model 
. C r e a t e P r e 
d i c t i o n E n g 
i n e WineData WinePrediction loadedModel WineData wineData = new 
WineData { FixedAcidity = 7.6 f VolatileAcidity = 0.33 f 
CitricACID = 0.36 f ResidualSugar = 2.1 f Chlorides = 
0.034 f F r e e u l f u 
r D i o x i d e = 26f 
T o t a l u l f u r 
D i o x i d e = 172f Density 
= 0.9944 f PH = 3.42 f Sulphates = 0.48 
f Alcohol = 10.5 f } var wineQuality = predictor 
. Predict wineData Console . WriteLine $ Wine Data Quality 
is { wineQuality . P r e d i c 
t i o n Q u a l i t 
y } } } } View Code 四 代码 分析 
1 自动 学习 过程 var progressHandler = new R e 
g r e s s i o n E x 
p e r i m e n t P r 
o g r e s s H a n d 
l e r uint ExperimentTime = 200 ExperimentResult R e 
g r e s s i o n M e 
t r i c s experimentResult = mlContext . Auto 
. C r e a t e R e g 
r e s s i o n E x p 
e r i m e n t ExperimentTime . Execute 
trainData Label progressHandler progressHandler Debugger . PrintTopModels experimentResult / / 
打印 所有 模型 数据 ExperimentTime 是 允许 的 试验 时间 
progressHandler 是 一个 报告 程序 当 每 完成 一种 学习 
系统 就 会调 用 一次 报告 事件 public class R 
e g r e s s i o n E 
x p e r i m e n t P 
r o g r e s s H a n 
d l e r IProgress RunDetail R e g r 
e s s i o n M e t r 
i c s { private int _ iterationIndex public void 
Report RunDetail R e g r e s s i 
o n M e t r i c s iterationResult 
{ _ iterationIndex + + Console . WriteLine $ Report 
index { _ iterationIndex } TrainerName { iterationResult . TrainerName 
} RuntimeInSeconds { iterationResult . RuntimeInSeconds } } } 调试 
结果 如下 Report index 1 TrainerName SdcaRegression RuntimeInSeconds 12.5244426 Report 
index 2 TrainerName L i g h t G b 
m R e g r e s s i o 
n RuntimeInSeconds 11.2034988 Report index 3 TrainerName F a s 
t T r e e R e g r e 
s s i o n RuntimeInSeconds 14.810409 Report index 4 
TrainerName F a s t T r e e T 
w e e d i e R e g r 
e s s i o n RuntimeInSeconds 14.7338553 Report index 
5 TrainerName F a s t F o r e 
s t R e g r e s s i 
o n RuntimeInSeconds 15.6224459 Report index 6 TrainerName L b 
f g s P o i s s o n 
R e g r e s s i o n 
RuntimeInSeconds 11.1668197 Report index 7 TrainerName O n l i 
n e G r a d i e n t 
D e s c e n t R e g 
r e s s i o n RuntimeInSeconds 10.5353 Report 
index 8 TrainerName OlsRegression RuntimeInSeconds 10.8905459 Report index 9 TrainerName 
L i g h t G b m R e 
g r e s s i o n RuntimeInSeconds 10.5703296 
Report index 10 TrainerName F a s t T r 
e e R e g r e s s i 
o n RuntimeInSeconds 19.4470509 Report index 11 TrainerName F a 
s t T r e e T w e e 
d i e R e g r e s s 
i o n RuntimeInSeconds 63.638882 Report index 12 TrainerName L 
i g h t G b m R e g 
r e s s i o n RuntimeInSeconds 10.7710518 学习 
结束 后 我们 通过 Debugger . PrintTopModels 打印 出 所有 
模型 数据 public class Debugger { private const int Width 
= 114 public static void PrintTopModels ExperimentResult R e g 
r e s s i o n M e t 
r i c s experimentResult { var topRuns = experimentResult 
. RunDetails . Where r = r . V a 
l i d a t i o n M e 
t r i c s = null & & double 
. IsNaN r . V a l i d a 
t i o n M e t r i c 
s . RSquared . O r d e r B 
y D e s c e n d i n 
g r = r . V a l i d 
a t i o n M e t r i 
c s . RSquared Console . WriteLine Top models ranked 
by R Squared P r i n t R e 
g r e s s i o n M e 
t r i c s H e a d e 
r for var i = 0 i topRuns . Count 
i + + { var run = topRuns . ElementAt 
i P r i n t I t e r 
a t i o n M e t r i 
c s i + 1 run . TrainerName run . 
V a l i d a t i o n 
M e t r i c s run . RuntimeInSeconds 
} } public static void P r i n t 
R e g r e s s i o n 
M e t r i c s H e a 
d e r { CreateRow $ { 4 } { 
Trainer 35 } { RSquared 8 } { Absolute loss 
13 } { Squared loss 12 } { RMS loss 
8 } { Duration 9 } Width } public static 
void P r i n t I t e r 
a t i o n M e t r i 
c s int iteration string trainerName R e g r 
e s s i o n M e t r 
i c s metrics double runtimeInSeconds { CreateRow $ { 
iteration 4 } { trainerName 35 } { metrics . 
RSquared double . NaN 8 F4 } { metrics . 
M e a n A b s o l u 
t e E r r o r double . NaN 
13 F2 } { metrics . MeanSquaredError double . NaN 
12 F2 } { metrics . R o o t 
M e a n q u a r e d 
E r r o r double . NaN 8 F2 
} { runtimeInSeconds . Value 9 F1 } Width } 
public static void CreateRow string message int width { Console 
. WriteLine | + message . PadRight width 2 + 
| } } 其中 CreateRow 代码 功能 用于 排版 调试 
结果 如下 Top models ranked by R Squared | Trainer 
RSquared Absolute loss Squared loss RMS loss Duration | | 
1 F a s t T r e e T 
w e e d i e R e g r 
e s s i o n 0.4731 0.46 0.41 0.64 
63.6 | | 2 F a s t T r 
e e T w e e d i e R 
e g r e s s i o n 0.4431 
0.49 0.43 0.65 14.7 | | 3 F a s 
t T r e e R e g r e 
s s i o n 0.4386 0.54 0.49 0.70 19.4 
| | 4 L i g h t G b 
m R e g r e s s i o 
n 0.4177 0.52 0.45 0.67 10.8 | | 5 F 
a s t T r e e R e g 
r e s s i o n 0.4102 0.51 0.45 
0.67 14.8 | | 6 L i g h t 
G b m R e g r e s s 
i o n 0.3944 0.52 0.46 0.68 11.2 | | 
7 L i g h t G b m R 
e g r e s s i o n 0.3501 
0.60 0.57 0.75 10.6 | | 8 F a s 
t F o r e s t R e g 
r e s s i o n 0.3381 0.60 0.58 
0.76 15.6 | | 9 OlsRegression 0.2829 0.56 0.53 0.73 
10.9 | | 10 L b f g s P 
o i s s o n R e g r 
e s s i o n 0.2760 0.62 0.63 0.80 
11.2 | | 11 SdcaRegression 0.2746 0.58 0.56 0.75 12.5 
| | 12 O n l i n e G 
r a d i e n t D e s 
c e n t R e g r e s 
s i o n 0.0593 0.69 0.81 0.90 10.5 | 
根据 结果 可以 看到 一些 算法 被 重复 试验 但在 
使用 同一个 算法 时其/nr 配置 参数 并不 一样 如 阙值/nr 
深度 等 2 获取 最优 模型 RunDetail R e g 
r e s s i o n M e t 
r i c s best = experimentResult . BestRun ITransformer 
trainedModel = best . Model 获取 最佳 模型 后 其/r 
评估/vn 和/c 保存/v 的/uj 过程/n 和/c 之前/f 代码/n 一致/d 用 
测试 数据 评估 结果 * * * * * * 
* * * * * * * * * * 
* * * * * * * * * * 
* * * * * * * * * * 
* * * * * * * * * * 
* * * * Metrics for F a s t 
T r e e T w e e d i 
e R e g r e s s i o 
n regression model * * LossFn 0.67 * R2 Score 
0.34 * Absolute loss . 63 * Squared loss . 
67 * RMS loss . 82 * * * * 
* * * * * * * * * * 
* * * * * * * * * * 
* * * * * * * * * * 
* * * * * * * * * * 
* * * * * 看 结果 识别率 约 70% 
左右 这种 结果 是 没有 办法 用于 生产 的 问题 
应该 是 我们 没有 找到 决定 葡萄酒 品质 的 关键 
特征 五 小结 到 这篇文章 为止 ML . NET 学习 
笔记 系列 就 结束 了 学习 过程 中 涉及 的 
原始 代码 主要 来源于 https / / github . com 
/ dotnet / machinelearning samples 该 工程 中 还有 一些 
其他 算法 应用 的 例子 包括 聚 类 矩阵 分解 
异常 检测 其 大体 流程 基本 都 差不多 有了/nr 我们 
这个 系列 的 学习 基础 有兴趣 的 朋友 可以 自己 
研究 一下 六 资源 获取 源码 下载 地址 https / 
/ github . com / seabluescn / Study _ ML 
. NET 回归 工程 名称 Regression _ W i n 
e Q u a l i t y A u 
t o M L 工程 名称 Regression _ WineQuality _ 
AutoML 点击 查看 机器学习 框架 ML . NET 学习 笔记 
系列 文章 目录 