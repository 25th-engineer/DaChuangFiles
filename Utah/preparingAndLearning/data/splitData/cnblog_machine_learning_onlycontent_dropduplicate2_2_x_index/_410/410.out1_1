因为 协同 过滤 内容 比较 多 就 新开 一篇 文章 
啦 ~ ~ 聚 类 和 线性 回归 的 实战 
可以 看 http / / www . cnblogs . com 
/ charlesblc / p / 6159187 . html 协同 过滤 
实战 仍然 参考 http //i //i www/w ./i cnblogs/w ./i 
com/w //i shishanyuan/w //i p/w //i 4747778/m ./i html/w 其中/r 
有/v 一些/m 基础/n 和/c 算法/n 类/q 的/uj 会有 其他 一些 
文章 来 做 参考 1.3   协同 过滤 实例 1 
. 3.1   算法 说明 协同 过滤 Collaborative Filtering 简称 
CF WIKI 上 的 定义 是 简单 来说 是 利用 
某 个 兴趣 相投 拥有 共同 经验 之 群体 的 
喜好 来 推荐 感兴趣 的 资讯 给 使用者 个人 透过 
合作 的 机制 给予 资讯 相当 程度 的 回应 如 
评分 并 记录 下来 以 达到 过滤 的 目的 进而 
帮助 别人 筛选 资讯 回应 不 一定 局限于 特别 感兴趣 
的 特别 不 感兴趣 资讯 的 纪录 也 相当 重要 
协同 过滤 常被 应用于 推荐 系统 这些 技术 旨在 补充 
用户 商品 关联矩阵 中所 缺失 的 部分 MLlib   当前 
支持 基于 模型 的 协同 过滤 其中 用户 和 商品 
通过 一 小组 隐 性因子 进行 表达 并且 这些 因子 
也 用于 预测 缺失 的 元素 MLLib   使用 交替 
最小二乘 法 ALS 来 学习 这些 隐 性因子 ALS 见 
后文 内容 用户 对 物品 或者 信息 的 偏好 根据 
应用 本身 的 不同 可能 包括 用户 对 物品 的 
评分 用户 查看 物品 的 记录 用户 的 购买 记录 
等 其实 这些 用户 的 偏好 信息 可以 分为 两类 
l     显 式 的 用户 反馈 这类 是 
用户 在 网站 上 自然 浏览 或者 使用 网站 以外 
显 式 地 提供 反馈 信息 例如 用户 对 物品 
的 评分 或者 对 物品 的 评论 l     
隐式 的 用户 反馈 这类 是 用户 在 使用 网站 
是 产生 的 数据 隐式 地 反映 了 用户 对 
物品 的 喜好 例如 用户 购买 了 某 物品 用户 
查看 了 某 物品 的 信息 等等 显 式 的 
用户 反馈 能 准确 地 反映 用户 对 物品 的 
真实 喜好 但 需要 用户 付出 额外 的 代价 而 
隐式 的 用户 行为 通过 一些 分析 和 处理 也能 
反映 用户 的 喜好 只是 数据 不是 很 精确 有些 
行为 的 分析 存在 较大 的 噪音 但 只要 选择 
正确 的 行为 特征 隐式 的 用户 反馈 也 能 
得到 很好 的 效果 只是 行为 特征 的 选择 可能 
在 不同 的 应用 中 有 很大 的 不同 例如 
在 电子 商务 的 网站 上 购买 行为 其实 就是 
一个 能 很好 表现 用户 喜好 的 隐式 反馈 推荐 
引擎 根据 不同 的 推荐 机制 可能 用到 数据源 中的 
一部分 然后 根据 这些 数据 分析 出 一定 的 规则 
或者 直接 对 用户 对 其他 物品 的 喜好 进行 
预测 计算 这样 推荐 引擎 可以 在 用户 进入 时给他/nr 
推荐 他 可能 感兴趣 的 物品 MLlib 目前 支持 基于 
协同 过滤 的 模型 在 这个 模型 里 用户 和 
产品 被 一组 可以 用来 预测 缺失 项目 的 潜在 
因子 来 描述 特别 是 我们 实现 交替 最小二乘 ALS 
算法 来 学习 这些 潜在 的 因子 在   MLlib 
  中的 实现 有 如下 参数 l     numBlocks 
是 用于 并行 化 计算 的 分块 个数 设置 为 
1时 为 自动 配置 l     rank 是 模型 
中 隐性 因子 的 个数 l     iterations 是 
迭代 的 次数 l     lambda 是 ALS   
的 正则化 参数 l     implicitPrefs 决定了 是 用 
显性 反馈 ALS   的 版本 还是 用 隐性 反馈 
数据集 的 版本 l     alpha 是 一个 针对 
于 隐性 反馈   ALS   版本 的 参数 这个 
参数 决定了 偏好 行为 强度 的 基准 1 . 3.2 
  实例 介绍 在 本 实例 中将 使用 协同 过滤 
算法 对 GroupLens Research http / / grouplens . org 
/ datasets / movielens / 提供 的 数据 进行 分析 
该 数据 为 一组 从 20 世纪 90 年末 到 
21 世纪初 由 MovieLens 用户 提供 的 电影 评分 数据 
这些 数据 中 包括 电影 评分 电影 元数据 风格 类型 
和 年代 以及 关于 用户 的 人口 统计学 数据 年龄 
邮编 性别 和 职业 等 根据 不同 需求 该 组织 
提供 了 不同 大小 的 样本数据 不同 样本 信息 中 
包含 三 种 数据 评分 用户 信息 和 电影 信息 
对 这些 数据 分析 进行 如下 步骤 1 .   
装载 如下 两种 数据 a 装载 样本 评分 数据 其中 
最后 一 列 时间戳 除 10 的 余数 作为 key 
Rating 为 值 Key 用来 分组 的 如下 校验 组 
b 装载 电影 目录 对照表 电影 ID 电影 标题 2 
. 将 样本 评分表 以 key 值 切 分成 3个 
部分 分别 用于 训练   60% 并 加入 用户 评分 
  校验   20% and   测试   20% 这个 
分法 非常重要 因为 是 多个 参数 进行 实验 的 一定 
需要 校验 数据 来 判断 哪种 参数 是 最优 的 
3 . 训练 不同 参 数下 的 模型 并再 校验 
集中 验证 获取 最佳 参 数下 的 模型 4 . 
用 最佳 模型 预测 测试 集 的 评分 计算 和 
实际 评分 之间 的 均方根 误差 5 . 根据 用户 
评分 的 数据 推荐 前 十部 最 感兴趣 的 电影 
注意 要 剔除 用户 已经 评分 的 电影 1 . 
3.3   测试数据 说明 在 MovieLens 提供 的 电影 评分 
数据 分为 三个 表 评分 用户 信息 和 电影 信息 
在 该 系列 提供 的 附属 数据 提供 大概 6000位 
读者 和 100 万个 评分 数据 具体 位置 为 / 
data / class8 / movielens / data 目 录下 对 
三个 表 数据 说明 可以 参考 该 目 录下 README 
文档 1 . 评分 数据 说明 ratings . data 该 
评分 数据 总共 四个 字段 格式 为 UserID MovieID Rating 
Timestamp 分为 为 用户 编号 电影 编号 评分 评分 时间戳 
其中 各个 字段 说明 如下 l 用户 编号 范围 1 
~ 6040 l 电影 编号 1 ~ 3952 l 电影 
评分 为 五星 评分 范围 0 ~ 5 l 评分 
时间戳 单位 秒 l 每个 用户 至少有 20个 电影 评分 
使用 的 ratings . dat 的 数据 样本 如下 所示 
1 1193 5 978300760 1 661 3 978302109 1 914 
3 978301968 1 3408 4 978300275 1 2355 5 978824291 
1 1197 3 978302268 1 1287 5 978302039 1 2804 
5 9783007192 . 用户 信息 users . dat 用户 信息 
五个 字段 格式 为 UserID Gender Age Occupation Zip code 
分为 为 用户 编号 性别 年龄 职业 邮编 其中 各个 
字段 说明 如下 l 用户 编号 范围 1 ~ 6040 
l 性别 其中 M 为 男性 F 为 女性 l 
不同 的 数字 代表 不同 的 年龄 范围 如 25 
代表 25 ~ 34岁 范围 l 职业信息 在 测试 数据 
中 提供 了 21中 职业 分类 l 地区 邮编 使用 
的 users . dat 的 数据 样本 如下 所示 1 
F 1 10 48067 2 M 56 16 70072 3 
M 25 15 55117 4 M 45 7 02460 5 
M 25 20 55455 6 F 50 9 55117 7 
M 35 1 06810 8 M 25 12 114133 . 
电影 信息 movies . dat 电影 数据 分为 三个 字段 
格式 为 MovieID Title Genres 分为 为 电影 编号 电影 
名 电影 类别 其中 各个 字段 说明 如下 l 电影 
编号 1 ~ 3952 l 由 IMDB 提供 电影名称 其中 
包括 电影 上映 年份 l 电影 分类 这里 使用 实际 
分 类名 非 编号 如 Action Crime 等 使用 的 
movies . dat 的 数据 样本 如下 所示 1 Toy 
Story 1995 Animation | Children s | Comedy 2 Jumanji 
1995 Adventure | Children s | Fantasy 3 Grumpier Old 
Men 1995 Comedy | Romance 4 Waiting to Exhale 1995 
Comedy | Drama 5 Father of the Bride Part II 
1995 Comedy 6 Heat 1995 Action | Crime | Thriller 
7 Sabrina 1995 Comedy | Romance 8 Tom and Huck 
1995 Adventure | Children s 程序代码 如下 要 注意 的 
是 Spark 的 ALS 协同 过滤 是 基于 矩阵 分解 
的 既 不是 user cf 也 不是 item cf 关于 
user cf 和 item cf 可以 看 后面 关于 里面 
的 Some 函数 可以 参考 https / / windor . 
gitbooks . io / beginners guide to scala / content 
/ chp5 the option type . htmlhttp / / www 
. jianshu . com / p / 9 5 8 
9 6 d 0 6 a 9 4 d O 
p t i o n 有两 个子 类别 Some 和 
None 当 程序 回传 Some 的 时候 代表 这个 函 
式 成功地 给了 你 一个 String 而 你 可以 透过 
get 函数 拿到 那个 String 如果 程序 返回 的 是 
None 则 代表 没有 字符串 可以 给 你 在 返回 
None 也 就是 没有 String 给 你 的 时候 如果 
你 还 硬要 调用 get 来 取得 String 的话 Scala 
一样 是 会 抛出 一个 N o u c h 
E l e m e n t E x c 
e p t i o n 异常 给 你 的 
我们 也 可以 选用 另外 一个 方法 getOrElse 这个 方法 
在 这个 Option 是 Some 的 实例 时 返回 对应 
的 值 而在 是 None 的 实例 时 返回 传入 
的 参数 换句话说 传入 getOrElse 的 参数 实际上 是 默认 
返回值 代码 如下 package com . spark . my import 
org . apache . log4j . { Level Logger } 
import org . apache . spark . { SparkConf SparkContext 
} import org . apache . spark . mllib . 
regression . { LabeledPoint L i n e a r 
R e g r e s s i o n 
W i t h G D } import org . 
apache . spark . mllib . linalg . Vectors import 
org . apache . spark . mllib . recommendation . 
{ ALS M a t r i x F a 
c t o r i z a t i o 
n M o d e l Rating } import org 
. apache . spark . rdd . RDD import scala 
. io . Source / * * * Created by 
baidu on 16 / 11/28 . * / object MovieLensALS 
{ def main args Array String { Logger . getLogger 
org . apache . spark . setLevel Level . WARN 
val conf = new SparkConf val sc = new SparkContext 
conf println Begin rating file / / 装载 数据集 val 
text = sc . textFile hdfs / / master . 
Hadoop 8390 / movie _ data / ratings . dat 
val ratings = text . map { line = val 
parts = line . split parts 3 . toLong % 
10 Rating parts 0 . toInt parts 1 . toInt 
parts 2 . toDouble } val numPartitions = 4 val 
training = ratings . filter x = x . _ 
1 6 / / 分组 . values . repartition numPartitions 
. cache val validation = ratings . filter x = 
x . _ 1 = 6 & & x . 
_ 1 8 . values . repartition numPartitions . cache 
val test = ratings . filter x = x . 
_ 1 = 8 . values . repartition numPartitions . 
cache println Finish data loading train num + training . 
count + valid num + validation . count + test 
num + test . count val ranks = List 8 
12 val lambdas = List 0.1 10.0 val numIters = 
List 10 20 var bestModel Option M a t r 
i x F a c t o r i z 
a t i o n M o d e l 
= None var b e s t V a l 
i d a t i o n R m s 
e = Double . MaxValue var bestRank = 0 var 
bestLambda = 1.0 var bestNumIter = 1 println Start train 
models with different parameters for rank ranks lambda lambdas numIter 
numIters { val model = ALS . train training rank 
numIter lambda / / 注意 参数 的 顺序 val rmse 
= computeRmse model validation println RMSE = + rmse + 
for model with rank + rank + lambda + lambda 
+ numIter + numIter if rmse b e s t 
V a l i d a t i o n 
R m s e { bestModel = Some model b 
e s t V a l i d a t 
i o n R m s e = rmse bestRank 
= rank bestLambda = lambda bestNumIter = numIter } } 
/ / 计算 测试 集合 的 结果 val testRmse = 
computeRmse bestModel . get test println The best model was 
trained with rank = + bestRank + and lambda = 
+ bestLambda + and numIter = + bestNumIter + and 
its RMSE is + testRmse / / 跟 直接 平均 
rating 做 对比 val meanRating = training . union validation 
. map _ . rating . mean val baselineRmse = 
math . sqrt test . map x = meanRating x 
. rating * meanRating x . rating . reduce _ 
+ _ / test . count println The best model 
improves the baseline by + % 1.2 f . format 
baselineRmse testRmse / baselineRmse + % . / / 获取 
某 一个 用户 的 推荐 结果 / * val myratings 
= Source . fromFile / home / work / data 
/ installed / spark 2 . 0.1 bin hadoop2 . 
7 / mydata / movie _ data / oneratings . 
dat . getLines . map { line = val parts 
= line . split Rating parts 0 . toInt parts 
1 . toInt parts 2 . toDouble } * / 
/ / 开始 以为 只 能读 普通 文件 后来 发现 
读 hadoop 也 可以 用 collect 就 可以 val myratings 
= sc . textFile hdfs / / master . Hadoop 
8390 / movie _ data / oneratings . dat . 
collect . map { line = val parts = line 
. split Rating parts 0 . toInt parts 1 . 
toInt parts 2 . toDouble } val ratedMovies = myratings 
. toSeq . map _ . product . toSet val 
myid = myratings . toSeq 0 . user val movies 
= sc . textFile hdfs / / master . Hadoop 
8390 / movie _ data / movies . dat . 
map { line = val fields = line . split 
fields 0 . toInt fields 1 } . collect . 
toMap val candid = movies . keys . filter x 
= ratedMovies . contains x . toSeq val cand = 
sc . parallelize candid / / 注意 这 一行 很 
神奇 其实 是 创建 RDD val recommend = bestModel . 
get . predict cand . map x = myid x 
. collect . sortBy _ . rating / / 为了 
从大到/nr 小 排序 . take 10 var i = 1 
println Movies recommeded for user + myid recommend . foreach 
{ r = println % 2d . format i + 
+ movies . get r . product i + = 
1 } sc . stop println All elements done } 
/ / 根据 实际 数据 的 均方根 误差 来 判断 
效果 def computeRmse model M a t r i x 
F a c t o r i z a t 
i o n M o d e l data RDD 
Rating Double = { val predict RDD Rating = model 
. predict data . map x = x . user 
x . product val comparePredict = predict . map x 
= x . user x . product x . rating 
. join data . map x = x . user 
x . product x . rating . values val n 
= predict . count math . sqrt comparePredict . map 
x = x . _ 1 x . _ 2 
* x . _ 1 x . _ 2 . 
reduce _ + _ / n } } 然后 准备 
hadoop 的 数据 $ hadoop fs mkdir / movie _ 
data $ hadoop fs put ratings . dat / movie 
_ data $ hadoop fs put movies . dat / 
movie _ data $ hadoop fs put oneratings . dat 
/ movie _ data $ hadoop fs ls / movie 
_ data Found 3 items rw r r 3 work 
supergroup 171308 2016 12 12 23 35 / movie _ 
data / movies . dat rw r r 3 work 
supergroup 2079 2016 12 12 23 35 / movie _ 
data / oneratings . dat rw r r 3 work 
supergroup 24594131 2016 12 12 23 35 / movie _ 
data / ratings . dat 准备好 jar 文件 后 运行 
命令 . / bin / spark submit class com . 
spark . my . MovieLensALS master spark / / 10.117 
. 146.12 7077 myjars / scala demo . jar 能够 
得出 结果 $ . / bin / spark submit class 
com . spark . my . MovieLensALS master spark / 
/ 10.117 . 146.12 7077 myjars / scala demo . 
jar 16 / 12/12 23 44 11 WARN util . 
NativeCodeLoader Unable to load native hadoop library for your platform 
. . . using builtin java classes where applicable 16 
/ 12/12 23 44 12 INFO util . log Logging 
initialized @ 1690ms 16 / 12/12 23 44 12 INFO 
server . Server jetty 9.2 . z SNAPSHOT 16 / 
12/12 23 44 12 INFO handler . ContextHandler Started o 
. s . j . s . e r v 
l e t C o n t e x t 
H a n d l e r @ 297ea53a { 
/ jobs null AVAILABLE } 16 / 12/12 23 44 
12 INFO handler . ContextHandler Started o . s . 
j . s . e r v l e t 
C o n t e x t H a n 
d l e r @ acb0951 { / jobs / 
json null AVAILABLE } 16 / 12/12 23 44 12 
INFO handler . ContextHandler Started o . s . j 
. s . e r v l e t C 
o n t e x t H a n d 
l e r @ 5bf22f18 { / jobs / job 
null AVAILABLE } 16 / 12/12 23 44 12 INFO 
handler . ContextHandler Started o . s . j . 
s . e r v l e t C o 
n t e x t H a n d l 
e r @ 267f474e { / jobs / job / 
json null AVAILABLE } 16 / 12/12 23 44 12 
INFO handler . ContextHandler Started o . s . j 
. s . e r v l e t C 
o n t e x t H a n d 
l e r @ 7a7471ce { / stages null AVAILABLE 
} 16 / 12/12 23 44 12 INFO handler . 
ContextHandler Started o . s . j . s . 
e r v l e t C o n t 
e x t H a n d l e r 
@ 28276e50 { / stages / json null AVAILABLE } 
16 / 12/12 23 44 12 INFO handler . ContextHandler 
Started o . s . j . s . e 
r v l e t C o n t e 
x t H a n d l e r @ 
62e70ea3 { / stages / stage null AVAILABLE } 16 
/ 12/12 23 44 12 INFO handler . ContextHandler Started 
o . s . j . s . e r 
v l e t C o n t e x 
t H a n d l e r @ 3efe7086 
{ / stages / stage / json null AVAILABLE } 
16 / 12/12 23 44 12 INFO handler . ContextHandler 
Started o . s . j . s . e 
r v l e t C o n t e 
x t H a n d l e r @ 
675d8c96 { / stages / pool null AVAILABLE } 16 
/ 12/12 23 44 12 INFO handler . ContextHandler Started 
o . s . j . s . e r 
v l e t C o n t e x 
t H a n d l e r @ 741b3bc3 
{ / stages / pool / json null AVAILABLE } 
16 / 12/12 23 44 12 INFO handler . ContextHandler 
Started o . s . j . s . e 
r v l e t C o n t e 
x t H a n d l e r @ 
2ed3b1f5 { / storage null AVAILABLE } 16 / 12/12 
23 44 12 INFO handler . ContextHandler Started o . 
s . j . s . e r v l 
e t C o n t e x t H 
a n d l e r @ 63648ee9 { / 
storage / json null AVAILABLE } 16 / 12/12 23 
44 12 INFO handler . ContextHandler Started o . s 
. j . s . e r v l e 
t C o n t e x t H a 
n d l e r @ 68d6972f { / storage 
/ rdd null AVAILABLE } 16 / 12/12 23 44 
12 INFO handler . ContextHandler Started o . s . 
j . s . e r v l e t 
C o n t e x t H a n 
d l e r @ 45be7cd5 { / storage / 
rdd / json null AVAILABLE } 16 / 12/12 23 
44 12 INFO handler . ContextHandler Started o . s 
. j . s . e r v l e 
t C o n t e x t H a 
n d l e r @ 7651218e { / environment 
null AVAILABLE } 16 / 12/12 23 44 12 INFO 
handler . ContextHandler Started o . s . j . 
s . e r v l e t C o 
n t e x t H a n d l 
e r @ 3185fa6b { / environment / json null 
AVAILABLE } 16 / 12/12 23 44 12 INFO handler 
. ContextHandler Started o . s . j . s 
. e r v l e t C o n 
t e x t H a n d l e 
r @ 6d366c9b { / executors null AVAILABLE } 16 
/ 12/12 23 44 12 INFO handler . ContextHandler Started 
o . s . j . s . e r 
v l e t C o n t e x 
t H a n d l e r @ 5b58ed3c 
{ / executors / json null AVAILABLE } 16 / 
12/12 23 44 12 INFO handler . ContextHandler Started o 
. s . j . s . e r v 
l e t C o n t e x t 
H a n d l e r @ 24faea88 { 
/ executors / threadDump null AVAILABLE } 16 / 12/12 
23 44 12 INFO handler . ContextHandler Started o . 
s . j . s . e r v l 
e t C o n t e x t H 
a n d l e r @ 3a320ade { / 
executors / threadDump / json null AVAILABLE } 16 / 
12/12 23 44 12 INFO handler . ContextHandler Started o 
. s . j . s . e r v 
l e t C o n t e x t 
H a n d l e r @ 64beebb7 { 
/ static null AVAILABLE } 16 / 12/12 23 44 
12 INFO handler . ContextHandler Started o . s . 
j . s . e r v l e t 
C o n t e x t H a n 
d l e r @ 7813cb11 { / null AVAILABLE 
} 16 / 12/12 23 44 12 INFO handler . 
ContextHandler Started o . s . j . s . 
e r v l e t C o n t 
e x t H a n d l e r 
@ bcec031 { / api null AVAILABLE } 16 / 
12/12 23 44 12 INFO handler . ContextHandler Started o 
. s . j . s . e r v 
l e t C o n t e x t 
H a n d l e r @ 21005f6c { 
/ stages / stage / kill null AVAILABLE } 16 
/ 12/12 23 44 12 INFO server . ServerConnector Started 
ServerConnector @ 6d0068ad { HTTP / 1.1 } { 0.0 
. 0.0 4040 } 16 / 12/12 23 44 12 
INFO server . Server Started @ 1816ms 16 / 12/12 
23 44 12 INFO handler . ContextHandler Started o . 
s . j . s . e r v l 
e t C o n t e x t H 
a n d l e r @ b273a59 { / 
metrics / json null AVAILABLE } Begin rating file 16 
/ 12/12 23 44 14 INFO mapred . FileInputFormat Total 
input paths to process 1 Finish data loading train num 
602241 valid num 198919 test num 199049 Start train models 
with different parameters RMSE = 0 . 8806912752883373 for model 
with rank 8 lambda 0.1 numIter 10 RMSE = 0 
. 8723240467041277 for model with rank 8 lambda 0.1 numIter 
20 RMSE = 3 . 756322766790857 for model with rank 
8 lambda 10.0 numIter 10 RMSE = 3 . 756322766790857 
for model with rank 8 lambda 10.0 numIter 20 RMSE 
= 0 . 8771920345984275 for model with rank 12 lambda 
0.1 numIter 10 RMSE = 0 . 8708229872082264 for model 
with rank 12 lambda 0.1 numIter 20 RMSE = 3 
. 756322766790857 for model with rank 12 lambda 10.0 numIter 
10 RMSE = 3 . 756322766790857 for model with rank 
12 lambda 10.0 numIter 20 The best model was trained 
with rank = 12 and lambda = 0.1 and numIter 
= 20 and its RMSE is 0 . 8685987185037917 The 
best model improves the baseline by 0.22% . 16 / 
12/12 23 45 17 INFO mapred . FileInputFormat Total input 
paths to process 1 16 / 12/12 23 45 17 
INFO mapred . FileInputFormat Total input paths to process 1 
Movies recommeded for user 1000 1 Some Bewegte Mann Der 
1994 2 Some For All Mankind 1989 3 Some Sanjuro 
1962 4 Some Man of the Century 1999 5 Some 
Bandits 1997 6 Some Chushingura 1962 7 Some Leather Jacket 
Love Story 1997 8 Some Usual Suspects The 1995 9 
Some Wrong Trousers The 1993 10 Some Rear Window 1954 
. . . All elements done 参考资料 1 Spark 官网 
  mlllib 说明     http / / spark . 
apache . org / docs / 1 . 1.0 / 
mllib guide . html 2 机器学习 常见 算法 分类汇总   
http / / www . ctocio . com / hotnews 
/ 15919 . html 可以 继续 看 一下 ALS 的 
介绍 https / / www . zhihu . com / 
question / 31509438 / answer / 52268608 对于 一个 users 
products rating 的 评分 数据集 ALS 会 建立 一个 user 
* product 的 m * n 的 矩阵 其中 m 
为 users 的 数量 n 为 products 的 数量 但是 
在 这个 数据 集中 并 不是 每个 用户 都对/nr 每个 
产品 进行 过 评分 所以 这个 矩阵 往往 是 稀疏 
的 用户 i 对 产品 j 的 评分 往往 是 
空的/nr ALS 所做 的 事情 就是 将 这个 稀疏 矩阵 
通过 一定 的 规律 填满 这样 就 可以 从 矩阵 
中 得到 任意 一个 user 对 任意 一个 product 的 
评分 ALS 填充 的 评分 项也/nr 称为 用户 i 对 
产品 j 的 预测 得分 所以 说 ALS 算法 的 
核心 就是 通过 什么 样子 的 规律 来 填满 预测 
这个 稀疏 矩阵 它 是 这么 做 的 假设 m 
* n 的 评分 矩阵 R 可以 被 近似 分解成 
U * V T U 为 m * d 的 
用户 特征向量 矩阵 V 为 n * d 的 产品 
特征向量 矩阵 V T 代表 V 的 转置 原谅 我 
不会 打 转置 这个 符号 d 为 user / product 
的 特征值 的 数量 关于 d 这个 值 的 理解 
大概 可以 是 这样 的 对于 每个 产品 可以 从d个/nr 
角度 进行 评价 以 电影 为例 可以 从 主演 导演 
特效 剧情 4个 角度 来 评价 一部 电影 那么 d 
就 等于 4 可以 认为 每部 电影 在 这 4个 
角度 上 都 有一个 固定 的 基准 评 分值 例如 
末日 崩塌 这部 电影 是 一个 产品 它 的 特征向量 
是由 d 个 特征值 组成 的 d = 4 有 
4个 特征值 分别 是 主演 导演 特效 剧情 每个 特征值 
的 基准 评分 值 分别为 满分 为 1.0 主演 0.9 
大 光头 还是 那么 霸气 导演 0.7 特效 0.8 剧情 
0.6 矩阵 V 由 n 个 product * d 个 
特征值 组成 注 不太 清楚 这个 d 是否 指 的 
就是 spark 程序 里面 的 rank 对于 矩阵 U 假设 
对于 任意 的 用户 A 该 用户 对 一部 电影 
的 综合 评分 和 电影 的 特征值 存在 一定 的 
线性关系 即 电影 的 综合 评分 = a1 * d1 
+ a2 * d2 + a3 * d3 + a4 
* d4 其中 a1 4 为 用户 A 的 特征值 
d1 4 为 之前 所说 的 电影 的 特征值 参考 
协同 过滤 中的 矩阵 分解 算法 研究 那么 对于 之前 
ALS 算法 的 这个 假设 m * n 的 评分 
矩阵 R 可以 被 近似 分解成 U * V T 
就是 成立 的 某个 用户 对 某个 产品 的 评分 
可以 通过 矩阵 U 某行 和 矩阵 V 转置 的 
某 列 相乘 得到 那么 现在 的 问题 是 如何 
确定 用户 和 产品 的 特征值 之前 仅仅 是 举例子 
实际 中 这 两个 都是/nr 未知 的 变量 采用 的 
是 交替 的 最小二乘 法在/nr 上面 的 公式 中 a 
表示 评分 数据 集中 用户 i 对 产品 j 的 
真实 评分 另外 一 部分 表示 用户 i 的 特征向量 
转置 * 产品 j 的 特征向量 这里 可以 得到 预测 
的 i 对 j 的 评分 用 真实 评分 减去 
预测 评分 然后 求 平方 对 下 一个 用户 下 
一个 产品 进行 相同 的 计算 将 所有 结果 累 
加起来 其中 数据集 构成 的 矩阵 是 存在 大量 的 
空 打分 并 没有 实际 的 评分 解决 的 方法 
是 就 只看 对 已知 打分 的 项 参考 ALS 
在 Spark MLlib 中的 实现 但是 这里 之前 问题 还是 
存在 就是 用户 和 产品 的 特征向量 都是 未知 的 
这个 式子 存在 两个 未知 变量 具体 算法 略 见 
原文 总结 一下 ALS 算法 的 核心 就是 将 稀疏 
评分 矩阵 分解 为 用户 特征向量 矩阵 和 产品 特征向量 
矩阵 的 乘积 交替 使用 最 小二 乘法 逐步 计算 
用户 / 产品 特征向量 使得 差 平方和 最小 通过 用户 
/ 产品 特征向量 的 矩阵 来 预测 某个 用户 对 
某个 产品 的 评分 另 问  /i ALS/w 训练/vn 出来/v 
的/uj 模型/n 里面/f 有/v 用户/n 和/c 产品/n 的/uj 所有/b 特征向量/n 
我 可不 可以 拿 这些 特征向量 来 计算 用户 / 
产品 的 相似 度 然后 用 UserCF 或者 ItemCF 来 
计算 推荐 mllib 里面 现在 都 没有 这 两个 算法 
的 实现 回答 当然可以 但是 感觉 这个 是 在 绕远 
路 本来/t 都/d 已经/d 有/v factor/w 信息/n 可以/c 直接/ad 计算/v 
了/ul 还 通过 相似 度 来 计算 评分 有点 舍近求远 
了 上面 这段 问答 其实 讲 出了 ALS 和 item 
/ user CF 的 区别 他们 是 殊途同归 http / 
/ www . cnblogs . com / skyEva / p 
/ 5570098 . htmlALS 其实 是   交替 最小二乘 alternating 
least squares 1 . 基础 回顾 矩阵 的 奇异 值 
分解 SVD 特别 详细 的 总结 参考   http / 
/ blog . csdn . net / wangzhiqing3 / article 
/ details / 7446444 矩阵 与 向量 相乘 的 结果 
与 特征值 特征向量 有关 数值 小 的 特征值 对 矩阵 
向量 相乘 的 结果 贡献 小 1 低 秩 近似 
2 特征 降 维 相似 度 和 距离 度量 参考 
  http / / blog . sina . com . 
cn / s / blog _ 62b83291010127bf . html 2 
.   ALS   交替 最小二乘 alternating least squares 在 
机器 学习 中 ALS   指 使用 交替 最小二乘 求解 
的 一个 协同 推荐算法 它 通过 观察 到 的 所有 
用户 给 商品 的 打分 来 推断 每个 用户 的 
喜好 并向 用户 推荐 适合 的 商品 每 一行 代表 
一个 用户 u1 u2 u8   每 一列 代表 一个 
商品 v1 v2 v8 用户 的 打分 为 1 9分 
这个 矩阵 只 显示 了 观察 到 的 打分 我们 
需要 推测 没有 观察到 的 打分 ALS 的 核心 就是 
这样 一个 假设 打分 矩阵 是 近似 低 秩 的 
换句话说 就是 一个 m * n 的 打分 矩阵 可以 
由 分解 的 两个 小 矩阵 U m * k 
和V/nr k * n 的 乘积 来 近似 即 A 
= UVT k = m n   这 就是 ALS 
的 矩阵 分解 方法 这样 我们 把 系统 的 自由度 
从O/nr mn 降 到了 O m + n k 低维 
空间 的 选取 这个 低维 空间 要 能够 很好 的 
区分 事物 那么 就 需要 一个 明确 的 可 量化 
目标 这 就是 重构 误差 在 ALS 中 我们 使用 
  F 范数   来 量化 重构 误差 就是 每个 
元素 重构 误差 的 平方和 这里 存在 一个 问题 我们 
只 观察 到 部分 打分 A 中的 大量 未知 元是/nr 
我们 想 推断 的 所以 这个 重构 误差 是 包含 
未知数 的 解决 方案 很 简单 只 计算 已知 打分 
的 重构 误差 3 . 协同 过滤 协同 过滤 分析 
用户 以及 用户 相关 的 产品 的 相关性 用以 识别 
新的 用户 产品 相关性 协同 过滤 系统 需要 的 唯一 
信息 是 用户 过去 的 行为 信息 比如 对 产品 
的 评价 信息 推荐 系统 依赖 不同 类型 的 输入 
数据 最 方便 的 是 高质量 的 显 式 反馈 
数据 它们 包含 用户 对 感兴趣 商品 明确 的 评价 
例如 Netflix 收集 的 用户 对 电影 评价 的 星星 
等级 数据 但是 显 式 反馈 数据 不 一定 总是 
找 得到 因此 推荐 系统 可以 从更/nr 丰富 的 隐式 
反馈 信息 中 推测 用户 的 偏好 隐式 反馈 类型 
包括 购买 历史 浏览 历史 搜索 模式 甚至 鼠标 动作 
4 . 显示 反馈 模型 通过 内积   rij   
= uiT   vj   来 预测 另外 加入 正则化 
参数 lamda 来 预防   过拟合 最小化 重构 误差 5 
. 隐式 反馈 模型 此处 隐藏 细节 最小化 损失 函数 
看起来 就是 变成 了 多个 6 .   求解 最优化 
1 显示 和 隐式 的 异同 显示 模型 只 基于 
观察到 的 值 隐式 需要 考虑 不同 的 信任度 最优化 
时 需要 考虑 所有 可能 的 u v 对 2 
交替 最小二乘 求解 即 固定   ui   求   
vi + 1   再 固定   vi + 1 
    求   ui + 1 例子 import org 
. apache . spark . mllib . recommendation . _ 
/ / 处理 训练 数据 val data = sc . 
textFile data / mllib / als / test . data 
val ratings = data . map _ . split match 
{ case Array user item rate = Rating user . 
toInt item . toInt rate . toDouble } / / 
使用 ALS 训练 推荐 模型 val rank = 10 val 
numIterations = 10 val model = ALS . train ratings 
rank numIterations 0.01 ALS 算法 实现 于 org . apache 
. spark . ml . recommendation . ALS . scala 
文件 中 Rating 也在 recommendation 里面 注意 上面 参数 最后 
的 lambda 一般 要 小于 1 . 在 之前 的 
Spark 例子 里 用了 val lambdas = List 0.1 10.0 
两种 根据 跑 的 结果 看起来 0.1 的 效果 要 
远远 好于 10.0 的 结果 如下 RMSE = 0 . 
8806912752883373 for model with rank 8 lambda 0.1 numIter 10 
RMSE = 0 . 8723240467041277 for model with rank 8 
lambda 0.1 numIter 20 RMSE = 3 . 756322766790857 for 
model with rank 8 lambda 10.0 numIter 10 RMSE = 
3 . 756322766790857 for model with rank 8 lambda 10.0 
numIter 20 RMSE = 0 . 8771920345984275 for model with 
rank 12 lambda 0.1 numIter 10 RMSE = 0 . 
8708229872082264 for model with rank 12 lambda 0.1 numIter 20 
RMSE = 3 . 756322766790857 for model with rank 12 
lambda 10.0 numIter 10 RMSE = 3 . 756322766790857 for 
model with rank 12 lambda 10.0 numIter 20 以及 user 
CF / item CFhttp / / www . cnblogs . 
com / luchen927 / archive / 2012/02 / 01/2325360 . 
html 什么 是 协同 过滤 协同 过滤 是 利用 集体 
智慧 的 一个 典型 方法 要 理解 什么 是 协同 
过滤 Collaborative Filtering 简称 CF 首先 想 一个 简单 的 
问题 如果 你 现在 想看 个 电影 但 你 不 
知道 具体 看 哪部 你 会 怎么做 大 部分 的 
人 会 问问 周围 的 朋友 看看 最近 有 什么 
好看 的 电影 推荐 而/c 我们/r 一般/a 更/d 倾向/v 于从/nr 
口味/n 比较/d 类似/v 的/uj 朋友/n 那里/r 得到/v 推荐/v 这 就是 
协同 过滤 的 核心 思想 换句话说 就是 借鉴 和你/nr 相关 
人群 的 观点 来 进行 推荐 很好 理解 协同 过滤 
的 实现 要 实现 协同 过滤 的 推荐算法 要 进行 
以下 三 个 步骤 收集 数据 找到 相似 用户 和 
物品 进行 推荐 收集 数据 这里 的 数据 指 的 
都是 用户 的 历史 行为 数据 比如 用户 的 购买 
历史 关注 收藏 行为 或者 发表 了 某些 评论 给 
某个 物品 打 了 多少 分 等等 这些 都 可以 
用来 作为 数据 供 推荐算法 使用 服务于 推荐算法 需要 特别 
指出 的 在于 不同 的 数据 准确性 不同 粒度 也 
不同 在 使用 时 需要 考虑 到 噪音 所 带来 
的 影响 找到 相似 用户 和 物品 这一步 也 很简单 
其实 就是 计算 用户 间 以及 物品 间 的 相似 
度 以下 是 几种 计算 相似 度 的 方法 欧几里德 
距离 皮尔逊 相关系数 Cosine 相似 度 Tanimoto 系数 进行 推荐 
在 知道 了 如何 计算 相似 度 后 就 可以 
进行 推荐 了 在 协同 过滤 中 有 两种 主流 
方法 基于 用户 的 协同 过滤 和 基于 物品 的 
协同 过滤 当然 了 还有 上文 提到 的 ALS 具体 
怎么 来 阐述 他们 的 原理 呢 看 个 图 
大家 就 明白 了 User based CF 基于 用户 的 
CF 的 基本 思想 相当 简单 基于 用户 对 物品 
的 偏好 找到 相邻 邻居 用户 然后 将 邻居 用户 
喜欢 的 推荐 给 当前 用户 计 算上 就是 将 
一个 用户 对 所有 物品 的 偏好 作为 一个 向量 
来 计算 用户 之间 的 相似 度 找到 K 邻居 
后 根据 邻居 的 相似 度 权重 以及 他们 对 
物品 的 偏好 预测 当前 用户 没有 偏好 的 未 
涉及 物品 计算 得到 一个 排序 的 物品 列表 作为 
推荐 下图 给出 了 一个 例子 对于 用户 A 根据 
用户 的 历史 偏好 这里 只 计算 得到 一个 邻居 
用户 C 然后 将 用户 C 喜欢 的 物品 D 
推荐 给 用户 A Item based CF 基于 物品 的 
CF 的 原理 和 基于 用户 的 CF 类似 只是 
在 计算 邻居 时 采用 物品 本身 而 不是 从 
用户 的 角度 即 基于 用户 对 物品 的 偏好 
找到 相似 的 物品 然后 根据 用户 的 历史 偏好 
推荐 相似 的 物品 给 他 从 计算 的 角度 
看 就是 将 所有 用户 对 某个 物品 的 偏好 
作为 一个 向量 来 计算 物品 之间 的 相似 度 
得到 物品 的 相似 物品 后 根据 用户 历史 的 
偏好 预测 当前 用户 还 没有 表示 偏好 的 物品 
计算 得到 一个 排序 的 物品 列表 作为 推荐 下图 
给出 了 一个 例子 对于 物品 A 根据 所有 用户 
的 历史 偏好 喜欢 物品 A 的 用户 都 喜欢 
物品 C 得出 物品 A 和 物品 C 比较 相似 
而 用户 C 喜欢 物品 A 那么 可以 推断 出 
用户 C 可能 也 喜欢 物品 C 总结/n 及/c 对比/v 
以上/f 两个/m 方法/n 都能/nr 很好/i 的/uj 给出/v 推荐/v 并 可以 
达到 不错 的 效果 但是 他们 之间 还是 有 不同 
之处 的 而且 适用性 也 有区别 下面 进行 一下 对比 
1 . 计算 复杂度 Item CF 和 User CF 是 
基于 协同 过滤 推荐 的 两个 最 基本 的 算法 
User CF 是 很早以前 就 提 出来 了 Item CF 
是从 Amazon 的 论文 和 专利 发表 之后 2001 年 
左右 开始 流行 大家 都 觉得 Item CF 从/p 性能/n 
和/c 复杂/a 度上/i 比/p User CF 更优 其中 的 一个 
主要 原因 就是 对于 一个 在线 网站 用户 的 数量 
往往 大大 超过 物品 的 数量 同时 物品 的 数据 
相对 稳定 因此 计算 物品 的 相似 度 不但 计算 
量 较小 同时 也 不必 频繁 更新 但 我们 往往 
忽略 了 这种 情况 只 适应 于 提供 商品 的 
电子 商务 网站 对于 新闻 博客 或者 微 内容 的 
推荐 系统 情况 往往 是 相反 的 物品 的 数量 
是 海量 的 同时 也 是 更新 频繁 的 所以 
单从 复杂度 的 角度 这 两个 算法 在 不同 的 
系统 中 各 有优势 推荐 引擎 的 设计 者 需要 
根据 自己 应用 的 特点 选择 更加 合适 的 算法 
2 .   适用 场景 在 非 社交 网络 的 
网站 中 内容 内在 的 联系 是 很 重要 的 
推荐 原则 它 比 基于 相似 用户 的 推荐 原则 
更加 有效 比如 在 购书 网站 上 当 你 看 
一 本书 的 时候 推荐 引擎 会给 你 推荐 相关 
的 书籍 这个 推荐 的 重要性 远远 超过 了 网站 
首页 对 该 用户 的 综合 推荐 可以 看到 在 
这种 情况 下 Item CF 的 推荐 成为 了 引导 
用户 浏览 的 重要 手段 同时 Item CF 便于 为 
推荐 做出 解释 在 一个 非 社交 网络 的 网站 
中 给 某个 用户 推荐 一 本书 同时/c 给出/v 的/uj 
解释/v 是/v 某某/r 和你有/nr 相似/v 兴趣/n 的/uj 人也/i 看了/i 这本书/i 
这 很难 让 用户 信服 因为 用户 可能 根本 不 
认识 那个人 但 如果 解释 说 是因为 这 本书 和你/nr 
以前 看 的 某 本书 相似 用户 可能 就 觉得 
合理 而 采纳 了此 推荐 相反 的 在 现今 很 
流行 的 社交 网络 站点 中 User CF 是 一个 
更 不错 的 选择 User CF 加上 社会 网络 信息 
可以 增加 用户 对 推荐 解释 的 信服 程度 下面 
是 上面 CF 这篇 引用 文章 的 参考 文章 主要 
讲 了 一些 理论 还有 Apache Mahout 的 使用 因为 
我 主要 用 Spark 所以 可以 先 忽略 http / 
/ www . ibm . com / developerworks / cn 
/ web / 1103 _ zhaoct _ recommstudy2 / index 
. html 完 