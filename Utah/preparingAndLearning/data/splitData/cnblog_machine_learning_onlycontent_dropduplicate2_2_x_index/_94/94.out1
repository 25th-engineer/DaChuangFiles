ML . NET   专门 为 . NET 开发者 提供 
了 一套 跨平台 的 开源 的 机器学习 框架 ML . 
NET 支持 . NET 开发者 不需要 过度 专业 的 机器学习 
开发 经验 就能 轻松 地 训练 自己 的 模型 并且 
嵌入 到 自己 的 应用 中 一切 尽在 . NET 
之中 ML . NET 早期 是由 Microsoft Research 开发 近 
十年 来 逐步 集成 到 一个 大 体系 中 被 
众多 Microsoft 产品 使用 如 大家 熟知 的 Windows Bing 
PowerPoint Excel 之类 ML . NET 的 第一 个 预览版 
提供 了 分类器 如 文本 分类 情感 分析 和 回归 
如 价格 预测 等 实用 的 机器学习 模型 第一 版 
发布 后在/nr 既有 功能 之上 又 新增 了 关于 训练 
模型 的 . NET API 使用 这些 模型 进行 预测 
就像 框架 中 算法 转换 数据结构 一类 核心 组件 一样 
的 开发 体验 接下 来用 个 示例 一起 进入 快速 
上手 的 实践中 来 安装 . NET SDK 为了 创建 
一个 . NET 应用 首先 下载 . NET SDK 创建 
应用 使用 如 下命令 初始化 项目 创建 一个 控制台 应用程序 
目标 为 myApp dotnet new console o myApp cd myApp 
安装 ML . NET 包 使用 如 下命令 安装 Microsoft 
. ML 包 dotnet add package Microsoft . ML 下载 
数据集 假设 我们 使用 机器学习 来 预测 鸢尾花 的 类型 
比如 有 setosa versicolor virginica 三种 基于 特征 有 四种 
花瓣 长度 花瓣 宽度 萼片 长度 萼片 宽度 去 UCI 
Machine Learning Repository Iris Data Set 下载 一个 现成 的 
数据集 复制粘贴 其中 的 数据 到 任何 一个 文本 编辑器 
中 然后 保存 命名为 iris data . txt 到 myApp 
目录 中 粘 贴完 文本 内容 应该 是 如下 格式 
每 一行 表示 不同 鸢尾花 的 样本 数值 的 部分 
从左到右 依次 是 萼片 长度 萼片 宽度 花瓣 长度 花瓣 
宽度 最后 是 鸢尾花 的 类型 5.1 3.5 1.4 0.2 
Iris setosa 4.9 3.0 1.4 0.2 Iris setosa 4.7 3.2 
1.3 0.2 Iris setosa . . . 如果 是 使用 
了 Visual Studio 将 iris data . txt 添加 至 
项目 中 需要 进行 如下 配置 确保 运行时 数据集 文件 
在 输出 的 目录 中 编写 代码 打开 Program . 
cs 文件 输入 以下 代码 using Microsoft . ML using 
Microsoft . ML . Runtime . Api using Microsoft . 
ML . Trainers using Microsoft . ML . Transforms using 
System namespace myApp { class Program { / / STEP 
1 Define your data structures / / IrisData is used 
to provide training data and as / / input for 
prediction operations / / First 4 properties are inputs / 
features used to predict the label / / Label is 
what you are predicting and is only set when training 
public class IrisData { Column 0 public float SepalLength Column 
1 public float SepalWidth Column 2 public float PetalLength Column 
3 public float PetalWidth Column 4 ColumnName Label public string 
Label } / / IrisPrediction is the result returned from 
prediction operations public class IrisPrediction { ColumnName PredictedLabel public string 
PredictedLabels } static void Main string args { / / 
STEP 2 Create a pipeline and load your data var 
pipeline = new LearningPipeline / / If working in Visual 
Studio make sure the Copy to Output Directory / / 
property of iris data . txt is set to Copy 
always string dataPath = iris data . txt pipeline . 
Add new TextLoader IrisData dataPath separator / / STEP 3 
Transform your data / / Assign numeric values to text 
in the Label column because only / / numbers can 
be processed during model training pipeline . Add new Dictionarizer 
Label / / Puts all features into a vector pipeline 
. Add new C o l u m n C 
o n c a t e n a t o 
r Features SepalLength SepalWidth PetalLength PetalWidth / / STEP 4 
Add learner / / Add a learning algorithm to the 
pipeline . / / This is a classification scenario What 
type of iris is this pipeline . Add new t 
o c h a s t i c D u 
a l C o o r d i n a 
t e A s c e n t C l 
a s s i f i e r / / 
Convert the Label back into original text after converting to 
number in step 3 pipeline . Add new P r 
e d i c t e d L a b 
e l C o l u m n O r 
i g i n a l V a l u 
e C o n v e r t e r 
{ P r e d i c t e d 
L a b e l C o l u m 
n = PredictedLabel } / / STEP 5 Train your 
model based on the data set var model = pipeline 
. Train IrisData IrisPrediction / / STEP 6 Use your 
model to make a prediction / / You can change 
these numbers to test different predictions var prediction = model 
. Predict new IrisData { SepalLength = 3.3 f SepalWidth 
= 1.6 f PetalLength = 0.2 f PetalWidth = 5.1 
f } Console . WriteLine $ Predicted flower type is 
{ prediction . PredictedLabels } } } } 运行 应用 
使用 如下 命令行 运行 程序 dotnet run 在 最后 一行 
将 输出 对花 的 预测 结果 你 可以 修改 传给 
Predict 函数 各种 鸢尾花 的 特征值 看看 有 什么 不同 
的 结果 恭喜 你 已经 跨入 使用 ML . NET 
进行 机器学习 的 门槛 了 