本文 先从 几何 意义上 对 奇异 值 分解 SVD 进行 
简单 介绍 然后 分析 了 特征值 分解 与 奇异 值 
分解 的 区别 与 联系 最后 用 python 实现 将 
SVD 应用于 推荐 系统 1 . SVD 详解 SVD singular 
value decomposition 翻译 成 中文 就是 奇异 值 分解 SVD 
的 用处 有 很多 比如 LSA 隐性 语义分析 推荐 系统 
特征 压缩 或称 数据 降 维 SVD 可以 理解 为 
将 一个 比较 复杂 的 矩阵 用 更小 更 简单 
的 3 个子 矩阵 的 相乘 来 表示 这 3个 
小 矩阵 描述 了 大 矩阵 重要 的 特性 1.1 
奇异 值 分解 的 几何 意义 因 公式 输入 比较 
麻烦 所以 采取 截图 的 方式 2 . SVD 应用于 
推荐 系统 数据 集中 行 代表 用户 user 列 代表 
物品 item 其中 的 值 代表 用户 对 物品 的 
打分 基于 SVD 的 优势 在于 用户 的 评分 数据 
是 稀疏 矩阵 可以 用 SVD 将 原始数据 映 射到 
低维 空间 中 然后 计算 物品 item 之间 的 相似 
度 可以 节省 计算资源 整体 思路 先 找到 用户 没有 
评分 的 物品 然后 再 经过 SVD 压缩 后的/nr 低维 
空间 中 计算 未 评分 物品 与 其他 物品 的 
相似性 得到 一个 预测 打分 再 对 这些 物品 的 
评分 从高 到 低 进行 排序 返回 前 N 个 
物品 推荐 给 用户 具体 代码 如下 主要 分为 5 
部分 第 1 部分 加载 测试 数据集 第 2 部分 
定义 三种 计算 相似 度 的 方法 第 3 部分 
通过 计算 奇异 值 平方和 的 百分比 来 确定 将 
数据 降到 多少 维 才 合适 返回 需要 降到 的 
维度 第 4 部分 在 已经 降 维 的 数据 
中 基于 SVD 对 用户 未 打分 的 物品 进行 
评分 预测 返回 未 打分 物品 的 预测 评 分值 
第 5 部分 产生 前 N 个 评 分值 高的/nr 
物品 返回 物品 编号 以及 预测 评 分值 优势 在于 
用户 的 评分 数据 是 稀疏 矩阵 可以 用 SVD 
将 数据 映 射到 低 维空间 然后 计算 低 维空间 
中的 item 之间 的 相似 度 对 用户 未 评分 
的 item 进行 评分 预测 最后 将 预测 评分 高的/nr 
item 推荐 给 用户 # coding = utf 8 from 
numpy import * from numpy import linalg as la 加载 
测试 数据集 def loadExData return mat 0 0 0 0 
0 4 0 0 0 0 5 0 0 0 
3 0 4 0 0 0 0 3 0 0 
0 0 4 0 0 1 0 4 0 3 
3 4 0 0 0 0 2 2 0 0 
5 4 5 0 0 0 0 5 5 0 
0 0 0 0 0 5 0 1 0 0 
5 0 4 3 4 0 0 0 0 5 
5 0 1 0 0 0 4 0 4 0 
0 0 0 4 0 0 0 2 0 2 
5 0 0 1 2 0 0 0 0 5 
0 0 0 0 4 0 1 0 0 0 
0 0 0 1 2 0 0 以下 是 三种 
计算 相似 度 的 算法 分别 是 欧式 距离 皮尔逊 
相关系数 和 余弦 相似 度 注意 三种 计算 方式 的 
参数 inA 和 inB 都是 列 向量 def ecludSim inA 
inB return 1.0 / 1.0 + la . norm inA 
inB # 范数 的 计算 方法 linalg . norm 这里 
的 1 / 1 + 距离 表示 将 相似 度 
的 范围 放在 0 与 1 之间 def pearsSim inA 
inB if len inA 3 return 1.0 return 0.5 + 
0.5 * corrcoef inA inB rowvar = 0 0 1 
# 皮尔逊 相关 系数 的 计算 方法 corrcoef 参数 rowvar 
= 0 表示 对列 求 相似 度 这里 的 0.5 
+ 0.5 * corrcoef 是 为了 将 范围 归一化 放到 
0 和1/nr 之间 def cosSim inA inB num = float 
inA . T * inB denom = la . norm 
inA * la . norm inB return 0.5 + 0.5 
* num / denom # 将 相似 度 归 一到 
0 与 1 之间 按照 前 k 个 奇异 值 
的 平方和 占 总 奇异 值 的 平方和 的 百分比 
percentage 来 确定 k 的 值 后续 计算 SVD 时 
需要 将 原始 矩阵 转换 到 k 维空间 def sigmaPct 
sigma percentage sigma2 = sigma * * 2 # 对 
sigma 求 平方 sumsgm2 = sum sigma2 # 求 所有 
奇异 值 sigma 的 平方和 sumsgm3 = 0 # sumsgm3 
是 前 k 个 奇异 值 的 平方和 k = 
0 for i in sigma sumsgm3 + = i * 
* 2 k + = 1 if sumsgm3 = sumsgm2 
* percentage return k 函数 svdEst 的 参数 包含 数据 
矩阵 用户 编号 物品 编号 和 奇异 值 占 比 
的 阈值 数据 矩阵 的 行 对应 用户 列 对应 
物品 函数 的 作用 是 基于 item 的 相似性 对 
用户 未 评 过分 的 物品 进行 预测 评分 def 
svdEst dataMat user simMeas item percentage n = shape dataMat 
1 simTotal = 0.0 ratSimTotal = 0.0 u sigma vt 
= la . svd dataMat k = sigmaPct sigma percentage 
# 确定 了 k 的 值 sigmaK = mat eye 
k * sigma k # 构建 对角 矩阵 xformedItems = 
dataMat . T * u k * sigmaK . I 
# 根据 k 的 值 将 原始数据 转换 到 k 
维空间 低维 xformedItems 表示 物品 item 在 k 维空间 转换 
后的值/nr for j in range n userRating = dataMat user 
j if userRating = = 0 or j = = 
item continue similarity = simMeas xformedItems item . T xformedItems 
j . T # 计算 物品 item 与 物品 j 
之间 的 相似 度 simTotal + = similarity # 对 
所有 相似 度 求和 ratSimTotal + = similarity * userRating 
# 用 物品 item 和 物品 j 的 相似 度 
乘以 用户 对 物品 j 的 评分 并 求和 if 
simTotal = = 0 return 0 else return ratSimTotal / 
simTotal # 得到 对 物品 item 的 预测 评分 函数 
recommend 产生 预测 评分 最高 的 N 个 推荐 结果 
默认 返回 5个 参数 包括 数据 矩阵 用户 编号 相似 
度 衡量 的 方法 预测 评分 的 方法 以及 奇异 
值 占 比 的 阈值 数据 矩阵 的 行 对应 
用户 列 对应 物品 函数 的 作用 是 基于 item 
的 相似性 对 用户 未 评 过分 的 物品 进行 
预测 评分 相似 度 衡量 的 方法 默 认用 余弦 
相似 度 def recommend dataMat user N = 5 simMeas 
= cosSim estMethod = svdEst percentage = 0.9 unratedItems = 
nonzero dataMat user . A = = 0 1 # 
建立 一个 用户 未 评分 item 的 列表 if len 
unratedItems = = 0 return you rated everything # 如果 
都 已经 评 过分 则 退出 itemScores = for item 
in unratedItems # 对于 每个 未 评分 的 item 都 
计算 其 预测 评分 estimatedScore = estMethod dataMat user simMeas 
item percentage itemScores . append item estimatedScore itemScores = sorted 
itemScores key = lambda x x 1 reverse = True 
# 按照 item 的 得分 进行 从大到/nr 小 排序 return 
itemScores N # 返回 前 N 大 评 分值 的 
item 名 及其 预 测评 分值 将 文件 命名为 svd2 
. py 在 python 提示符 下 输入 import svd2 testdata 
= svd2 . loadExData svd2 . recommend testdata 1 N 
= 3 percentage = 0.8 # 对 编号 为 1 
的 用户 推荐 评分 较高 的 3件 商品 Reference 1 
. Peter Harrington 机器学习 实战 人民邮电出版社 20132 . http / 
/ www . ams . org / samplings / feature 
column / fcarc svd 讲解 SVD 非常好 的 一篇 文章 
对于 理解 SVD 非常 有 帮助 本文 中 SVD 的 
几何 意义 就是 参考 这篇 3 . http / / 
blog . csdn . net / xiahouzuoxin / article / 
details / 41118351 讲解 SVD 与 特征值 分解 区别 的 
一篇 文章 