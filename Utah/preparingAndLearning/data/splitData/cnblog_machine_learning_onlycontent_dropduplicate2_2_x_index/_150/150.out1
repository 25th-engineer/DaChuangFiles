zw 版 Halcon delphi 系列 原创 教程 酸奶 自动 分类 
脚本 机器学习 人工智能 Halcon 强大 的 图像 处理 能力 令人 
往往 会 忽视 其 内核 是 更加 彪悍 的 机器学习 
人工智能 分类 聚类分析 是 机器学习 人工智能 的 核心 算法 之一 
也是 个 典型 的 应用 Halcon 内置 的 聚类分析 机器学习 
模块 就有 knn 邻近 算法 向量 机 SVM GMM 高斯 
混合模型 Gaussian Mixture Model 或者 混合 高斯 模型 也 可以 
简写 为 MOG Mixture of Gaussian MLP 多层 神经网络 等等 
相关 模块 基本上 都是 汇编 级 的 高度 优化 直接 
调用 就 可以 目前 国内 海外 机器学习 人工智能 方面 的 
学者 没有 几位 重视 这块 国外 可能 是 版权问题 毕竟 
Halcon 是 售价 高达 数 万 欧元 不是 人民币 的 
商业 软件 而且 主要 用于 自控 机器 视觉 等 工业 
领域 而 不是 大学 国内 可能 是 对于 Halcon 的 
了解 不够 halcon 虽然在 自控 领域 一家独大 70% 份额 本身 
非常 低调 很少 在 行业 外 宣传 自己 也许 是 
国人 的 逆向工程 D 版 把 德国人 也 吓坏 了 
其实 图像 处理 的 核心 图像识别 分类 都 离不开 机器学习 
人工智能 大家 看看 opencv 的 发展 路线 就 可以 清楚 
看到 从cv/nr 1.0 的 图像 到 c v 2.0 2.4 
的 机器学习 以及 目前 c v 3.0 的 GPU cuda 
人工智能 模块 AI 在 其中 所 占据 的 份额 越来越 
大 Halcon 因为 面向 一线 生产线 所以 很多 机器学习 人工智能 
都是 黑 箱式 的 无需 编程 直接 调用 例如 内置 
的 ocr 模块 可以 识别 99% 的 标准 工业 字符 
超市 海关 流水线 零配件 不过 Halcon 也 提供 了 大量 
的 机器学习 模块 毕竟 各种 应用 场合 复杂 许多 库 
必须 进行 定制 Halcon 自带 demo 脚本 matching _ multi 
_ channel _ yogurl . hdev 是 一个 简单 的 
机器学习 人工智能 分类 应用 也是 个 典型 的 应用 场景 
效果 还是 蛮好 的 大家 可以 看到 图像 的 角度 
不同 有 旋转 Halcon 能够 轻轻松松 识别 这个 脚本 AI 
方面 不算 复杂 建模 就是 先 拍摄 几张 产品 的 
照片 直接 匹配 通常 Halcon 建模 需要 进行 200次 默认 
参数 迭代 选 这个 脚本 其中 一个 原因 是 因为 
前 几天 有人 在 论坛 询问 如何 对 企业 生产线 
的 产品 零食 好像 进行 自动 分类 脚本 80 多行 
很 简单 1 * This example demonstrates shape based matching 
2 * with multi channel images 3 * 4 * 
Init display 5 dev _ update _ off 6 Mode 
= multi channel 7 ModelColor = green 8 CircleColor = 
white 9 Names = Pear Apple Hazelnut Cherry Currant Strawberry 
10 read _ image Image color / yogurt _ model 
_ 01 11 get _ image _ size Image Width 
Height 12 dev _ close _ window 13 dev _ 
open _ window 0 0 Width Height black WindowHandle 14 
set _ display _ font WindowHandle 14 mono true false 
15 * 16 * Part 1 create shape models 17 
ModelIDs = 18 for Index = 1 to 3 by 
1 19 read _ image Image color / yogurt _ 
model _ + Index $ 02 20 dev _ display 
Image 21 * 22 * Create ROI automatically 23 access 
_ channel Image Channel1 1 24 fast _ threshold Channel1 
Region 75 255 20 25 fill _ up Region RegionFillUp 
26 opening _ circle RegionFillUp RegionOpening 170.5 27 gen _ 
contour _ region _ xld RegionOpening Contours border 28 fit 
_ circle _ contour _ xld Contours geotukey 1 0 
0 3 2 Row Column Radius StartPhi EndPhi PointOrder 29 
gen _ circle Circle Row Column Radius / 2 30 
reduce _ domain Image Circle ImageReduced 31 * 32 * 
Create model 33 create _ shape _ model ImageReduced 6 
rad 0 rad 360 auto auto ignore _ color _ 
polarity 35 50 15 11 ModelID 34 ModelIDs = ModelIDs 
ModelID 35 * 36 * Display model 37 dev _ 
set _ color CircleColor 38 dev _ set _ draw 
margin 39 dev _ set _ line _ width 5 
40 dev _ display Circle 41 get _ shape _ 
model _ contours Model1Contours ModelID 1 42 dev _ set 
_ color ModelColor 43 dev _ set _ line _ 
width 2 44 dev _ display _ shape _ matching 
_ results ModelIDs ModelColor Row Column 0.0 1 1 ModelID 
45 disp _ message WindowHandle Create shape model + Names 
Index 1 window 12 12 black true 46 disp _ 
message WindowHandle Press \ Run \ to continue window 450 
12 black true 47 stop 48 endfor 49 * Main 
loop Find yogurt 50 for Index = 1 to 10 
by 1 51 read _ image Image color / yogurt 
_ + Index $ 02 52 * Preprocessing Reduce search 
domain to speed up matching 53 access _ channel Image 
Channel1 1 54 fast _ threshold Channel1 Region 50 255 
20 55 fill _ up Region RegionFillUp 56 erosion _ 
rectangle1 RegionFillUp RegionErosion 210 210 57 reduce _ domain Image 
RegionErosion ImageReduced 58 * Find yogurt 59 find _ shape 
_ models ImageReduced ModelIDs rad 0 rad 360 0.80 1 
0.5 least _ squares 0 0.95 Row Column Angle Score 
Model 60 * 61 * Display results 62 dev _ 
display Image 63 gen _ circle Circle Row Column Radius 
/ 2 64 dev _ set _ color CircleColor 65 
dev _ set _ line _ width 5 66 dev 
_ display Circle 67 get _ shape _ model _ 
contours ModelContours Model 1 68 dev _ set _ color 
ModelColor 69 dev _ set _ line _ width 2 
70 dev _ display _ shape _ matching _ results 
ModelIDs ModelColor Row Column Angle 1 1 Model 71 disp 
_ message WindowHandle Names find ModelIDs Model + found window 
12 12 black true 72 disp _ message WindowHandle Score 
+ Score window 50 12 black true 73 if Index 
10 74 disp _ continue _ message WindowHandle black true 
75 stop 76 endif 77 endfor 78 * 79 * 
Cleanup memory 80 clear _ shape _ model ModelIDs 0 
81 clear _ shape _ model ModelIDs 1 82 clear 
_ shape _ model ModelIDs 2 zw 版 Halcon delphi 
系列 原创 教程 网址 cnblogs . com / ziwang / 
