原文 来自 CSDN 公众 号 ID CSDNnews 对其 结构 略作 
改动 1 . 写 在前面 2018 年 FIFA 世界杯 即将 
拉开 帷幕 全/a 世界/n 的/uj 球迷/n 都/d 热切/a 地/uv 想/v 
要知道/i 谁将 获得 那 梦寐以求 的 大力神杯 如果 你 不仅 
是个 足球迷 而且 也 是 高科技 人员 的话 我 猜 
你 肯定 知道 机器学习 和 人工智能 也是 目前 的 流行 
词 让 我们 结合 两者 来 预测 一下 本届 俄罗斯 
FIFA 世界杯 哪个 国家 将 夺冠 作者 Gerald Muriuki 经济 
数据 科学 专家 译者 弯月 责编 郭芮/nr 点击/v 此处/r 获取/v 
完整/a 的/uj 代码/n https / / github . com / 
itsmuriuki / FIFA 2018 World cup predictions2 . 译文 足球比赛 
涉及 的 因素 非常 繁多 我 无法 将 所有 因素 
都 融入 机器学习 模型 中 本文 只是 一个 黑客 想 
用 数据 尝试 一些 很酷 的 东西 本文 的 目标 
是 用 机器 学习 来 预测 谁将 赢得 2018 FIFA 
世界杯 的 冠军 预测 整个 比赛 的 小组赛 结果 模拟 
四分之一 决赛 半决赛 以及 决赛 这些 目标 代表 了 独一无二 
的 现实 世界 里 机器 学习 的 预测 问题 并将 
解决 机器学习 中 的 各种 任务 数据 集成 特征 建模 
和 结果 预测 2.1 数据 我 采用 了 两个 来自 
Kaggle 的 数据 集 我们 将 使用 自 1930 年 
第一 届 世界杯 以来 所有 参赛队 的 历史 赛事 结果 
FIFA 排名 是 于 90 年代 创建 的 因此 这里 
缺失 很大 一部分 数据 所以 我们 使用 历史 比赛 记录 
点击 以下 链接 获取 所有 数据 https / / www 
. kaggle . com / martj42 / international football results 
from 1872 to 2017 / data 本文 中 主要 使用 
的 环境 和 工具 有 jupyter notebook numpy pandas seaborn 
matplotlib 和 scikit learn 首先 我们 要 针对 两个 数据集 
做 探索性 分析 然后 经过 特征 工程 来 选择 与 
预测 关联性 最强 的 特征 还有 数据处理 再 选择 一个 
机器学习 模型 最后 将 模型 配置 到 数据 集上 2.2 
让 我们 开始 动手吧 首先 导入 所需 的 代码 库 
并将 数据集 加载 到 数据 框 中 1 import pandas 
as pd 2 import numpy as np 3 import matplotlib 
. pyplot as plt 4 import seaborn as sns 5 
import matplotlib . ticker as ticker 6 import matplotlib . 
ticker as plticker 7 from sklearn . model _ selection 
import train _ test _ split 8 from sklearn . 
linear _ model import L o g i s t 
i c R e g r e s s i 
o n 导入 数据集 1 # load data 2 world 
_ cup = pd . read _ csv C \ 
Coding \ FIFA2018 World cup \ datasets \ World Cup 
2018 Dataset . csv 3 results = pd . read 
_ csv C / Coding / FIFA2018 World cup / 
datasets / results . csv 下 一步 是 加载 数据集 
通过 调用 world _ cup . head 和 results . 
head 务必 将 两个 数据集 都 加载 到 数据 框 
中 如下 所示 2.3 探索性 分析 在 分析 了 两组 
数据集 后 所得 的 数据 集 包含 了 以往 赛事 
的 数据 这个 新的 所得 的 数据集/i 对于/p 分析/vn 和/c 
预测/vn 将来/t 的/uj 赛事/n 非常/d 有/v 帮助/v 探索性 分析 和 
特征 工程 需要 建立 与 机器学习 模型 相关 的 特征 
在 任何 数据 科学 的 项目 中 这 部分 工作 
都是最/nr 耗时 的 现在 我们 把 目标 差异 和 结果 
列 添加 到 结果 数据集 1 # Adding goal difference 
and establishing who is the winner 2 winner = 3 
for i in range len results home _ team 4 
if results home _ score i results away _ score 
i 5 winner . append results home _ team i 
6 elif results home _ score i results away _ 
score i 7 winner . append results away _ team 
i 8 else 9 winner . append Draw 10 results 
winning _ team = winner 11 12 # adding goal 
difference column 13 results goal _ difference = np . 
absolute results home _ score results away _ score 14 
15 results . head 检查一下 新 的 结果 数据 框 
然后 我们 着手 处理 仅 包含 尼日利亚 参加 比赛 的 
一组 数据 这 可以 帮助 我们 集中 找 出 哪些 
特征 对 一个 国家 有效 随后 再 扩展 到 参与 
世界杯 的 所有 国家 1 # lets work with a 
subset of the data one that includes games played by 
Nigeria in a Nigeria dataframe 2 df = results results 
home _ team = = Nigeria | results away _ 
team = = Nigeria 3 nigeria = df . iloc 
4 nigeria . head 第一 届 世界杯 于 1930 年 
举行 我们 为 年份 创建 一列 并 选择 所有 1930 
年 之后 举行 的 比赛 1 # creating a column 
for year and the first world cup was held in 
1930 2 year = 3 for row in nigeria date 
4 year . append int row 4 5 nigeria match 
_ year = year 6 nigeria _ 1930 = nigeria 
nigeria . match _ year = 1930 7 nigeria _ 
1930 . count 现在 我们 可以 用 图形 表示 这些年来 
尼日利亚队 最 普遍 的 比赛 结果 # what is the 
common game outcome for nigeria visualisation wins = for row 
in nigeria _ 1930 winning _ team if row = 
Nigeria and row = Draw wins . append Loss else 
wins . append row winsdf = pd . DataFrame wins 
columns = Nigeria _ Results # plotting fig ax = 
plt . subplots 1 fig . set _ size _ 
inches 10.7 6.27 sns . set style = darkgrid sns 
. countplot x = Nigeria _ Results data = winsdf 
每个 参加 世界杯 的 国家 的 胜率 是 非常 有 
帮助 性 的 指标 我们 可以 用 它 来 预测 
此次 比赛 最 可能 的 结果 2.4 锁定 参加 世界杯 
的 队伍 我们 为 2018 世界杯 所有 参赛 队伍 创建 
一个 数据 框 然后 从该/nr 数据 框 中 进一步 筛选出 
从 1930 年起/nr 参加 世界杯 的 队伍 并 去掉 重复 
的 队伍 1 # narrowing to team patcipating in the 
world cup 2 worldcup _ teams = Australia Iran Japan 
Korea Republic 3 Saudi Arabia Egypt Morocco Nigeria 4 Senegal 
Tunisia Costa Rica Mexico 5 Panama Argentina Brazil Colombia 6 
Peru Uruguay Belgium Croatia 7 Denmark England France Germany 8 
Iceland Poland Portugal Russia 9 Serbia Spain Sweden Switzerland 10 
df _ teams _ home = results results home _ 
team . isin worldcup _ teams 11 df _ teams 
_ away = results results away _ team . isin 
worldcup _ teams 12 df _ teams = pd . 
concat df _ teams _ home df _ teams _ 
away 13 df _ teams . drop _ duplicates 14 
df _ teams . count 为 年份 创建 一列 去掉 
1930 年 之前 的 比赛 并 去掉 不会 影响 到 
比赛 结果 的 数据 列 比如 date 日期 home _ 
score 主场 得分 away _ score 客场 得分 tournament 锦标赛 
city 城市 country 国家 goal _ difference 目标 差异 和 
match _ year 比赛 年份 # create an year column 
to drop games before 1930 year = for row in 
df _ teams date year . append int row 4 
df _ teams match _ year = year df _ 
teams _ 1930 = df _ teams df _ teams 
. match _ year = 1930 df _ teams _ 
1930 . head # dropping columns that wll not affect 
matchoutcomes df _ teams _ 1930 = df _ teams 
. drop date home _ score away _ score tournament 
city country goal _ difference match _ year axis = 
1 df _ teams _ 1930 . head 为了 简化 
模型 的 处理 我们 修改 一下 预测 标签 如果 主场 
队伍 获胜 那么 winning _ team 获胜 队伍 一列 显示 
2 如果 平局 则 显示 1 如果 是 客场 队伍 
获胜 则 显示 0 1 # Building the model 2 
# the prediction label The winning _ team column will 
show 2 if the home team has won 1 if 
it was a tie and 0 if the away team 
has won . 3 4 df _ teams _ 1930 
= df _ teams _ 1930 . reset _ index 
drop = True 5 df _ teams _ 1930 . 
loc df _ teams _ 1930 . winning _ team 
= = df _ teams _ 1930 . home _ 
team winning _ team = 2 6 df _ teams 
_ 1930 . loc df _ teams _ 1930 . 
winning _ team = = Draw winning _ team = 
1 7 df _ teams _ 1930 . loc df 
_ teams _ 1930 . winning _ team = = 
df _ teams _ 1930 . away _ team winning 
_ team = 0 8 9 df _ teams _ 
1930 . head 通过 设置 哑 变量 dummy variables 我们 
将 home _ team 主场 队伍 和 away _ team 
客场 队伍 从 分类 变量 转换成 连续 的 输入 这时 
可以 使用 pandas 的 get _ dummies 函数 它 会将 
分类 列 替换成 一位 有效值 one hot 由 数字 1 
和 0 组成 以便 将 它们 加载 到 Scikit learn 
模型 中 接下来 我们 将 数据 按照 70% 的 训练 
数据集 和 30% 的 测试 数据集 分成 X 集 和 
Y 集 1 # convert home team and away team 
from categorical variables to continous inputs 2 # Get dummy 
variables 3 final = pd . get _ dummies df 
_ teams _ 1930 prefix = home _ team away 
_ team columns = home _ team away _ team 
4 5 # Separate X and y sets 6 X 
= final . drop winning _ team axis = 1 
7 y = final winning _ team 8 y = 
y . astype int 9 10 # Separate train and 
test sets 11 X _ train X _ test y 
_ train y _ test = train _ test _ 
split X y test _ size = 0.30 random _ 
state = 42 这里 我们 将 使用 分类 算法 逻辑 
回归 这个 算法 的 工作 原理 是 什么 该 算法 
利用 逻辑 函数 来 预测 概率 从而 可以 测量 出 
分类 因变量 与 一个 或 多个 自变量 之间 的 关系 
具体 来说 就是 累积 的 逻辑 分布 换句话说 逻辑 回归 
可以 针对 一组 可以 影响 到 结果 的 既定 数据集 
统计 值 尝试 预测 结果 赢 或 输 在 实践 
中 这种 方法 的 工作 原理 是 使用 上述 的 
两套 数据集 和 比赛 的 实际 结果 一次 输入 一场 
比赛 到 算法 中 然后 模型 就 会 学习 输入 
的 每条 数据 对 比赛 结果 产生 了 积极 的 
效果 还是 消极 的 效果 以及 影响 的 程度 经过 
充分 的 好 数据 的 训练 后 就 可以 得到 
能够 预测 未来 结果 的 模型 而 模型 的 好坏 
程度 取决于 输入 的 数据 之后 我们 将 这些 数据 
传递 到 算法 中 logreg = L o g i 
s t i c R e g r e s 
s i o n logreg . fit X _ train 
y _ train score = logreg . score X _ 
train y _ train score2 = logreg . score X 
_ test y _ test print Training set accuracy % 
. 3f % score print Test set accuracy % . 
3f % score2 Training set accuracy 0.573 Test set accuracy 
0.551 我们 的 模型 子 训练 数据集 的 正确率 为 
57% 在 测试数据 集上 的 正确率 为 55% 虽然 结果 
不是 很好 但是 我们 先 继续 下 一步 接下来 我们 
建立 需要 配置 到 模型 的 数据 框 首先 我们 
加载 2018 年 4 月 FIFA 排名 数据 和 小组赛 
分组 状况 的 数据集 由于 世界杯 比赛 中 没有 主场 
和 客场 所以 我们 把 FIFA 排名 靠前 的 队伍 
作为 喜爱 的 比赛 队伍 将 他们 放到 home _ 
teams 主场 队伍 一列 然后 我们 根据 每个 队伍 的 
排名 将 他们 加入 到 新的 预测 数据 集中 下 
一步 是 创建 默认 变量 并 部署 机器学习 模型 2018 
年 4 月 FIFA 排名 数据 https / / us 
. soccerway . com / teams / rankings / fifa 
/ ICID = TN _ 03 _ 05 _ 01 
小组赛 分组 状况 的 数据集 https / / fixturedownload . 
com / results / fifa world cup 2018 # adding 
Fifa rankings # the team which is positioned higher on 
the FIFA Ranking will be considered favourite for the match 
# and therefore will be positioned under the home _ 
teams column # since there are no home or away 
teams in World Cup games . # Loading new datasets 
ranking = pd . read _ csv C / Coding 
/ FIFA2018 World cup / datasets / fifa _ rankings 
. csv fixtures = pd . read _ csv C 
/ Coding / FIFA2018 World cup / datasets / fixtures 
. csv # List for storing the group stage games 
pred _ set = # Create new columns with ranking 
position of each team fixtures . insert 1 first _ 
position fixtures Home Team . map ranking . set _ 
index Team Position fixtures . insert 2 second _ position 
fixtures Away Team . map ranking . set _ index 
Team Position # We only need the group stage games 
so we have to slice the dataset fixtures = fixtures 
. iloc 48 # Loop to add teams to new 
prediction dataset based on the ranking position of each team 
for index row in fixtures . iterrows if row first 
_ position row second _ position pred _ set . 
append { home _ team row Home Team away _ 
team row Away Team winning _ team None } else 
pred _ set . append { home _ team row 
Away Team away _ team row Home Team winning _ 
team None } pred _ set = pd . DataFrame 
pred _ set backup _ pred _ set = pred 
_ set # Get dummy variables and drop winning _ 
team column pred _ set = pd . get _ 
dummies pred _ set prefix = home _ team away 
_ team columns = home _ team away _ team 
# Add missing columns compared to the model s training 
dataset missing _ cols = set final . columns set 
pred _ set . columns for c in missing _ 
cols pred _ set c = 0 pred _ set 
= pred _ set final . columns # Remove winning 
team column pred _ set = pred _ set . 
drop winning _ team axis = 1 pred _ set 
. head 2.5 比赛结果 预测 首先 我们 将 模型 部署 
到 小组 赛中 # group matches predictions = logreg . 
predict pred _ set for i in range fixtures . 
shape 0 print backup _ pred _ set . iloc 
i 1 + and + backup _ pred _ set 
. iloc i 0 if predictions i = = 2 
print Winner + backup _ pred _ set . iloc 
i 1 elif predictions i = = 1 print Draw 
elif predictions i = = 0 print Winner + backup 
_ pred _ set . iloc i 0 print Probability 
of + backup _ pred _ set . iloc i 
1 + winning % . 3f % logreg . predict 
_ proba pred _ set i 2 print Probability of 
Draw % . 3f % logreg . predict _ proba 
pred _ set i 1 print Probability of + backup 
_ pred _ set . iloc i 0 + winning 
% . 3f % logreg . predict _ proba pred 
_ set i 0 print Russia and Saudi Arabia Winner 
Russia Probability of Russia winning 0.667 Probability of Draw 0.223 
Probability of Saudi Arabia winning 0.111 Uruguay and Egypt Winner 
Uruguay Probability of Uruguay winning 0.583 Probability of Draw 0.352 
Probability of Egypt winning 0.065 Iran and Morocco Draw Probability 
of Iran winning 0.217 Probability of Draw 0.407 Probability of 
Morocco winning 0.376 Portugal and Spain Winner Spain Probability of 
Portugal winning 0.302 Probability of Draw 0.344 Probability of Spain 
winning 0.354 France and Australia Winner France Probability of France 
winning 0.628 Probability of Draw 0.227 Probability of Australia winning 
0.145 Argentina and Iceland Winner Argentina Probability of Argentina winning 
0.803 Probability of Draw 0.161 Probability of Iceland winning 0.036 
Peru and Denmark Winner Peru Probability of Peru winning 0.439 
Probability of Draw 0.171 Probability of Denmark winning 0.391 Croatia 
and Nigeria Winner Croatia Probability of Croatia winning 0.590 Probability 
of Draw 0.258 Probability of Nigeria winning 0.152 Costa Rica 
and Serbia Winner Serbia Probability of Costa Rica winning 0.315 
Probability of Draw 0.324 Probability of Serbia winning 0.361 Germany 
and Mexico Winner Germany Probability of Germany winning 0.567 Probability 
of Draw 0.282 Probability of Mexico winning 0.150 Brazil and 
Switzerland Winner Brazil Probability of Brazil winning 0.775 Probability of 
Draw 0.138 Probability of Switzerland winning 0.087 Sweden and Korea 
Republic Winner Sweden Probability of Sweden winning 0.503 Probability of 
Draw 0.329 Probability of Korea Republic winning 0.168 Belgium and 
Panama Winner Belgium Probability of Belgium winning 0.765 Probability of 
Draw 0.145 Probability of Panama winning 0.090 England and Tunisia 
Winner England Probability of England winning 0.649 Probability of Draw 
0.292 Probability of Tunisia winning 0.059 Colombia and Japan Winner 
Colombia Probability of Colombia winning 0.511 Probability of Draw 0.210 
Probability of Japan winning 0.280 Poland and Senegal Winner Poland 
Probability of Poland winning 0.612 Probability of Draw 0.223 Probability 
of Senegal winning 0.165 Egypt and Russia Winner Russia Probability 
of Egypt winning 0.225 Probability of Draw 0.297 Probability of 
Russia winning 0.478 Portugal and Morocco Winner Portugal Probability of 
Portugal winning 0.486 Probability of Draw 0.377 Probability of Morocco 
winning 0.138 Uruguay and Saudi Arabia Winner Uruguay Probability of 
Uruguay winning 0.668 Probability of Draw 0.259 Probability of Saudi 
Arabia winning 0.073 Spain and Iran Winner Spain Probability of 
Spain winning 0.695 Probability of Draw 0.247 Probability of Iran 
winning 0.058 Denmark and Australia Winner Denmark Probability of Denmark 
winning 0.551 Probability of Draw 0.241 Probability of Australia winning 
0.207 France and Peru Winner France Probability of France winning 
0.635 Probability of Draw 0.215 Probability of Peru winning 0.150 
Argentina and Croatia Winner Argentina Probability of Argentina winning 0.599 
Probability of Draw 0.255 Probability of Croatia winning 0.146 Brazil 
and Costa Rica Winner Brazil Probability of Brazil winning 0.800 
Probability of Draw 0.147 Probability of Costa Rica winning 0.053 
Iceland and Nigeria Winner Nigeria Probability of Iceland winning 0.278 
Probability of Draw 0.248 Probability of Nigeria winning 0.474 Switzerland 
and Serbia Winner Switzerland Probability of Switzerland winning 0.402 Probability 
of Draw 0.228 Probability of Serbia winning 0.370 Belgium and 
Tunisia Winner Belgium Probability of Belgium winning 0.619 Probability of 
Draw 0.253 Probability of Tunisia winning 0.128 Mexico and Korea 
Republic Winner Mexico Probability of Mexico winning 0.504 Probability of 
Draw 0.327 Probability of Korea Republic winning 0.169 Germany and 
Sweden Winner Germany Probability of Germany winning 0.571 Probability of 
Draw 0.228 Probability of Sweden winning 0.201 England and Panama 
Winner England Probability of England winning 0.781 Probability of Draw 
0.178 Probability of Panama winning 0.041 Senegal and Japan Winner 
Senegal Probability of Senegal winning 0.397 Probability of Draw 0.278 
Probability of Japan winning 0.325 Poland and Colombia Draw Probability 
of Poland winning 0.379 Probability of Draw 0.391 Probability of 
Colombia winning 0.230 Uruguay and Russia Winner Uruguay Probability of 
Uruguay winning 0.403 Probability of Draw 0.388 Probability of Russia 
winning 0.209 Egypt and Saudi Arabia Winner Egypt Probability of 
Egypt winning 0.544 Probability of Draw 0.216 Probability of Saudi 
Arabia winning 0.240 Portugal and Iran Winner Portugal Probability of 
Portugal winning 0.548 Probability of Draw 0.353 Probability of Iran 
winning 0.099 Spain and Morocco Winner Spain Probability of Spain 
winning 0.650 Probability of Draw 0.267 Probability of Morocco winning 
0.083 France and Denmark Winner France Probability of France winning 
0.621 Probability of Draw 0.159 Probability of Denmark winning 0.220 
Peru and Australia Winner Peru Probability of Peru winning 0.463 
Probability of Draw 0.250 Probability of Australia winning 0.288 Argentina 
and Nigeria Winner Argentina Probability of Argentina winning 0.708 Probability 
of Draw 0.222 Probability of Nigeria winning 0.070 Croatia and 
Iceland Winner Croatia Probability of Croatia winning 0.734 Probability of 
Draw 0.185 Probability of Iceland winning 0.080 Mexico and Sweden 
Winner Mexico Probability of Mexico winning 0.465 Probability of Draw 
0.264 Probability of Sweden winning 0.271 Germany and Korea Republic 
Winner Germany Probability of Germany winning 0.598 Probability of Draw 
0.282 Probability of Korea Republic winning 0.120 Brazil and Serbia 
Winner Brazil Probability of Brazil winning 0.714 Probability of Draw 
0.165 Probability of Serbia winning 0.120 Switzerland and Costa Rica 
Winner Switzerland Probability of Switzerland winning 0.587 Probability of Draw 
0.213 Probability of Costa Rica winning 0.200 Poland and Japan 
Winner Poland Probability of Poland winning 0.551 Probability of Draw 
0.242 Probability of Japan winning 0.206 Colombia and Senegal Winner 
Colombia Probability of Colombia winning 0.577 Probability of Draw 0.194 
Probability of Senegal winning 0.229 Tunisia and Panama Winner Tunisia 
Probability of Tunisia winning 0.631 Probability of Draw 0.257 Probability 
of Panama winning 0.113 Belgium and England Winner England Probability 
of Belgium winning 0.273 Probability of Draw 0.235 Probability of 
England winning 0.492 之后 进行 16强 的 模拟 # List 
of tuples before group _ 16 = Uruguay Portugal France 
Croatia Brazil Mexico England Colombia Spain Russia Argentina Peru Germany 
Switzerland Poland Belgium def clean _ and _ predict matches 
ranking final logreg # Initialization of auxiliary list for data 
c l e a n i n g p o 
s i t i o n s = # Loop 
to retrieve each team s position according to FIFA rankingfor 
match in matches positions . append ranking . loc ranking 
Team = = match 0 Position . iloc 0 positions 
. append ranking . loc ranking Team = = match 
1 Position . iloc 0 # Creating the DataFrame for 
predictionpred _ set = # Initializing iterators for while loopi 
= 0j = 0 # i will be the iterator 
for the positions list and j for the list of 
matches list of tuples while i len positions dict1 = 
{ } # If position of first team is better 
he will be the home team and vice versaif positions 
i positions i + 1 dict1 . update { home 
_ team matches j 0 away _ team matches j 
1 } else dict1 . update { home _ team 
matches j 1 away _ team matches j 0 } 
# Append updated dictionary to the list that will later 
be converted into a DataFramepred _ set . append dict1 
i + = 2j + = 1 # Convert list 
into DataFramepred _ set = pd . DataFrame pred _ 
set backup _ pred _ set = pred _ set 
# Get dummy variables and drop winning _ team columnpred 
_ set = pd . get _ dummies pred _ 
set prefix = home _ team away _ team columns 
= home _ team away _ team # Add missing 
columns compared to the model s training datasetmissing _ cols2 
= set final . columns set pred _ set . 
columns for c in missing _ cols2 pred _ set 
c = 0pred _ set = pred _ set final 
. columns # Remove winning team columnpred _ set = 
pred _ set . drop winning _ team axis = 
1 # Predict predictions = logreg . predict pred _ 
set for i in range len pred _ set print 
backup _ pred _ set . iloc i 1 + 
and + backup _ pred _ set . iloc i 
0 if predictions i = = 2 print Winner + 
backup _ pred _ set . iloc i 1 elif 
predictions i = = 1 print Draw elif predictions i 
= = 0 print Winner + backup _ pred _ 
set . iloc i 0 print Probability of + backup 
_ pred _ set . iloc i 1 + winning 
% . 3f % logreg . predict _ proba pred 
_ set i 2 print Probability of Draw % . 
3f % logreg . predict _ proba pred _ set 
i 1 print Probability of + backup _ pred _ 
set . iloc i 0 + winning % . 3f 
% logreg . predict _ proba pred _ set i 
0 print clean _ and _ predict group _ 16 
ranking final logreg Portugal and Uruguay Winner Portugal Probability of 
Portugal winning 0.428 Probability of Draw 0.285 Probability of Uruguay 
winning 0.287 France and Croatia Winner France Probability of France 
winning 0.481 Probability of Draw 0.252 Probability of Croatia winning 
0.267 Brazil and Mexico Winner Brazil Probability of Brazil winning 
0.695 Probability of Draw 0.209 Probability of Mexico winning 0.096 
England and Colombia Winner England Probability of England winning 0.516 
Probability of Draw 0.368 Probability of Colombia winning 0.116 Spain 
and Russia Winner Spain Probability of Spain winning 0.529 Probability 
of Draw 0.280 Probability of Russia winning 0.191 Argentina and 
Peru Winner Argentina Probability of Argentina winning 0.713 Probability of 
Draw 0.212 Probability of Peru winning 0.075 Germany and Switzerland 
Winner Germany Probability of Germany winning 0.672 Probability of Draw 
0.192 Probability of Switzerland winning 0.137 Belgium and Poland Winner 
Belgium Probability of Belgium winning 0.513 Probability of Draw 0.202 
Probability of Poland winning 0.285 之后 依次 进行 四分之一 半决赛 
决赛 的 模拟 四分之一 # List of matches quarters = 
Portugal France Spain Argentina Brazil England Germany Belgium clean _ 
and _ predict quarters ranking final logreg Portugal and France 
Winner Portugal Probability of Portugal winning 0.437 Probability of Draw 
0.256 Probability of France winning 0.307 Argentina and Spain Winner 
Argentina Probability of Argentina winning 0.518 Probability of Draw 0.262 
Probability of Spain winning 0.220 Brazil and England Winner Brazil 
Probability of Brazil winning 0.525 Probability of Draw 0.216 Probability 
of England winning 0.260 Germany and Belgium Winner Germany Probability 
of Germany winning 0.563 Probability of Draw 0.269 Probability of 
Belgium winning 0.167 半决赛 # List of matches semi = 
Portugal Brazil Argentina Germany clean _ and _ predict semi 
ranking final logreg Brazil and Portugal Winner Brazil Probability of 
Brazil winning 0.705 Probability of Draw 0.152 Probability of Portugal 
winning 0.143 Germany and Argentina Winner Germany Probability of Germany 
winning 0.441 Probability of Draw 0.264 Probability of Argentina winning 
0.295 决赛 # Finals finals = Brazil Germany clean _ 
and _ predict finals ranking final logreg Germany and Brazil 
Winner Brazil Probability of Germany winning 0.359 Probability of Draw 
0.220 Probability of Brazil winning 0.4213 . 写 在 最后 
根据 该 模型 巴西 将 有可能 获得 本届 世界杯 的 
冠军 进一步 的 研究 和 提高 领域 为 提高 数据集 
的 质量 可以 利用 FIFA 的 比赛 数据 评估 每个 
球员 的 水平 混淆 矩阵 可以 帮助 我们 分析模型 预测 
的 哪 场 有误 我们 可以 尝试 将 多个 模型 
组合 在 一起 提高 预测 准确度 