在 现今 的 推荐 技术 和 算法 中 最 被 
大家 广泛 认可 和 采用 的 就是 基于 协同 过滤 
的 推荐 方法 本文 将带 你 深入 了解 协同 过滤 
的 秘密 下面 直接 进入 正题 1 什么 是 协同 
过滤 协同 过滤 是 利用 集体 智慧 的 一个 典型 
方法 要 理解 什么 是 协同 过滤 Collaborative Filtering 简称 
CF 首先 想 一个 简单 的 问题 如果 你 现在 
想看 个 电影 但 你 不 知道 具体 看 哪部 
你 会 怎么做 大 部分 的 人 会 问问 周围 
的 朋友 看看 最近 有 什么 好看 的 电影 推荐 
而/c 我们/r 一般/a 更/d 倾向/v 于从/nr 口味/n 比较/d 类似/v 的/uj 
朋友/n 那里/r 得到/v 推荐/v 这 就是 协同 过滤 的 核心 
思想 换句话说 就是 借鉴 和你/nr 相关 人群 的 观点 来 
进行 推荐 很好 理解 2 协同 过滤 的 实现 要 
实现 协同 过滤 的 推荐算法 要 进行 以下 三 个 
步骤 收集 数据 找到 相似 用户 和 物品 进行 推荐 
收集 数据 这里 的 数据 指 的 都是 用户 的 
历史 行为 数据 比如 用户 的 购买 历史 关注 收藏 
行为 或者 发表 了 某些 评论 给 某个 物品 打 
了 多少 分 等等 这些 都 可以 用来 作为 数据 
供 推荐算法 使用 服务于 推荐算法 需要 特别 指出 的 在于 
不同 的 数据 准确性 不同 粒度 也 不同 在 使用 
时 需要 考虑 到 噪音 所 带来 的 影响 找到 
相似 用户 和 物品 这一步 也 很简单 其实 就是 计算 
用户 间 以及 物品 间 的 相似 度 以下 是 
几种 计算 相似 度 的 方法 欧几里德 距离 皮尔逊 相关系数 
Cosine 相似 度 Tanimoto 系数 进行 推荐 在 知道 了 
如何 计算 相似 度 后 就 可以 进行 推荐 了 
在 协同 过滤 中 有 两种 主流 方法 基于 用户 
的 协同 过滤 和 基于 物品 的 协同 过滤 具体 
怎么 来 阐述 他们 的 原理 呢 看 个 图 
大家 就 明白 了 基于 用户 的 CF 的 基本 
思想 相当 简单 基于 用户 对 物品 的 偏好 找到 
相邻 邻居 用户 然后 将 邻居 用户 喜欢 的 推荐 
给 当前 用户 计 算上 就是 将 一个 用户 对 
所有 物品 的 偏好 作为 一个 向量 来 计算 用户 
之间 的 相似 度 找到 K 邻居 后 根据 邻居 
的 相似 度 权重 以及 他们 对 物品 的 偏好 
预测 当前 用户 没有 偏好 的 未 涉及 物品 计算 
得到 一个 排序 的 物品 列表 作为 推荐 下图 给出 
了 一个 例子 对于 用户 A 根据 用户 的 历史 
偏好 这里 只 计算 得到 一个 邻居 用户 C 然后 
将 用户 C 喜欢 的 物品 D 推荐 给 用户 
A 基于 物品 的 CF 的 原理 和 基于 用户 
的 CF 类似 只是 在 计算 邻居 时 采用 物品 
本身 而 不是 从 用户 的 角度 即 基于 用户 
对 物品 的 偏好 找到 相似 的 物品 然后 根据 
用户 的 历史 偏好 推荐 相似 的 物品 给 他 
从 计算 的 角度 看 就是 将 所有 用户 对 
某个 物品 的 偏好 作为 一个 向量 来 计算 物品 
之间 的 相似 度 得到 物品 的 相似 物品 后 
根据 用户 历史 的 偏好 预测 当前 用户 还 没有 
表示 偏好 的 物品 计算 得到 一个 排序 的 物品 
列表 作为 推荐 下图 给出 了 一个 例子 对于 物品 
A 根据 所有 用户 的 历史 偏好 喜欢 物品 A 
的 用户 都 喜欢 物品 C 得出 物品 A 和 
物品 C 比较 相似 而 用户 C 喜欢 物品 A 
那么 可以 推断 出 用户 C 可能 也 喜欢 物品 
C 总结/n 以上/f 两个/m 方法/n 都能/nr 很好/i 的/uj 给出/v 推荐/v 
并 可以 达到 不错 的 效果 但是 他们 之间 还是 
有 不同 之处 的 而且 适用性 也 有区别 下面 进行 
一下 对比 计算 复杂度 Item CF 和 User CF 是 
基于 协同 过滤 推荐 的 两个 最 基本 的 算法 
User CF 是 很早以前 就 提 出来 了 Item CF 
是从 Amazon 的 论文 和 专利 发表 之后 2001 年 
左右 开始 流行 大家 都 觉得 Item CF 从/p 性能/n 
和/c 复杂/a 度上/i 比/p User CF 更优 其中 的 一个 
主要 原因 就是 对于 一个 在线 网站 用户 的 数量 
往往 大大 超过 物品 的 数量 同时 物品 的 数据 
相对 稳定 因此 计算 物品 的 相似 度 不但 计算 
量 较小 同时 也 不必 频繁 更新 但 我们 往往 
忽略 了 这种 情况 只 适应 于 提供 商品 的 
电子 商务 网站 对于 新闻 博客 或者 微 内容 的 
推荐 系统 情况 往往 是 相反 的 物品 的 数量 
是 海量 的 同时 也 是 更新 频繁 的 所以 
单从 复杂度 的 角度 这 两个 算法 在 不同 的 
系统 中 各 有优势 推荐 引擎 的 设计 者 需要 
根据 自己 应用 的 特点 选择 更加 合适 的 算法 
适用 场景 在 非 社交 网络 的 网站 中 内容 
内在 的 联系 是 很 重要 的 推荐 原则 它 
比 基于 相似 用户 的 推荐 原则 更加 有效 比如 
在 购书 网站 上 当 你 看 一 本书 的 
时候 推荐 引擎 会给 你 推荐 相关 的 书籍 这个 
推荐 的 重要性 远远 超过 了 网站 首页 对 该 
用户 的 综合 推荐 可以 看到 在 这种 情况 下 
Item CF 的 推荐 成为 了 引导 用户 浏览 的 
重要 手段 同时 Item CF 便于 为 推荐 做出 解释 
在 一个 非 社交 网络 的 网站 中 给 某个 
用户 推荐 一 本书 同时/c 给出/v 的/uj 解释/v 是/v 某某/r 
和你有/nr 相似/v 兴趣/n 的/uj 人也/i 看了/i 这本书/i 这 很难 让 
用户 信服 因为 用户 可能 根本 不 认识 那个人 但 
如果 解释 说 是因为 这 本书 和你/nr 以前 看 的 
某 本书 相似 用户 可能 就 觉得 合理 而 采纳 
了此 推荐 相反 的 在 现今 很 流行 的 社交 
网络 站点 中 User CF 是 一个 更 不错 的 
选择 User CF 加上 社会 网络 信息 可以 增加 用户 
对 推荐 解释 的 信服 程度 希望 上面 的 内容 
对 大家 有所 帮助 如果 想看 更 详细 的 说明 
请 参见 http / / www . ibm . com 
/ developerworks / cn / web / 1103 _ zhaoct 
_ recommstudy2 / index . html 