python3 验证码 机器学习 文档 结构 为 iconset . . . 
jpg captcha . gif py crack . py 需要 的 
库 pip3 install pillow or easy _ install Pillow 必须 
文件 下载 地址 python3 验证码 机器学习 1 . 读取 图片 
打印 图片 的 结构 直方图 # / usr / bin 
/ python3 . 4 # * coding utf 8 * 
# From https / / zhuanlan . zhihu . com 
/ p / 24222942 # 该 知乎 栏目 为 py2 
编写 这里 改造 成 py3 im = Image . open 
. . / jpg / captcha . gif his = 
im . histogram 打印 结果 为 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 1 
0 0 2 0 0 0 0 1 0 0 
0 0 0 2 1 0 0 0 0 0 
0 0 0 0 0 1 0 0 0 0 
1 0 0 0 0 0 0 2 1 0 
0 0 2 0 0 0 0 1 0 1 
1 0 0 1 0 2 0 0 0 0 
0 0 0 0 0 0 0 1 2 0 
0 0 1 2 0 1 0 0 1 0 
2 0 0 1 0 0 2 0 0 0 
0 0 0 0 0 1 0 1 0 1 
0 3 1 3 3 0 0 0 0 0 
0 1 0 3 2 132 1 1 0 0 
0 1 2 0 0 0 0 0 0 0 
15 0 1 0 1 0 0 8 1 0 
0 0 0 1 6 0 2 0 0 0 
0 18 1 1 1 1 1 2 365 115 
0 1 0 0 0 135 186 0 0 1 
0 0 0 116 3 0 0 0 0 0 
21 1 1 0 0 0 2 10 2 0 
0 0 0 2 10 0 0 0 0 1 
0 625 该 数组 长度 为 255 每 一个 元素 
代表 0 255 颜色 的 多少 例如 最后 一个 元素 
为 625 即 255 代表 的 是 白色 最多 组合 
在 一起 values = { } for i in range 
0 256 values i = his i # 排序 x 
x 1 是 按照 括号 内 第二 个 字段 进行 
排序 x x 0 是 按照 第一 个 字段 temp 
= sorted values . items key = lambda x x 
1 reverse = True # print temp 打印 结果 为 
255 625 212 365 220 186 219 135 169 132 
227 116 213 115 234 21 205 18 184 15 
241 10 248 10 191 8 198 6 155 3 
157 3 158 3 167 3 228 3 56 2 
67 2 91 2 96 2 109 2 122 2 
127 2 134 2 140 2 168 2 176 2 
200 2 211 2 240 2 242 2 247 2 
43 1 44 1 53 1 61 1 68 1 
79 1 84 1 92 1 101 1 103 1 
104 1 107 1 121 1 126 1 129 1 
132 1 137 1 149 1 151 1 153 1 
156 1 165 1 170 1 171 1 175 1 
186 1 188 1 192 1 197 1 206 1 
207 1 208 1 209 1 210 1 215 1 
223 1 235 1 236 1 253 1 0 0 
1 0 2 0 3 0 4 0 5 0 
6 0 7 0 8 0 9 0 10 0 
11 0 12 0 13 0 14 0 15 0 
16 0 17 0 18 0 19 0 20 0 
21 0 22 0 23 0 24 0 25 0 
26 0 27 0 28 0 29 0 30 0 
31 0 32 0 33 0 34 0 35 0 
36 0 37 0 38 0 39 0 40 0 
41 0 42 0 45 0 46 0 47 0 
48 0 49 0 50 0 51 0 52 0 
54 0 55 0 57 0 58 0 59 0 
60 0 62 0 63 0 64 0 65 0 
66 0 69 0 70 0 71 0 72 0 
73 0 74 0 75 0 76 0 77 0 
78 0 80 0 81 0 82 0 83 0 
85 0 86 0 87 0 88 0 89 0 
90 0 93 0 94 0 95 0 97 0 
98 0 99 0 100 0 102 0 105 0 
106 0 108 0 110 0 111 0 112 0 
113 0 114 0 115 0 116 0 117 0 
118 0 119 0 120 0 123 0 124 0 
125 0 128 0 130 0 131 0 133 0 
135 0 136 0 138 0 139 0 141 0 
142 0 143 0 144 0 145 0 146 0 
147 0 148 0 150 0 152 0 154 0 
159 0 160 0 161 0 162 0 163 0 
164 0 166 0 172 0 173 0 174 0 
177 0 178 0 179 0 180 0 181 0 
182 0 183 0 185 0 187 0 189 0 
190 0 193 0 194 0 195 0 196 0 
199 0 201 0 202 0 203 0 204 0 
214 0 216 0 217 0 218 0 221 0 
222 0 224 0 225 0 226 0 229 0 
230 0 231 0 232 0 233 0 237 0 
238 0 239 0 243 0 244 0 245 0 
246 0 249 0 250 0 251 0 252 0 
254 0 将 占 比 最多 的 10个 颜色 筛选 
出来 # 占 比 最多 的 10 种颜色 # for 
j k in temp 10 # print j k # 
255 625 # 212 365 # 220 186 # 219 
135 # 169 132 # 227 116 # 213 115 
# 234 21 # 205 18 # 184 152 . 
构造 新的 无杂质 图片 生成 一张 白底 啥 都 没有 
的 图片 # 获取 图片大小 生成 一张 白底 255 的 
图片 im2 = Image . new P im . size 
255 # print im2 . size 1 # 84 22 
原作者/n 自己/r 观察/v 得到/v 代表/n 数字/n 的/uj 颜色/n 为/p 220/m 
灰色/n 和/c 227/m 红色/n 将/d 这些/r 颜色/n 根据/p 宽和/i 高的/nr 
坐标/v 以此/c 写入/v 新/a 生成/v 的/uj 白底/t 照片/n 中/f #/i 
84 22 = 宽 高 = size 0 size 1 
# 获得 y 坐标 for y in range im . 
size 1 # 获得 y 坐标 for x in range 
im . size 0 # 获得 坐标 x y 的 
RGB 值 pix = im . getpixel x y # 
这些 是 要 得到 的 数字 # 220 灰色 227 
红色 if pix = = 220 or pix = = 
227 # 将 黑色 0 填 充到 im2 中 im2 
. putpixel x y 0 # 生成 了 一张 黑白 
二 值 照片 # im2 . show 黑 白二 值 
照片 3 . 切割 图片 x 代表 图片 的 宽 
y 代表 图片 的 高对 图片 进行 纵向 切割 # 
纵向 切割 # 找到 切割 的 起始 和 结束 的 
横坐标 inletter = False foundletter = False start = 0 
end = 0 letters = for x in range im2 
. size 0 for y in range im2 . size 
1 pix = im2 . getpixel x y if pix 
= 255 inletter = True if foundletter = = False 
and inletter = = True foundletter = True start = 
x if foundletter = = True and inletter = = 
False foundletter = False end = x letters . append 
start end inletter = False 打印 结果 为 # 6 
14 15 25 27 35 37 46 48 56 57 
67 6 14 代表/n 从x=/nr 6/m 到/v x/w =/i 14/m 
纵向/v 切割/v 成/n 一条/m 状/ng 保存/v 字段/n 到/v 本地/r 观察/v 
这一步 没有 什么 用 只是 保存 下来 看看 而已 # 
保存 切割 下来 的 字段 import time count = 0 
for letter in letters # 切割 的 起始 横坐标 起始 
纵坐标 切割 的 宽度 切割 的 高度 im3 = im2 
. crop letter 0 0 letter 1 im2 . size 
1 # 更改 成用/nr 时间 命名 # im3 . save 
. . / jpg / % s . gif % 
time . strftime % Y % m % d % 
H % M % time . localtime count + = 
1 # 可以 看到 保存 下来 的 6个 字段 字段 
样式 4 . 训练 识别 使用 的 是 AI 与 
向量空间 图像识别 将 标准 图片 转换成 向量 坐标 a 需要 
识别 的 图片 字 段为 向量 坐标 b cos a 
b 值 越大 说明 夹角 越小 越 接近 重合 空间 
两 向量 计算公式 编写 的 夹角公式 为 # 夹角公式 import 
math class VectorCompare # 计算 矢量 大小 # 计算 平方和 
def magnitude self concordance total = 0 # concordance . 
iteritems 报错 dict object has no attribute iteritems # concordance 
. items for word count in concordance . items total 
+ = count * * 2 return math . sqrt 
total # 计算 矢量 之间 的 cos 值 def relation 
self concordance1 concordance2 topvalue = 0 # concordance1 . iteritems 
报错 dict object has no attribute iteritems # concordance1 . 
items for word count in concordance1 . items # if 
concordance2 . has _ key word 报错 dict object has 
no attribute has _ key # 改成 word in concordance2 
if word in concordance2 # 计算 相乘 的 和 topvalue 
+ = count * concordance2 word return topvalue / self 
. magnitude concordance1 * self . magnitude concordance2 转换 验证码 
图片 为 向量 # 将 图片 转 换为 矢量 def 
buildvector im d1 = { } count = 0 for 
i in im . getdata d1 count = i count 
+ = 1 return d1 打印 结果 { 0 255 
1 255 2 255 3 255 4 255 5 255 
6 255 7 255 8 255 9 255 10 255 
11 255 12 255 13 255 14 255 15 255 
16 255 17 255 18 255 19 255 20 255 
21 255 22 255 23 255 24 255 25 255 
26 255 27 255 28 255 29 255 30 255 
31 255 32 255 33 255 34 255 35 255 
36 255 37 255 38 255 39 255 40 255 
41 255 42 255 43 255 44 255 45 255 
46 255 47 255 48 255 49 255 50 255 
51 255 52 255 53 255 54 255 55 255 
56 255 57 255 58 255 59 255 60 255 
61 255 62 255 63 255 64 255 65 255 
66 255 67 0 68 0 69 0 70 255 
71 255 72 255 73 255 74 0 75 0 
76 0 77 255 78 0 79 255 80 255 
81 0 82 0 83 0 84 0 85 0 
86 0 87 255 88 255 89 0 90 255 
91 255 92 255 93 0 94 0 95 255 
96 0 97 255 98 0 99 255 100 255 
101 0 102 0 103 0 104 0 105 0 
106 0 107 255 108 255 109 0 110 0 
111 0 112 0 113 0 114 255 115 255 
116 255 117 0 118 0 119 0 120 255 
121 0 122 255 123 255 124 255 125 0 
126 0 127 0 128 255 129 0 130 0 
131 255 132 255 133 0 134 0 135 0 
136 255 137 0 138 0 139 0 140 0 
141 0 142 0 143 255 144 255 145 0 
146 0 147 0 148 0 149 0 150 0 
151 255 152 255 153 255 154 255 155 0 
156 0 157 0 158 255 159 255 160 255 
161 255 162 255 163 255 164 255 165 255 
166 255 167 255 168 255 169 255 170 255 
171 255 172 255 173 255 174 255 175 255 
} 加载 训练 集 且 把 训练 集 也 变成 
向量 v = VectorCompare iconset = 0 1 2 3 
4 5 6 7 8 9 0 a b c 
d e f g h i j k l m 
n o p q r s t u v w 
x y z import os imageset = for letter in 
iconset for img in os . listdir . . / 
iconset / % s / % letter temp = if 
img = Thumbs . db and img = . DS 
_ Store temp . append buildvector Image . open . 
. / iconset / % s / % s % 
letter img imageset . append { letter temp } * 
* 开始 识别 验证码 * * # 开始 破解 训练 
count = 0 for letter in letters # 切割 的 
起始 横坐标 起始 纵坐标 切割 的 宽度 切割 的 高度 
im3 = im2 . crop letter 0 0 letter 1 
im2 . size 1 guess = # 将 切割 得到 
的 验证码 小 片段 与 每个 训练 片段 进行 比较 
for image in imageset # image . iteritems 报错 dict 
object has no attribute iteritems # 改成 image . items 
for x y in image . items if len y 
= 0 guess . append v . relation y 0 
buildvector im3 x 其中 y 0 为 训练 集 里面 
的 字母 图片 即 正确 的 图片 打印 { 0 
255 1 255 2 255 3 255 4 255 5 
255 6 255 7 255 8 255 9 255 10 
255 11 255 12 255 13 255 14 255 15 
255 16 255 17 255 18 255 19 255 20 
255 21 255 22 255 23 255 24 255 25 
255 26 255 27 255 28 255 29 255 30 
255 31 255 32 255 33 255 34 255 35 
255 36 255 37 255 38 255 39 255 40 
255 41 255 42 255 43 255 44 255 45 
255 46 255 47 255 48 255 49 255 50 
255 51 255 52 255 53 255 54 255 55 
255 56 255 57 255 58 255 59 255 60 
255 61 255 62 255 63 255 64 255 65 
255 66 255 67 0 68 0 69 0 70 
255 71 255 72 255 73 255 74 0 75 
0 76 0 77 255 78 0 79 255 80 
255 81 0 82 0 83 0 84 0 85 
0 86 0 87 255 88 255 89 0 90 
255 91 255 92 255 93 0 94 0 95 
255 96 0 97 255 98 0 99 255 100 
255 101 0 102 0 103 0 104 0 105 
0 106 0 107 255 108 255 109 0 110 
0 111 0 112 0 113 0 114 255 115 
255 116 255 117 0 118 0 119 0 120 
255 121 0 122 255 123 255 124 255 125 
0 126 0 127 0 128 255 129 0 130 
0 131 255 132 255 133 0 134 0 135 
0 136 255 137 0 138 0 139 0 140 
0 141 0 142 0 143 255 144 255 145 
0 146 0 147 0 148 0 149 0 150 
0 151 255 152 255 153 255 154 255 155 
0 156 0 157 0 158 255 159 255 160 
255 161 255 162 255 163 255 164 255 165 
255 166 255 167 255 168 255 169 255 170 
255 171 255 172 255 173 255 174 255 175 
255 } buildvector im3 为 切割 出来 的 字母 切片 
用来 和y/nr 0 进行 夹角 比对 打印 { 0 255 
1 255 2 255 3 255 4 255 5 255 
6 255 7 255 8 255 9 255 10 255 
11 255 12 255 13 255 14 255 15 255 
16 255 17 255 18 255 19 255 20 255 
21 255 22 255 23 255 24 255 25 255 
26 255 27 255 28 255 29 255 30 255 
31 255 32 255 33 255 34 255 35 255 
36 255 37 255 38 255 39 255 40 255 
41 255 42 255 43 255 44 255 45 255 
46 255 47 255 48 255 49 255 50 255 
51 255 52 255 53 255 54 255 55 255 
56 255 57 255 58 255 59 255 60 255 
61 255 62 255 63 255 64 255 65 0 
66 0 67 0 68 0 69 0 70 0 
71 255 72 0 73 0 74 0 75 0 
76 0 77 0 78 0 79 0 80 255 
81 0 82 0 83 0 84 0 85 0 
86 0 87 0 88 255 89 255 90 255 
91 255 92 255 93 255 94 0 95 255 
96 255 97 255 98 255 99 255 100 255 
101 0 102 0 103 255 104 255 105 255 
106 255 107 255 108 255 109 255 110 0 
111 255 112 255 113 255 114 255 115 255 
116 0 117 0 118 255 119 255 120 255 
121 255 122 255 123 255 124 0 125 0 
126 255 127 255 128 255 129 255 130 255 
131 0 132 0 133 0 134 255 135 255 
136 255 137 255 138 255 139 0 140 0 
141 255 142 255 143 255 144 255 145 255 
146 0 147 0 148 0 149 255 150 255 
151 255 152 255 153 255 154 255 155 255 
156 0 157 255 158 255 159 255 160 255 
161 255 162 255 163 255 164 255 165 255 
166 255 167 255 168 255 169 255 170 255 
171 255 172 255 173 255 174 255 175 255 
} x 为 iconset x 打印 依次 显示 为 0 
1 2 3 x y z 排序 选出 夹角 最小 
的 即 cos 值 最大 的 向量 夹角/n 越/d 小则/n 
越/d 接近/v 重合/vn 匹配 越 接近 guess . sort reverse 
= True print guess 0 count + = 1 运行 
结果 0 . 9637681159420289 7 0.96234028545977 s 0 . 9286884286888929 
9 0 . 9835037060984447 t 0 . 9675116507250627 9 0 
. 9698971168877263 j 完整 源码 在 TTyb 