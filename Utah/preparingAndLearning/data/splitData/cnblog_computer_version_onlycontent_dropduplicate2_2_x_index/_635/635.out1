背景 在 实际 项目 中 利用 深度 学习 在 检测 
道路 车辆 并 分析 车辆 行 为时 需要 按照 事先 
规定 的 方法 绘制 检测 区 包含 道路 方向 车道 
区域 等 由于 各种 原因 人为 天气 获取 视频 数据 
的 摄像 角度 容易 偏移 原来 设定 的 位置 造成 
检测 区域 和 实际 画面 不 匹配 系统 容易 产生 
误检 误报 等 错误 数据 因此 需要 在 摄像机 位置 
偏移 第一 时间 告诉 系统 检测 模块 停止 工作 直到 
摄像机 归位 后再 进行 检测 摄像机 角度 偏移 告警 属于 
视频 诊断 中的 一类 本文 利用 提取 图片 特征点 实现 
摄像机 偏移 告警 demo 全部 python 代码 不足 200行 前面 
有 几篇 博客 文字 太少 发不 了 首页 AI 分享 
零/m 高数/nr 理解/v 人工智能/n 和/c 深度/ns 学习/v AI 开发 基于 
深度 学习 的 卡口 车型 车牌 识别 这里 是 AI 
+ 计算机 视觉 的 所有 文章 需要 的 朋友 可以 
点 一 波 关注 或者 收藏 一下 图像 特征点 对于 
任何 一张 二维 图片 从 像素 级别 上看 都 存在 
一些 我们 肉眼 看不到 的 比较 独特 的 像素 单元 
可以 理解 为 像素 块 就像 我们 每个人 的 脸 
都会 与众不同 一样 我们 称 这些 具有 特点 的 像素 
区域 为 图像 特征点 已经 有 非常 成熟 的 算法 
来 提取 图片 的 特征点 1 Harris 用于 检测 角 
点 2 SIFT 用于 检测 斑点 3 SURF 用于 检测 
斑点 4 FAST 用于 检测 角 点 5 BRIEF 用于 
检测 斑点 6 ORB 表示 带 方向 的 FAST 算法 
与 具有 旋转 不变性 的 BRIEF 算法 详细 算法 原理 
上网 搜 一下 我 也 不是 很 清楚 OpenCV 中 
包含 以上 几种 算法 实现 角 点 图像 中 涉及 
到 拐角 的 区域 比如 物体 有 轮廓 图像 中 
的 物体 有边缘 区分 斑点 一块 有 特别 规律 的 
像素 区域 方向 尺寸 不变性 指 特征点 不会 受 图片尺寸 
旋转 而 改变 比 如同 一张 图 你 缩小 一倍 
旋转 90度 后 特征点 还是 一样 的 图像匹配 提取 两张 
图片 的 特征点 然后 将 这些 特征 点 进行 匹配 
关联 如果 匹配 程度 满足 某一 阈值 则 认为 这 
两张 图 满足 匹配 条件 注意 对于 同 一个 物体 
拍摄 角度 不同 亮度 不同 都 应该 满足 匹配 条件 
可以 看到 对于 同 一个 场景 的 不同 拍摄 角度 
的 两张 图片 能 找到 匹 配到 的 特征点 但是 
误差 非常大 我们 设置 一个 阈值 满足 该 条件 才 
认为 两个 点 匹配 误差 少 很多 了 匹 配到 
的 特征点 也 非常 正确 换 一组 摄像机 的 照片 
前一 张和 后 一张 在 拍摄 时 摄像机 角度 往 
左下角 有 偏移 所以 对应 匹 配到 的 特征点 往 
右上方 移动 了 我们 可以 看到 虽然 拍摄 角度 不同 
但是 由于 场景 类似 仍然 能 匹配 到 特征点 为了 
减少 绘图 方便 看清楚 阈值 设置 非常 严格 如果 放宽 
一点 还 能 看到 更 多匹 配到 的 点 而且 
这些 匹 配到 的 点 几乎 都 正确 对于 两张 
完全 不同 的 场景 照片 匹 配到 的 特征 点 
非常 少 或者 为零 具体 看 设置 的 阈值 场景 
不同 匹 配到 的 特征点 只有 视频 上 的 文字 
角度 偏移 告警 如果 摄像机 位置 不变 前后 拍摄 两张 
照片 那么 这 两张 照片 匹 配到 的 特征点 的 
二维 物理 坐标 应该 是 一样 的 可能 有 轻微 
偏移 两张 照片 尺寸 一致 那么 我们 可以 根据 摄像机 
前后 两 帧 或 间隔 时间 内 取得 的 两 
帧 的 匹配 点 物理 位置 是否 有 偏移 设置 
一个 偏移 阈值 大于 该 阈值 时则/nr 认为 偏移 否 
则 认为 没 偏移 或 轻微 偏移 当然 如果 两 
帧 匹 配到 的 特征 点 非常 少 低于 一个 
阈值 那么 我们 认为 这 俩 帧 完全 不 一样 
了 场景 不 一样 了 这时候 摄像机 完全 偏移 了 
原来 的 角度 注意 点 1 阈值 非常 重要 2 
前后 帧 匹配 时 要 去掉 类似 摄像机 自动 加上去 
的 视频 位置 当前 时间 等等 区域 因为 这些 区域 
很多 时候 能够 匹 配到 特征点 并且 物理 位置 坐标 
不会 发生 变化 造成 误差 3 在 计算 特征点 物理 
位置 偏移量 时 取 所有 特征点 物理 位置 偏移 的 
平均值 最终 效果 间隔 时间 取 视频 中的 帧 进行 
特征点 对比 根据 前面 的 思路 分为 4个 等级 无 
偏移 轻度 偏移 抖动 严重 偏移 完全 偏移 源代码 最 
重要 的 是 代码 很 简单 直接 贴上来 即可 加 
起来 不到 160行 测试 很多 场景 效果 都 不错 1 
2 视频 帧 匹配 脚本 3 4 import numpy as 
np 5 import cv2 6 7 # 至少 10个 点 
匹配 8 MIN _ MATCH _ COUNT = 10 9 
# 完全 匹配 偏移 d 4 10 BEST _ DISTANCE 
= 4 11 # 微量 偏移 4 d 10 12 
GOOD _ DISTANCE = 10 13 14 15 # 特征点 
提取 方法 内置 很多 种 16 algorithms _ all = 
{ 17 SIFT cv2 . xfeatures2d . SIFT _ create 
18 SURF cv2 . xfeatures2d . SURF _ create 8000 
19 ORB cv2 . ORB _ create 20 } 21 
22 23 # 图像匹配 24 # 0 完全 不 匹配 
1 场景 匹配 2 角度 轻微 偏移 3 完全 匹配 
25 26 def match2frames image1 image2 27 img1 = cv2 
. cvtColor image1 cv2 . COLOR _ BGR2GRAY 28 img2 
= cv2 . cvtColor image2 cv2 . COLOR _ BGR2GRAY 
29 30 size1 = img1 . shape 31 size2 = 
img2 . shape 32 33 img1 = cv2 . resize 
img1 int size1 1 * 0.3 int size1 0 * 
0.3 cv2 . INTER _ LINEAR 34 img2 = cv2 
. resize img2 int size2 1 * 0.3 int size2 
0 * 0.3 cv2 . INTER _ LINEAR 35 36 
sift = algorithms _ all SIFT 37 38 kp1 des1 
= sift . detectAndCompute img1 None 39 kp2 des2 = 
sift . detectAndCompute img2 None 40 41 FLANN _ INDEX 
_ KDTREE = 0 42 index _ params = dict 
algorithm = FLANN _ INDEX _ KDTREE trees = 5 
43 search _ params = dict checks = 50 44 
45 flann = cv2 . F l a n n 
B a s e d M a t c h 
e r index _ params search _ params 46 47 
matches = flann . knnMatch des1 des2 k = 2 
48 49 # 过滤 50 good = 51 for m 
n in matches 52 if m . distance 0.7 * 
n . distance 53 good . append m 54 55 
if len good = MIN _ MATCH _ COUNT 56 
return 0 # 完全 不 匹配 57 else 58 distance 
_ sum = 0 # 特征点 2d 物理 坐标 偏移 
总和 59 for m in good 60 distance _ sum 
+ = get _ distance kp1 m . queryIdx . 
pt kp2 m . trainIdx . pt 61 distance = 
distance _ sum / len good # 单个 特征点 2D 
物理 位置 平均 偏移量 62 63 if distance BEST _ 
DISTANCE 64 return 3 # 完全 匹配 65 elif distance 
GOOD _ DISTANCE and distance = BEST _ DISTANCE 66 
return 2 # 部分 偏移 67 else 68 return 1 
# 场景 匹配 69 70 71 72 计算 2D 物理 
距离 73 74 def get _ distance p1 p2 75 
x1 y1 = p1 76 x2 y2 = p2 77 
return np . sqrt x1 x2 * * 2 + 
y1 y2 * * 2 78 79 80 if _ 
_ name _ _ = = _ _ main _ 
_ 81 pass 测试 1 2 摄像机 角度 偏移 告警 
3 4 import cv2 5 import do _ match 6 
import numpy as np 7 from PIL import Image ImageDraw 
ImageFont 8 9 10 告警信息 11 12 def putText frame 
text 13 cv2 _ im = cv2 . cvtColor frame 
cv2 . COLOR _ BGR2RGB 14 pil _ im = 
Image . fromarray cv2 _ im 15 16 draw = 
ImageDraw . Draw pil _ im 17 font = ImageFont 
. truetype fonts / msyh . ttc 30 encoding = 
utf 8 18 draw . text 50 50 text 0 
255 255 font = font 19 20 cv2 _ text 
_ im = cv2 . cvtColor np . array pil 
_ im cv2 . COLOR _ RGB2BGR 21 22 return 
cv2 _ text _ im 23 24 25 26 27 
texts = 完全 偏移 严重 偏移 轻微 偏移 无 偏移 
28 29 cap = cv2 . VideoCapture videos / test4 
_ new . mp4 30 31 if cap . isOpened 
= = False 32 print Error opening video stream or 
file 33 34 first _ frame = True 35 pre 
_ frame = 0 36 37 index = 0 38 
39 while cap . isOpened 40 ret frame = cap 
. read 41 if ret = = True 42 if 
first _ frame 43 pre _ frame = frame 44 
first _ frame = False 45 continue 46 47 index 
+ = 1 48 if index % 24 = = 
0 49 result = do _ match . match2frames pre 
_ frame frame 50 print 检测 结果 = = = 
texts result 51 52 if result 1 # 缓存 最近 
无 偏移 的 帧 53 pre _ frame = frame 
54 55 size = frame . shape 56 57 if 
size 1 720 # 缩小 显示 58 frame = cv2 
. resize frame int size 1 * 0.5 int size 
0 * 0.5 cv2 . INTER _ LINEAR 59 60 
text _ frame = putText frame texts result 61 62 
cv2 . imshow Frame text _ frame 63 if cv2 
. waitKey 1 & 0xFF = = ord q 64 
break 65 else 66 break 67 68 cap . release 
69 cv2 . d e s t r o y 
A l l W i n d o w s 
背景 在 实际 项目 中 利用 深度 学习 在 检测 
道路 车辆 并 分析 车辆 行 为时 需要 按照 事先 
规定 的 方法 绘制 检测 区 包含 道路 方向 车道 
区域 等 由于 各种 原因 人为 天气 获取 视频 数据 
的 摄像 角度 容易 偏移 原来 设定 的 位置 造成 
检测 区域 和 实际 画面 不 匹配 系统 容易 产生 
误检 误报 等 错误 数据 因此 需要 在 摄像机 位置 
偏移 第一 时间 告诉 系统 检测 模块 停止 工作 直到 
摄像机 归位 后再 进行 检测 摄像机 角度 偏移 告警 属于 
视频 诊断 中的 一类 本文 利用 提取 图片 特征点 实现 
摄像机 偏移 告警 demo 全部 python 代码 不足 200行 前面 
有 几篇 博客 文字 太少 发不 了 首页 AI 分享 
零/m 高数/nr 理解/v 人工智能/n 和/c 深度/ns 学习/v AI 开发 基于 
深度 学习 的 卡口 车型 车牌 识别 这里 是 AI 
+ 计算机 视觉 的 所有 文章 需要 的 朋友 可以 
点 一 波 关注 或者 收藏 一下 图像 特征点 对于 
任何 一张 二维 图片 从 像素 级别 上看 都 存在 
一些 我们 肉眼 看不到 的 比较 独特 的 像素 单元 
可以 理解 为 像素 块 就像 我们 每个人 的 脸 
都会 与众不同 一样 我们 称 这些 具有 特点 的 像素 
区域 为 图像 特征点 已经 有 非常 成熟 的 算法 
来 提取 图片 的 特征点 1 Harris 用于 检测 角 
点 2 SIFT 用于 检测 斑点 3 SURF 用于 检测 
斑点 4 FAST 用于 检测 角 点 5 BRIEF 用于 
检测 斑点 6 ORB 表示 带 方向 的 FAST 算法 
与 具有 旋转 不变性 的 BRIEF 算法 详细 算法 原理 
上网 搜 一下 我 也 不是 很 清楚 OpenCV 中 
包含 以上 几种 算法 实现 角 点 图像 中 涉及 
到 拐角 的 区域 比如 物体 有 轮廓 图像 中 
的 物体 有边缘 区分 斑点 一块 有 特别 规律 的 
像素 区域 方向 尺寸 不变性 指 特征点 不会 受 图片尺寸 
旋转 而 改变 比 如同 一张 图 你 缩小 一倍 
旋转 90度 后 特征点 还是 一样 的 图像匹配 提取 两张 
图片 的 特征点 然后 将 这些 特征 点 进行 匹配 
关联 如果 匹配 程度 满足 某一 阈值 则 认为 这 
两张 图 满足 匹配 条件 注意 对于 同 一个 物体 
拍摄 角度 不同 亮度 不同 都 应该 满足 匹配 条件 
可以 看到 对于 同 一个 场景 的 不同 拍摄 角度 
的 两张 图片 能 找到 匹 配到 的 特征点 但是 
误差 非常大 我们 设置 一个 阈值 满足 该 条件 才 
认为 两个 点 匹配 误差 少 很多 了 匹 配到 
的 特征点 也 非常 正确 换 一组 摄像机 的 照片 
前一 张和 后 一张 在 拍摄 时 摄像机 角度 往 
左下角 有 偏移 所以 对应 匹 配到 的 特征点 往 
右上方 移动 了 我们 可以 看到 虽然 拍摄 角度 不同 
但是 由于 场景 类似 仍然 能 匹配 到 特征点 为了 
减少 绘图 方便 看清楚 阈值 设置 非常 严格 如果 放宽 
一点 还 能 看到 更 多匹 配到 的 点 而且 
这些 匹 配到 的 点 几乎 都 正确 对于 两张 
完全 不同 的 场景 照片 匹 配到 的 特征 点 
非常 少 或者 为零 具体 看 设置 的 阈值 场景 
不同 匹 配到 的 特征点 只有 视频 上 的 文字 
角度 偏移 告警 如果 摄像机 位置 不变 前后 拍摄 两张 
照片 那么 这 两张 照片 匹 配到 的 特征点 的 
二维 物理 坐标 应该 是 一样 的 可能 有 轻微 
偏移 两张 照片 尺寸 一致 那么 我们 可以 根据 摄像机 
前后 两 帧 或 间隔 时间 内 取得 的 两 
帧 的 匹配 点 物理 位置 是否 有 偏移 设置 
一个 偏移 阈值 大于 该 阈值 时则/nr 认为 偏移 否 
则 认为 没 偏移 或 轻微 偏移 当然 如果 两 
帧 匹 配到 的 特征 点 非常 少 低于 一个 
阈值 那么 我们 认为 这 俩 帧 完全 不 一样 
了 场景 不 一样 了 这时候 摄像机 完全 偏移 了 
原来 的 角度 注意 点 1 阈值 非常 重要 2 
前后 帧 匹配 时 要 去掉 类似 摄像机 自动 加上去 
的 视频 位置 当前 时间 等等 区域 因为 这些 区域 
很多 时候 能够 匹 配到 特征点 并且 物理 位置 坐标 
不会 发生 变化 造成 误差 3 在 计算 特征点 物理 
位置 偏移量 时 取 所有 特征点 物理 位置 偏移 的 
平均值 最终 效果 间隔 时间 取 视频 中的 帧 进行 
特征点 对比 根据 前面 的 思路 分为 4个 等级 无 
偏移 轻度 偏移 抖动 严重 偏移 完全 偏移 源代码 最 
重要 的 是 代码 很 简单 直接 贴上来 即可 加 
起来 不到 160行 测试 很多 场景 效果 都 不错 1 
2 视频 帧 匹配 脚本 3 4 import numpy as 
np 5 import cv2 6 7 # 至少 10个 点 
匹配 8 MIN _ MATCH _ COUNT = 10 9 
# 完全 匹配 偏移 d 4 10 BEST _ DISTANCE 
= 4 11 # 微量 偏移 4 d 10 12 
GOOD _ DISTANCE = 10 13 14 15 # 特征点 
提取 方法 内置 很多 种 16 algorithms _ all = 
{ 17 SIFT cv2 . xfeatures2d . SIFT _ create 
18 SURF cv2 . xfeatures2d . SURF _ create 8000 
19 ORB cv2 . ORB _ create 20 } 21 
22 23 # 图像匹配 24 # 0 完全 不 匹配 
1 场景 匹配 2 角度 轻微 偏移 3 完全 匹配 
25 26 def match2frames image1 image2 27 img1 = cv2 
. cvtColor image1 cv2 . COLOR _ BGR2GRAY 28 img2 
= cv2 . cvtColor image2 cv2 . COLOR _ BGR2GRAY 
29 30 size1 = img1 . shape 31 size2 = 
img2 . shape 32 33 img1 = cv2 . resize 
img1 int size1 1 * 0.3 int size1 0 * 
0.3 cv2 . INTER _ LINEAR 34 img2 = cv2 
. resize img2 int size2 1 * 0.3 int size2 
0 * 0.3 cv2 . INTER _ LINEAR 35 36 
sift = algorithms _ all SIFT 37 38 kp1 des1 
= sift . detectAndCompute img1 None 39 kp2 des2 = 
sift . detectAndCompute img2 None 40 41 FLANN _ INDEX 
_ KDTREE = 0 42 index _ params = dict 
algorithm = FLANN _ INDEX _ KDTREE trees = 5 
43 search _ params = dict checks = 50 44 
45 flann = cv2 . F l a n n 
B a s e d M a t c h 
e r index _ params search _ params 46 47 
matches = flann . knnMatch des1 des2 k = 2 
48 49 # 过滤 50 good = 51 for m 
n in matches 52 if m . distance 0.7 * 
n . distance 53 good . append m 54 55 
if len good = MIN _ MATCH _ COUNT 56 
return 0 # 完全 不 匹配 57 else 58 distance 
_ sum = 0 # 特征点 2d 物理 坐标 偏移 
总和 59 for m in good 60 distance _ sum 
+ = get _ distance kp1 m . queryIdx . 
pt kp2 m . trainIdx . pt 61 distance = 
distance _ sum / len good # 单个 特征点 2D 
物理 位置 平均 偏移量 62 63 if distance BEST _ 
DISTANCE 64 return 3 # 完全 匹配 65 elif distance 
GOOD _ DISTANCE and distance = BEST _ DISTANCE 66 
return 2 # 部分 偏移 67 else 68 return 1 
# 场景 匹配 69 70 71 72 计算 2D 物理 
距离 73 74 def get _ distance p1 p2 75 
x1 y1 = p1 76 x2 y2 = p2 77 
return np . sqrt x1 x2 * * 2 + 
y1 y2 * * 2 78 79 80 if _ 
_ name _ _ = = _ _ main _ 
_ 81 pass 测试 1 2 摄像机 角度 偏移 告警 
3 4 import cv2 5 import do _ match 6 
import numpy as np 7 from PIL import Image ImageDraw 
ImageFont 8 9 10 告警信息 11 12 def putText frame 
text 13 cv2 _ im = cv2 . cvtColor frame 
cv2 . COLOR _ BGR2RGB 14 pil _ im = 
Image . fromarray cv2 _ im 15 16 draw = 
ImageDraw . Draw pil _ im 17 font = ImageFont 
. truetype fonts / msyh . ttc 30 encoding = 
utf 8 18 draw . text 50 50 text 0 
255 255 font = font 19 20 cv2 _ text 
_ im = cv2 . cvtColor np . array pil 
_ im cv2 . COLOR _ RGB2BGR 21 22 return 
cv2 _ text _ im 23 24 25 26 27 
texts = 完全 偏移 严重 偏移 轻微 偏移 无 偏移 
28 29 cap = cv2 . VideoCapture videos / test4 
_ new . mp4 30 31 if cap . isOpened 
= = False 32 print Error opening video stream or 
file 33 34 first _ frame = True 35 pre 
_ frame = 0 36 37 index = 0 38 
39 while cap . isOpened 40 ret frame = cap 
. read 41 if ret = = True 42 if 
first _ frame 43 pre _ frame = frame 44 
first _ frame = False 45 continue 46 47 index 
+ = 1 48 if index % 24 = = 
0 49 result = do _ match . match2frames pre 
_ frame frame 50 print 检测 结果 = = = 
texts result 51 52 if result 1 # 缓存 最近 
无 偏移 的 帧 53 pre _ frame = frame 
54 55 size = frame . shape 56 57 if 
size 1 720 # 缩小 显示 58 frame = cv2 
. resize frame int size 1 * 0.5 int size 
0 * 0.5 cv2 . INTER _ LINEAR 59 60 
text _ frame = putText frame texts result 61 62 
cv2 . imshow Frame text _ frame 63 if cv2 
. waitKey 1 & 0xFF = = ord q 64 
break 65 else 66 break 67 68 cap . release 
69 cv2 . d e s t r o y 
A l l W i n d o w s 
背景 在 实际 项目 中 利用 深度 学习 在 检测 
道路 车辆 并 分析 车辆 行 为时 需要 按照 事先 
规定 的 方法 绘制 检测 区 包含 道路 方向 车道 
区域 等 由于 各种 原因 人为 天气 获取 视频 数据 
的 摄像 角度 容易 偏移 原来 设定 的 位置 造成 
检测 区域 和 实际 画面 不 匹配 系统 容易 产生 
误检 误报 等 错误 数据 因此 需要 在 摄像机 位置 
偏移 第一 时间 告诉 系统 检测 模块 停止 工作 直到 
摄像机 归位 后再 进行 检测 摄像机 角度 偏移 告警 属于 
视频 诊断 中的 一类 本文 利用 提取 图片 特征点 实现 
摄像机 偏移 告警 demo 全部 python 代码 不足 200行 前面 
有 几篇 博客 文字 太少 发不 了 首页 AI 分享 
零/m 高数/nr 理解/v 人工智能/n 和/c 深度/ns 学习/v AI 开发 基于 
深度 学习 的 卡口 车型 车牌 识别 这里 是 AI 
+ 计算机 视觉 的 所有 文章 需要 的 朋友 可以 
点 一 波 关注 或者 收藏 一下 图像 特征点 对于 
任何 一张 二维 图片 从 像素 级别 上看 都 存在 
一些 我们 肉眼 看不到 的 比较 独特 的 像素 单元 
可以 理解 为 像素 块 就像 我们 每个人 的 脸 
都会 与众不同 一样 我们 称 这些 具有 特点 的 像素 
区域 为 图像 特征点 已经 有 非常 成熟 的 算法 
来 提取 图片 的 特征点 1 Harris 用于 检测 角 
点 2 SIFT 用于 检测 斑点 3 SURF 用于 检测 
斑点 4 FAST 用于 检测 角 点 5 BRIEF 用于 
检测 斑点 6 ORB 表示 带 方向 的 FAST 算法 
与 具有 旋转 不变性 的 BRIEF 算法 详细 算法 原理 
上网 搜 一下 我 也 不是 很 清楚 OpenCV 中 
包含 以上 几种 算法 实现 角 点 图像 中 涉及 
到 拐角 的 区域 比如 物体 有 轮廓 图像 中 
的 物体 有边缘 区分 斑点 一块 有 特别 规律 的 
像素 区域 方向 尺寸 不变性 指 特征点 不会 受 图片尺寸 
旋转 而 改变 比 如同 一张 图 你 缩小 一倍 
旋转 90度 后 特征点 还是 一样 的 图像匹配 提取 两张 
图片 的 特征点 然后 将 这些 特征 点 进行 匹配 
关联 如果 匹配 程度 满足 某一 阈值 则 认为 这 
两张 图 满足 匹配 条件 注意 对于 同 一个 物体 
拍摄 角度 不同 亮度 不同 都 应该 满足 匹配 条件 
可以 看到 对于 同 一个 场景 的 不同 拍摄 角度 
的 两张 图片 能 找到 匹 配到 的 特征点 但是 
误差 非常大 我们 设置 一个 阈值 满足 该 条件 才 
认为 两个 点 匹配 误差 少 很多 了 匹 配到 
的 特征点 也 非常 正确 换 一组 摄像机 的 照片 
前一 张和 后 一张 在 拍摄 时 摄像机 角度 往 
左下角 有 偏移 所以 对应 匹 配到 的 特征点 往 
右上方 移动 了 我们 可以 看到 虽然 拍摄 角度 不同 
但是 由于 场景 类似 仍然 能 匹配 到 特征点 为了 
减少 绘图 方便 看清楚 阈值 设置 非常 严格 如果 放宽 
一点 还 能 看到 更 多匹 配到 的 点 而且 
这些 匹 配到 的 点 几乎 都 正确 对于 两张 
完全 不同 的 场景 照片 匹 配到 的 特征 点 
非常 少 或者 为零 具体 看 设置 的 阈值 场景 
不同 匹 配到 的 特征点 只有 视频 上 的 文字 
角度 偏移 告警 如果 摄像机 位置 不变 前后 拍摄 两张 
照片 那么 这 两张 照片 匹 配到 的 特征点 的 
二维 物理 坐标 应该 是 一样 的 可能 有 轻微 
偏移 两张 照片 尺寸 一致 那么 我们 可以 根据 摄像机 
前后 两 帧 或 间隔 时间 内 取得 的 两 
帧 的 匹配 点 物理 位置 是否 有 偏移 设置 
一个 偏移 阈值 大于 该 阈值 时则/nr 认为 偏移 否 
则 认为 没 偏移 或 轻微 偏移 当然 如果 两 
帧 匹 配到 的 特征 点 非常 少 低于 一个 
阈值 那么 我们 认为 这 俩 帧 完全 不 一样 
了 场景 不 一样 了 这时候 摄像机 完全 偏移 了 
原来 的 角度 注意 点 1 阈值 非常 重要 2 
前后 帧 匹配 时 要 去掉 类似 摄像机 自动 加上去 
的 视频 位置 当前 时间 等等 区域 因为 这些 区域 
很多 时候 能够 匹 配到 特征点 并且 物理 位置 坐标 
不会 发生 变化 造成 误差 3 在 计算 特征点 物理 
位置 偏移量 时 取 所有 特征点 物理 位置 偏移 的 
平均值 最终 效果 间隔 时间 取 视频 中的 帧 进行 
特征点 对比 根据 前面 的 思路 分为 4个 等级 无 
偏移 轻度 偏移 抖动 严重 偏移 完全 偏移 源代码 最 
重要 的 是 代码 很 简单 直接 贴上来 即可 加 
起来 不到 160行 测试 很多 场景 效果 都 不错 1 
2 视频 帧 匹配 脚本 3 4 import numpy as 
np 5 import cv2 6 7 # 至少 10个 点 
匹配 8 MIN _ MATCH _ COUNT = 10 9 
# 完全 匹配 偏移 d 4 10 BEST _ DISTANCE 
= 4 11 # 微量 偏移 4 d 10 12 
GOOD _ DISTANCE = 10 13 14 15 # 特征点 
提取 方法 内置 很多 种 16 algorithms _ all = 
{ 17 SIFT cv2 . xfeatures2d . SIFT _ create 
18 SURF cv2 . xfeatures2d . SURF _ create 8000 
19 ORB cv2 . ORB _ create 20 } 21 
22 23 # 图像匹配 24 # 0 完全 不 匹配 
1 场景 匹配 2 角度 轻微 偏移 3 完全 匹配 
25 26 def match2frames image1 image2 27 img1 = cv2 
. cvtColor image1 cv2 . COLOR _ BGR2GRAY 28 img2 
= cv2 . cvtColor image2 cv2 . COLOR _ BGR2GRAY 
29 30 size1 = img1 . shape 31 size2 = 
img2 . shape 32 33 img1 = cv2 . resize 
img1 int size1 1 * 0.3 int size1 0 * 
0.3 cv2 . INTER _ LINEAR 34 img2 = cv2 
. resize img2 int size2 1 * 0.3 int size2 
0 * 0.3 cv2 . INTER _ LINEAR 35 36 
sift = algorithms _ all SIFT 37 38 kp1 des1 
= sift . detectAndCompute img1 None 39 kp2 des2 = 
sift . detectAndCompute img2 None 40 41 FLANN _ INDEX 
_ KDTREE = 0 42 index _ params = dict 
algorithm = FLANN _ INDEX _ KDTREE trees = 5 
43 search _ params = dict checks = 50 44 
45 flann = cv2 . F l a n n 
B a s e d M a t c h 
e r index _ params search _ params 46 47 
matches = flann . knnMatch des1 des2 k = 2 
48 49 # 过滤 50 good = 51 for m 
n in matches 52 if m . distance 0.7 * 
n . distance 53 good . append m 54 55 
if len good = MIN _ MATCH _ COUNT 56 
return 0 # 完全 不 匹配 57 else 58 distance 
_ sum = 0 # 特征点 2d 物理 坐标 偏移 
总和 59 for m in good 60 distance _ sum 
+ = get _ distance kp1 m . queryIdx . 
pt kp2 m . trainIdx . pt 61 distance = 
distance _ sum / len good # 单个 特征点 2D 
物理 位置 平均 偏移量 62 63 if distance BEST _ 
DISTANCE 64 return 3 # 完全 匹配 65 elif distance 
GOOD _ DISTANCE and distance = BEST _ DISTANCE 66 
return 2 # 部分 偏移 67 else 68 return 1 
# 场景 匹配 69 70 71 72 计算 2D 物理 
距离 73 74 def get _ distance p1 p2 75 
x1 y1 = p1 76 x2 y2 = p2 77 
return np . sqrt x1 x2 * * 2 + 
y1 y2 * * 2 78 79 80 if _ 
_ name _ _ = = _ _ main _ 
_ 81 pass 测试 1 2 摄像机 角度 偏移 告警 
3 4 import cv2 5 import do _ match 6 
import numpy as np 7 from PIL import Image ImageDraw 
ImageFont 8 9 10 告警信息 11 12 def putText frame 
text 13 cv2 _ im = cv2 . cvtColor frame 
cv2 . COLOR _ BGR2RGB 14 pil _ im = 
Image . fromarray cv2 _ im 15 16 draw = 
ImageDraw . Draw pil _ im 17 font = ImageFont 
. truetype fonts / msyh . ttc 30 encoding = 
utf 8 18 draw . text 50 50 text 0 
255 255 font = font 19 20 cv2 _ text 
_ im = cv2 . cvtColor np . array pil 
_ im cv2 . COLOR _ RGB2BGR 21 22 return 
cv2 _ text _ im 23 24 25 26 27 
texts = 完全 偏移 严重 偏移 轻微 偏移 无 偏移 
28 29 cap = cv2 . VideoCapture videos / test4 
_ new . mp4 30 31 if cap . isOpened 
= = False 32 print Error opening video stream or 
file 33 34 first _ frame = True 35 pre 
_ frame = 0 36 37 index = 0 38 
39 while cap . isOpened 40 ret frame = cap 
. read 41 if ret = = True 42 if 
first _ frame 43 pre _ frame = frame 44 
first _ frame = False 45 continue 46 47 index 
+ = 1 48 if index % 24 = = 
0 49 result = do _ match . match2frames pre 
_ frame frame 50 print 检测 结果 = = = 
texts result 51 52 if result 1 # 缓存 最近 
无 偏移 的 帧 53 pre _ frame = frame 
54 55 size = frame . shape 56 57 if 
size 1 720 # 缩小 显示 58 frame = cv2 
. resize frame int size 1 * 0.5 int size 
0 * 0.5 cv2 . INTER _ LINEAR 59 60 
text _ frame = putText frame texts result 61 62 
cv2 . imshow Frame text _ frame 63 if cv2 
. waitKey 1 & 0xFF = = ord q 64 
break 65 else 66 break 67 68 cap . release 
69 cv2 . d e s t r o y 
A l l W i n d o w s 
