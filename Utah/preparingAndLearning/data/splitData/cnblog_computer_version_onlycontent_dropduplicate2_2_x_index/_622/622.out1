第八章 目标 跟踪 1 检测 目标 的 移动 基本 的 
运动 检测 示例代码 如下 import cv2 import numpy as np 
# 捕获 摄像头 图像 camera = cv2 . VideoCapture 0 
# es = cv2 . g e t t r 
u c t u r i n g E l 
e m e n t cv2 . MORPH _ ELLIPSE 
10 10 kernel = np . ones 5 5 np 
. uint8 background = None while True       
ret frame = camera . read       # 
将 第一 帧 设为 图像 的 背景       
if background is None             
  # 转换 颜色 空间           
    background = cv2 . cvtColor frame cv2 . 
COLOR _ BGR2GRAY               
# 高斯 模糊               
background = cv2 . GaussianBlur background 21 21 0   
            continue       
# 转换 颜色 空间 并作 模糊 处理       
gray _ frame = cv2 . cvtColor frame cv2 . 
COLOR _ BGR2GRAY       gray _ frame = 
cv2 . GaussianBlur gray _ frame 21 21 0   
    # 取得 差分 图       diff 
= cv2 . absdiff background gray _ frame     
  diff = cv2 . threshold diff 25 255 cv2 
. THRESH _ BINARY 1       # 膨胀 
      diff = cv2 . dilate diff es 
iterations = 2       # 得到 图像 中 
目标 的 轮廓       image cnts hierarchy = 
cv2 . findContours diff . copy cv2 . RETR _ 
EXTERNAL cv2 . CHAIN _ APPROX _ SIMPLE     
  for c in cnts           
    if cv2 . contourArea c 1500     
                  continue 
              # 计算 矩形 
边框               x y 
w h = cv2 . boundingRect c       
        # 绘制 矩形       
        cv2 . rectangle frame x y 
x + w y + h 0 255 0 2 
      # 显示 图像       cv2 
. imshow contours frame       cv2 . imshow 
dif diff       if cv2 . waitKey int 
1000 / 12 & 0xFF = = ord q   
            break cv2 . d 
e s t r o y A l l W 
i n d o w s camera . release 运行 
结果 如下 2 背景 分割器 knn mog2 和 GMGOpencv3 有三种 
背景 分割器 K nearest knn Mixture of Gaussians MOG2 Geometric 
multigid GMC b a c k g r o u 
n d u b t r a c t o 
r 用于 分割 前景 和 背景 示例代码 如下 import cv2 
import numpy as np cv2 . ocl . setUseOpenCL False 
cap = cv2 . VideoCapture 0 mog = cv2 . 
c r e a t e B a c k 
g r o u n d u b t r 
a c t o r M O G 2 while 
True       ret frame = cap . read 
      fgmask = mog . apply frame   
    cv2 . imshow frame fgmask       
if cv2 . waitKey 30 & 0xFF = = ord 
q               break cap 
. release cv2 . d e s t r o 
y A l l W i n d o w 
s 运行 结果 如下 使用 b a c k g 
r o u n d u b t r a 
c t o r K N N 来 实现 运动 
检测 示例代码 如下 import cv2 cv2 . ocl . setUseOpenCL 
False bs = cv2 . c r e a t 
e B a c k g r o u n 
d u b t r a c t o r 
K N N detectShadows = True # 读取 本地 视频 
camera = cv2 . VideoCapture . . / traffic . 
flv while True       ret frame = camera 
. read       fgmask = bs . apply 
frame . copy       # 设置 阈值   
    th = cv2 . threshold fgmask   # 
源 图像                 
                    
        244   # 阈值     
                    
                    
255   # 最大值             
                    
            cv2 . THRESH _ 
BINARY 1   # 阈 值类型       # 
膨胀       dilated = cv2 . dilate th 
  # 源 图像             
                    
                cv2 . 
g e t t r u c t u r 
i n g E l e m e n t 
cv2 . MORPH _ ELLIPSE 3 3   # 内核 
                    
                    
        iterations = 2   # 腐蚀 
次数       # 查找 图像 中 的 目标 
轮廓       image contours hier = cv2 . 
findContours dilated cv2 . RETR _ EXTERNAL cv2 . CHAIN 
_ APPROX _ SIMPLE       for c in 
contours               if cv2 
. contourArea c 1600             
          x y w h = 
cv2 . boundingRect c             
          cv2 . rectangle frame x 
y x + w y + h 255 255 0 
2       cv2 . imshow mog fgmask   
# 分割 前景 与 背景       cv2 . 
imshow thresh th   #       cv2 . 
imshow detection frame   # 运动 检测 结果     
  if cv2 . waitKey 30 & 0xFF = = 
27               break camera 
. release cv2 . d e s t r o 
y A l l W i n d o w 
s 运行 结果 如下 均值 漂移 meanShift 示例代码 如下 import 
cv2 import numpy as np # 取得 摄像头 图像 cap 
= cv2 . VideoCapture 0 ret frame = cap . 
read # 设置 跟踪 窗体 大小 r h c w 
= 10 200 10 200 track _ window = c 
r w h # 提取 roi roi = frame r 
r + h c c + w # 转换 颜色 
空间 hsv _ roi = cv2 . cvtColor frame cv2 
. COLOR _ BGR2HSV # 根据 阈值 构建 掩码 mask 
= cv2 . inRange hsv _ roi np . array 
100 . 30 . 32 . np . array 180 
. 120 . 255 . # 计算 roi 图形 的 
彩色 直方图 roi _ hist = cv2 . calcHist hsv 
_ roi 0 mask 180 0 180 cv2 . normalize 
roi _ hist roi _ hist 0 255 cv2 . 
NORM _ MINMAX # 指定 停止 条件 term _ crit 
= cv2 . TERM _ CRITERIA _ EPS | cv2 
. TERM _ CRITERIA _ COUNT 10 1 while True 
      ret frame = cap . read   
    if ret = = True       
        # 更换 颜色 空间     
          hsv = cv2 . cvtColor 
frame cv2 . COLOR _ BGR2HSV         
      # histogram back projection calculation 直方图 反向 
投影               dst = 
cv2 . calcBackProject hsv 0 roi _ hist 0 180 
1               # 均值 
漂移               ret track 
_ window = cv2 . meanShift dst track _ window 
term _ crit               
# 绘制 矩形 显示 图像           
    x y w h = track _ window 
              img2 = cv2 
. rectangle frame x y x + w y + 
h 255 2               
cv2 . imshow img2 img2           
    # esc 退出           
    if cv2 . waitKey 60 & 0xFF = 
= 27                 
      break       else     
          break cv2 . d e 
s t r o y A l l W i 
n d o w s cap . release 运行 结果 
如下 彩色 直方图 calHist 函数 函数 原型 def calcHist images 
# 源 图像 channels # 通道 列表 mask # 可选 
的 掩码 histSize # 每个 维度 下 直方图 数组 的 
大小 ranges # 每 一个 维度 下 直方图 bin 的 
上下 界 的 数组 hist = None # 输出 直方图 
是 一个 维 稠 密度 的 数组 accumulate = None 
# 累计 标志 Camshift 示例代码 如下 # / usr / 
bin / env python # * coding utf 8 * 
# @ Time       2016 / 12/15 16 
48 # @ Author   Retacn # @ Site   
    camshift 实现 物体 跟踪 # @ File   
    camshift . py # @ Software PyCharm _ 
_ author _ _ = retacn _ _ copyright _ 
_ = property of mankind . _ _ license _ 
_ = CN _ _ version _ _ = 0 
. 0.1 _ _ maintainer _ _ = retacn _ 
_ email _ _ = zhenhuayue @ sina . com 
_ _ status _ _ = Development import cv2 import 
numpy as np # 取得 摄像头 图像 cap = cv2 
. VideoCapture 0 ret frame = cap . read # 
设置 跟踪 窗体 大小 r h c w = 300 
200 400 300 track _ window = c r w 
h # 提取 roi roi = frame r r + 
h c c + w # 转换 颜色 空间 hsv 
_ roi = cv2 . cvtColor frame cv2 . COLOR 
_ BGR2HSV # 根据 阈值 构建 掩码 mask = cv2 
. inRange hsv _ roi np . array 100 . 
30 . 32 . np . array 180 . 120 
. 255 . # 计算 roi 图形 的 彩色 直方图 
roi _ hist = cv2 . calcHist hsv _ roi 
0 mask 180 0 180 cv2 . normalize roi _ 
hist roi _ hist 0 255 cv2 . NORM _ 
MINMAX # 指定 停止 条件 term _ crit = cv2 
. TERM _ CRITERIA _ EPS | cv2 . TERM 
_ CRITERIA _ COUNT 10 1 while True     
  ret frame = cap . read       
if ret = = True           
    # 更换 颜色 空间         
      hsv = cv2 . cvtColor frame cv2 
. COLOR _ BGR2HSV             
  # histogram back projection calculation 直方图 反向 投影   
            dst = cv2 . 
calcBackProject hsv 0 roi _ hist 0 180 1   
            # 均值 漂移   
            ret track _ window 
= cv2 . CamShift dst track _ window term _ 
crit               # 绘制 
矩形 显示 图像               
pts = cv2 . boxPoints ret         
      pts = np . int0 pts   
            img2 = cv2 . 
polylines frame pts True 255 2         
      cv2 . imshow img2 img2     
          # esc 退出     
          if cv2 . waitKey 60 
& 0xFF = = 27           
            break       
else               break cv2 
. d e s t r o y A l 
l W i n d o w s cap . 
release 运行 结果 如下 4 卡尔曼 滤波器 函数 原型 为 
def KalmanFilter dynamParams = None # 状态 的 维度 measureParams 
= None # 测量 的 维度 controlParams = None # 
控制 的 维度 type = None # 矩阵 的 类型 
示例代码 如下 import cv2 import numpy as np # 创建 
空帧/nr frame = np . zeros 800 800 3 np 
. uint8 # 测量 坐标 last _ measurement = current 
_ measurement = np . array 2 1 np . 
float32 # 鼠标 运动 预测 last _ prediction = current 
_ predication = np . zeros 2 1 np . 
float32 def mousemove event x y s p     
  # 设置 全局变量       global frame measurements 
current _ measurement last _ measurement current _ predication last 
_ prediction       last _ prediction = current 
_ predication       last _ measurement = current 
_ measurement       current _ measurement = np 
. array np . float32 x np . float32 y 
      kalman . correct current _ measurement   
    current _ predication = kalman . predict   
    # 实际 移动 起始 点       
lmx lmy = last _ measurement 0 last _ measurement 
1       cmx cmy = current _ measurement 
0 current _ measurement 1       # 预测 
线 起止点       lpx lpy = last _ 
prediction 0 last _ prediction 1       cpx 
cpy = current _ predication 0 current _ predication 1 
      # 绘制 连线       cv2 
. line frame lmx lmy cmx cmy 0 100 0 
  # 绿色       cv2 . line frame 
lpx lpy cpx cpy 0 0 200   # 红色 
# 创建 窗体 cv2 . namedWindow mouse _ detection # 
注册 鼠标 事件 的 回调函数 cv2 . setMouseCallback mouse _ 
detection mousemove # 卡尔曼 滤波器 kalman = cv2 . KalmanFilter 
4 2 kalman . m e a s u r 
e m e n t M a t r i 
x = np . array 1 0 0 0 0 
1 0 0 np . float32 kalman . transitionMatrix = 
np . array 1 0 1 0 0 1 0 
1 0 0 1 0 0 0 0 1 np 
. float32 kalman . processNoiseCov = np . array 1 
0 0 0 0 1 0 0 0 0 1 
0 0 0 0 1 np . float32 * 0.03 
while True       cv2 . imshow mouse _ 
detection frame       if cv2 . waitKey 30 
& 0xFF = = 27           
    break cv2 . d e s t r 
o y A l l W i n d o 
w s 运行 结果 如下 一个 基于 行人 跟踪 的 
例子 示例代码 如下 import cv2 import numpy as np import 
os . path as path import argparse font = cv2 
. FONT _ HERSHEY _ SIMPLEX parser = argparse . 
ArgumentParser parser . add _ argument a algorithm     
                    
              help = m 
or nothing for meanShift and c for camshift args = 
vars parser . parse _ args # 计算 矩阵 中心 
行人 位置 def center points       x = 
points 0 0 + points 1 0 + points 2 
0 + points 3 0 / 4       
y = points 0 1 + points 1 1 + 
points 2 1 + points 3 1 / 4   
    # print np . array np . float32 
x np . float32 y np . float32     
  # 588 .     257.5       
return np . array np . float32 x np . 
float32 y np . float32 # 行人 class Pedestrian   
    def _ _ init _ _ self id 
frame track _ window             
  self . id = int id   # 行人 
id               x y 
w h = track _ window   # 跟踪 窗体 
              self . track 
_ window = track _ window         
      # 更换 颜色 空间       
        self . roi = cv2 . 
cvtColor frame y y + h x x + w 
cv2 . COLOR _ BGR2HSV           
    # 计算 roi 图形 的 彩色 直方图   
            roi _ hist = 
cv2 . calcHist self . roi 0 None 16 0 
180               self . 
roi _ hist = cv2 . normalize roi _ hist 
roi _ hist 0 255 cv2 . NORM _ MINMAX 
              # 设置 卡尔曼 
滤波器               self . 
kalman = cv2 . KalmanFilter 4 2       
        self . kalman . m e 
a s u r e m e n t M 
a t r i x = np . array 1 
0 0 0 0 1 0 0 np . float32 
              self . kalman 
. transitionMatrix = np . array 1 0 1 0 
0 1 0 1 0 0 1 0 0 0 
0 1 np . float32           
    self . kalman . processNoiseCov = np . 
array 1 0 0 0 0 1 0 0 0 
0 1 0 0 0 0 1       
                    
                    
                    
                    
      np . float32 * 0.03     
          # 测量 坐标     
          self . measurement = np 
. array 2 1 np . float32       
        # 鼠标 运动 预测     
          self . predication = np 
. zeros 2 1 np . float32       
        # 指定 停止 条件     
          self . term _ crit 
= cv2 . TERM _ CRITERIA _ EPS | cv2 
. TERM _ CRITERIA _ COUNT 10 1     
          self . center = None 
              self . update 
frame       def _ _ del _ _ 
self               print Pedestrian 
% d destroyed % self . id       
# 更新 图像 帧       def update self 
frame               # 更换 
颜色 空间               hsv 
= cv2 . cvtColor frame cv2 . COLOR _ BGR2HSV 
              # histogram back 
projection calculation 直方图 反向 投影           
    back _ project = cv2 . calcBackProject hsv 
0 self . roi _ hist 0 180 1   
            # camshift     
          if args . get algorithm 
= = c               
        ret self . track _ window 
= cv2 . CamShift back _ project self . track 
_ window self . term _ crit       
                # 绘制 
跟踪 框                 
      pts = cv2 . boxPoints ret   
                    
pts = np . int0 pts         
              self . center 
= center pts               
        cv2 . polylines frame pts True 
255 1               # 
均值 漂移               if 
not args . get algorithm or args . get algorithm 
= = m               
        ret self . track _ window 
= cv2 . meanShift back _ project self . track 
_ window self . term _ crit       
                # 绘制 
跟踪 框                 
      x y w h = self . 
track _ window               
        self . center = center x 
y x + w y x y + h x 
+ w y + h           
            cv2 . rectangle frame 
x y x + w y + h 255 255 
0 2               self 
. kalman . correct self . center       
        prediction = self . kalman . 
predict               cv2 . 
circle frame int prediction 0 int prediction 1 4 0 
255 0 1               
# 计数器               cv2 
. putText frame ID % d % s % self 
. id self . center 11 self . id + 
1 * 25 + 1 font 0.6 0 0 0 
                    
                  1 
cv2 . LINE _ AA           
    # 跟踪 窗口 坐标         
      cv2 . putText frame ID % d 
% s % self . id self . center 10 
self . id + 1 * 25 font 0.6 0 
255 0                 
                    
  1 cv2 . LINE _ AA def main   
    # 加载 视频       # camera 
= cv2 . VideoCapture . . / movie . mpg 
      # camera = cv2 . VideoCapture . 
. / traffic . flv       camera = 
cv2 . VideoCapture . . / 768x576 . avi   
    # 初始化 背景 分割器       history 
= 20       bs = cv2 . c 
r e a t e B a c k g 
r o u n d u b t r a 
c t o r K N N detectShadows = True 
      # 创建 显示 主 窗口     
  cv2 . namedWindow surveillance       pedestrians = 
{ }   # 行人 字典       firstFrame 
= True       frames = 0     
  fourcc = cv2 . VideoWriter _ fourcc * XVID 
      out = cv2 . VideoWriter . . 
/ output . avi fourcc 20.0 640 480     
  while True               
print frmae % d % frames         
      grabbed frane = camera . read   
            if grabbed is False 
                    
  print failed to grab frame         
              break     
          ret frame = camera . 
read               fgmask = 
bs . apply frame             
  if frames history             
          frames + = 1   
                    
continue               # 设置 
阈值               th = 
cv2 . threshold fgmask . copy 127 255 cv2 . 
THRESH _ BINARY 1             
  # 腐蚀               
th = cv2 . erode th cv2 . g e 
t t r u c t u r i n 
g E l e m e n t cv2 . 
MORPH _ ELLIPSE 3 3 iterations = 2     
          # 膨胀       
        dilated = cv2 . dilate th 
cv2 . g e t t r u c t 
u r i n g E l e m e 
n t cv2 . MORPH _ ELLIPSE 8 3 iterations 
= 2               # 
查找 轮廓               image 
contours hier = cv2 . findContours dilated cv2 . RETR 
_ EXTERNAL cv2 . CHAIN _ APPROX _ SIMPLE   
            counter = 0   
            for c in contours 
                    
  if cv2 . contourArea c 500       
                    
    # 边界 数组           
                    
x y w h = cv2 . boundingRect c   
                    
        # 绘制 矩形       
                    
    cv2 . rectangle frame x y x + 
w y + h 0 255 0 1     
                    
      if firstFrame is True       
                    
            pedestrians counter = Pedestrian 
counter frame x y w h         
                    
  counter + = 1           
    # 更新 帧 内容         
      for i p in pedestrians . items 
                    
  p . update frame           
    # false 只 跟踪 已有 的 行人   
            # firstFrame = True 
              firstFrame = False 
              frames + = 
1               # 显示 
              cv2 . imshow 
surveillance frame               out 
. write frame               
if cv2 . waitKey 120 & 0xFF = = 27 
  # esc 退出             
          break       out 
. release       camera . release if _ 
_ name _ _ = = _ _ main _ 
_       main 运行 结果 如下 第八章 目标 跟踪 1 检测 目标 的 移动 基本 的 
运动 检测 示例代码 如下 import cv2 import numpy as np 
# 捕获 摄像头 图像 camera = cv2 . VideoCapture 0 
# es = cv2 . g e t t r 
u c t u r i n g E l 
e m e n t cv2 . MORPH _ ELLIPSE 
10 10 kernel = np . ones 5 5 np 
. uint8 background = None while True       
ret frame = camera . read       # 
将 第一 帧 设为 图像 的 背景       
if background is None             
  # 转换 颜色 空间           
    background = cv2 . cvtColor frame cv2 . 
COLOR _ BGR2GRAY               
# 高斯 模糊               
background = cv2 . GaussianBlur background 21 21 0   
            continue       
# 转换 颜色 空间 并作 模糊 处理       
gray _ frame = cv2 . cvtColor frame cv2 . 
COLOR _ BGR2GRAY       gray _ frame = 
cv2 . GaussianBlur gray _ frame 21 21 0   
    # 取得 差分 图       diff 
= cv2 . absdiff background gray _ frame     
  diff = cv2 . threshold diff 25 255 cv2 
. THRESH _ BINARY 1       # 膨胀 
      diff = cv2 . dilate diff es 
iterations = 2       # 得到 图像 中 
目标 的 轮廓       image cnts hierarchy = 
cv2 . findContours diff . copy cv2 . RETR _ 
EXTERNAL cv2 . CHAIN _ APPROX _ SIMPLE     
  for c in cnts           
    if cv2 . contourArea c 1500     
                  continue 
              # 计算 矩形 
边框               x y 
w h = cv2 . boundingRect c       
        # 绘制 矩形       
        cv2 . rectangle frame x y 
x + w y + h 0 255 0 2 
      # 显示 图像       cv2 
. imshow contours frame       cv2 . imshow 
dif diff       if cv2 . waitKey int 
1000 / 12 & 0xFF = = ord q   
            break cv2 . d 
e s t r o y A l l W 
i n d o w s camera . release 运行 
结果 如下 2 背景 分割器 knn mog2 和 GMGOpencv3 有三种 
背景 分割器 K nearest knn Mixture of Gaussians MOG2 Geometric 
multigid GMC b a c k g r o u 
n d u b t r a c t o 
r 用于 分割 前景 和 背景 示例代码 如下 import cv2 
import numpy as np cv2 . ocl . setUseOpenCL False 
cap = cv2 . VideoCapture 0 mog = cv2 . 
c r e a t e B a c k 
g r o u n d u b t r 
a c t o r M O G 2 while 
True       ret frame = cap . read 
      fgmask = mog . apply frame   
    cv2 . imshow frame fgmask       
if cv2 . waitKey 30 & 0xFF = = ord 
q               break cap 
. release cv2 . d e s t r o 
y A l l W i n d o w 
s 运行 结果 如下 使用 b a c k g 
r o u n d u b t r a 
c t o r K N N 来 实现 运动 
检测 示例代码 如下 import cv2 cv2 . ocl . setUseOpenCL 
False bs = cv2 . c r e a t 
e B a c k g r o u n 
d u b t r a c t o r 
K N N detectShadows = True # 读取 本地 视频 
camera = cv2 . VideoCapture . . / traffic . 
flv while True       ret frame = camera 
. read       fgmask = bs . apply 
frame . copy       # 设置 阈值   
    th = cv2 . threshold fgmask   # 
源 图像                 
                    
        244   # 阈值     
                    
                    
255   # 最大值             
                    
            cv2 . THRESH _ 
BINARY 1   # 阈 值类型       # 
膨胀       dilated = cv2 . dilate th 
  # 源 图像             
                    
                cv2 . 
g e t t r u c t u r 
i n g E l e m e n t 
cv2 . MORPH _ ELLIPSE 3 3   # 内核 
                    
                    
        iterations = 2   # 腐蚀 
次数       # 查找 图像 中 的 目标 
轮廓       image contours hier = cv2 . 
findContours dilated cv2 . RETR _ EXTERNAL cv2 . CHAIN 
_ APPROX _ SIMPLE       for c in 
contours               if cv2 
. contourArea c 1600             
          x y w h = 
cv2 . boundingRect c             
          cv2 . rectangle frame x 
y x + w y + h 255 255 0 
2       cv2 . imshow mog fgmask   
# 分割 前景 与 背景       cv2 . 
imshow thresh th   #       cv2 . 
imshow detection frame   # 运动 检测 结果     
  if cv2 . waitKey 30 & 0xFF = = 
27               break camera 
. release cv2 . d e s t r o 
y A l l W i n d o w 
s 运行 结果 如下 均值 漂移 meanShift 示例代码 如下 import 
cv2 import numpy as np # 取得 摄像头 图像 cap 
= cv2 . VideoCapture 0 ret frame = cap . 
read # 设置 跟踪 窗体 大小 r h c w 
= 10 200 10 200 track _ window = c 
r w h # 提取 roi roi = frame r 
r + h c c + w # 转换 颜色 
空间 hsv _ roi = cv2 . cvtColor frame cv2 
. COLOR _ BGR2HSV # 根据 阈值 构建 掩码 mask 
= cv2 . inRange hsv _ roi np . array 
100 . 30 . 32 . np . array 180 
. 120 . 255 . # 计算 roi 图形 的 
彩色 直方图 roi _ hist = cv2 . calcHist hsv 
_ roi 0 mask 180 0 180 cv2 . normalize 
roi _ hist roi _ hist 0 255 cv2 . 
NORM _ MINMAX # 指定 停止 条件 term _ crit 
= cv2 . TERM _ CRITERIA _ EPS | cv2 
. TERM _ CRITERIA _ COUNT 10 1 while True 
      ret frame = cap . read   
    if ret = = True       
        # 更换 颜色 空间     
          hsv = cv2 . cvtColor 
frame cv2 . COLOR _ BGR2HSV         
      # histogram back projection calculation 直方图 反向 
投影               dst = 
cv2 . calcBackProject hsv 0 roi _ hist 0 180 
1               # 均值 
漂移               ret track 
_ window = cv2 . meanShift dst track _ window 
term _ crit               
# 绘制 矩形 显示 图像           
    x y w h = track _ window 
              img2 = cv2 
. rectangle frame x y x + w y + 
h 255 2               
cv2 . imshow img2 img2           
    # esc 退出           
    if cv2 . waitKey 60 & 0xFF = 
= 27                 
      break       else     
          break cv2 . d e 
s t r o y A l l W i 
n d o w s cap . release 运行 结果 
如下 彩色 直方图 calHist 函数 函数 原型 def calcHist images 
# 源 图像 channels # 通道 列表 mask # 可选 
的 掩码 histSize # 每个 维度 下 直方图 数组 的 
大小 ranges # 每 一个 维度 下 直方图 bin 的 
上下 界 的 数组 hist = None # 输出 直方图 
是 一个 维 稠 密度 的 数组 accumulate = None 
# 累计 标志 Camshift 示例代码 如下 # / usr / 
bin / env python # * coding utf 8 * 
# @ Time       2016 / 12/15 16 
48 # @ Author   Retacn # @ Site   
    camshift 实现 物体 跟踪 # @ File   
    camshift . py # @ Software PyCharm _ 
_ author _ _ = retacn _ _ copyright _ 
_ = property of mankind . _ _ license _ 
_ = CN _ _ version _ _ = 0 
. 0.1 _ _ maintainer _ _ = retacn _ 
_ email _ _ = zhenhuayue @ sina . com 
_ _ status _ _ = Development import cv2 import 
numpy as np # 取得 摄像头 图像 cap = cv2 
. VideoCapture 0 ret frame = cap . read # 
设置 跟踪 窗体 大小 r h c w = 300 
200 400 300 track _ window = c r w 
h # 提取 roi roi = frame r r + 
h c c + w # 转换 颜色 空间 hsv 
_ roi = cv2 . cvtColor frame cv2 . COLOR 
_ BGR2HSV # 根据 阈值 构建 掩码 mask = cv2 
. inRange hsv _ roi np . array 100 . 
30 . 32 . np . array 180 . 120 
. 255 . # 计算 roi 图形 的 彩色 直方图 
roi _ hist = cv2 . calcHist hsv _ roi 
0 mask 180 0 180 cv2 . normalize roi _ 
hist roi _ hist 0 255 cv2 . NORM _ 
MINMAX # 指定 停止 条件 term _ crit = cv2 
. TERM _ CRITERIA _ EPS | cv2 . TERM 
_ CRITERIA _ COUNT 10 1 while True     
  ret frame = cap . read       
if ret = = True           
    # 更换 颜色 空间         
      hsv = cv2 . cvtColor frame cv2 
. COLOR _ BGR2HSV             
  # histogram back projection calculation 直方图 反向 投影   
            dst = cv2 . 
calcBackProject hsv 0 roi _ hist 0 180 1   
            # 均值 漂移   
            ret track _ window 
= cv2 . CamShift dst track _ window term _ 
crit               # 绘制 
矩形 显示 图像               
pts = cv2 . boxPoints ret         
      pts = np . int0 pts   
            img2 = cv2 . 
polylines frame pts True 255 2         
      cv2 . imshow img2 img2     
          # esc 退出     
          if cv2 . waitKey 60 
& 0xFF = = 27           
            break       
else               break cv2 
. d e s t r o y A l 
l W i n d o w s cap . 
release 运行 结果 如下 4 卡尔曼 滤波器 函数 原型 为 
def KalmanFilter dynamParams = None # 状态 的 维度 measureParams 
= None # 测量 的 维度 controlParams = None # 
控制 的 维度 type = None # 矩阵 的 类型 
示例代码 如下 import cv2 import numpy as np # 创建 
空帧/nr frame = np . zeros 800 800 3 np 
. uint8 # 测量 坐标 last _ measurement = current 
_ measurement = np . array 2 1 np . 
float32 # 鼠标 运动 预测 last _ prediction = current 
_ predication = np . zeros 2 1 np . 
float32 def mousemove event x y s p     
  # 设置 全局变量       global frame measurements 
current _ measurement last _ measurement current _ predication last 
_ prediction       last _ prediction = current 
_ predication       last _ measurement = current 
_ measurement       current _ measurement = np 
. array np . float32 x np . float32 y 
      kalman . correct current _ measurement   
    current _ predication = kalman . predict   
    # 实际 移动 起始 点       
lmx lmy = last _ measurement 0 last _ measurement 
1       cmx cmy = current _ measurement 
0 current _ measurement 1       # 预测 
线 起止点       lpx lpy = last _ 
prediction 0 last _ prediction 1       cpx 
cpy = current _ predication 0 current _ predication 1 
      # 绘制 连线       cv2 
. line frame lmx lmy cmx cmy 0 100 0 
  # 绿色       cv2 . line frame 
lpx lpy cpx cpy 0 0 200   # 红色 
# 创建 窗体 cv2 . namedWindow mouse _ detection # 
注册 鼠标 事件 的 回调函数 cv2 . setMouseCallback mouse _ 
detection mousemove # 卡尔曼 滤波器 kalman = cv2 . KalmanFilter 
4 2 kalman . m e a s u r 
e m e n t M a t r i 
x = np . array 1 0 0 0 0 
1 0 0 np . float32 kalman . transitionMatrix = 
np . array 1 0 1 0 0 1 0 
1 0 0 1 0 0 0 0 1 np 
. float32 kalman . processNoiseCov = np . array 1 
0 0 0 0 1 0 0 0 0 1 
0 0 0 0 1 np . float32 * 0.03 
while True       cv2 . imshow mouse _ 
detection frame       if cv2 . waitKey 30 
& 0xFF = = 27           
    break cv2 . d e s t r 
o y A l l W i n d o 
w s 运行 结果 如下 一个 基于 行人 跟踪 的 
例子 示例代码 如下 import cv2 import numpy as np import 
os . path as path import argparse font = cv2 
. FONT _ HERSHEY _ SIMPLEX parser = argparse . 
ArgumentParser parser . add _ argument a algorithm     
                    
              help = m 
or nothing for meanShift and c for camshift args = 
vars parser . parse _ args # 计算 矩阵 中心 
行人 位置 def center points       x = 
points 0 0 + points 1 0 + points 2 
0 + points 3 0 / 4       
y = points 0 1 + points 1 1 + 
points 2 1 + points 3 1 / 4   
    # print np . array np . float32 
x np . float32 y np . float32     
  # 588 .     257.5       
return np . array np . float32 x np . 
float32 y np . float32 # 行人 class Pedestrian   
    def _ _ init _ _ self id 
frame track _ window             
  self . id = int id   # 行人 
id               x y 
w h = track _ window   # 跟踪 窗体 
              self . track 
_ window = track _ window         
      # 更换 颜色 空间       
        self . roi = cv2 . 
cvtColor frame y y + h x x + w 
cv2 . COLOR _ BGR2HSV           
    # 计算 roi 图形 的 彩色 直方图   
            roi _ hist = 
cv2 . calcHist self . roi 0 None 16 0 
180               self . 
roi _ hist = cv2 . normalize roi _ hist 
roi _ hist 0 255 cv2 . NORM _ MINMAX 
              # 设置 卡尔曼 
滤波器               self . 
kalman = cv2 . KalmanFilter 4 2       
        self . kalman . m e 
a s u r e m e n t M 
a t r i x = np . array 1 
0 0 0 0 1 0 0 np . float32 
              self . kalman 
. transitionMatrix = np . array 1 0 1 0 
0 1 0 1 0 0 1 0 0 0 
0 1 np . float32           
    self . kalman . processNoiseCov = np . 
array 1 0 0 0 0 1 0 0 0 
0 1 0 0 0 0 1       
                    
                    
                    
                    
      np . float32 * 0.03     
          # 测量 坐标     
          self . measurement = np 
. array 2 1 np . float32       
        # 鼠标 运动 预测     
          self . predication = np 
. zeros 2 1 np . float32       
        # 指定 停止 条件     
          self . term _ crit 
= cv2 . TERM _ CRITERIA _ EPS | cv2 
. TERM _ CRITERIA _ COUNT 10 1     
          self . center = None 
              self . update 
frame       def _ _ del _ _ 
self               print Pedestrian 
% d destroyed % self . id       
# 更新 图像 帧       def update self 
frame               # 更换 
颜色 空间               hsv 
= cv2 . cvtColor frame cv2 . COLOR _ BGR2HSV 
              # histogram back 
projection calculation 直方图 反向 投影           
    back _ project = cv2 . calcBackProject hsv 
0 self . roi _ hist 0 180 1   
            # camshift     
          if args . get algorithm 
= = c               
        ret self . track _ window 
= cv2 . CamShift back _ project self . track 
_ window self . term _ crit       
                # 绘制 
跟踪 框                 
      pts = cv2 . boxPoints ret   
                    
pts = np . int0 pts         
              self . center 
= center pts               
        cv2 . polylines frame pts True 
255 1               # 
均值 漂移               if 
not args . get algorithm or args . get algorithm 
= = m               
        ret self . track _ window 
= cv2 . meanShift back _ project self . track 
_ window self . term _ crit       
                # 绘制 
跟踪 框                 
      x y w h = self . 
track _ window               
        self . center = center x 
y x + w y x y + h x 
+ w y + h           
            cv2 . rectangle frame 
x y x + w y + h 255 255 
0 2               self 
. kalman . correct self . center       
        prediction = self . kalman . 
predict               cv2 . 
circle frame int prediction 0 int prediction 1 4 0 
255 0 1               
# 计数器               cv2 
. putText frame ID % d % s % self 
. id self . center 11 self . id + 
1 * 25 + 1 font 0.6 0 0 0 
                    
                  1 
cv2 . LINE _ AA           
    # 跟踪 窗口 坐标         
      cv2 . putText frame ID % d 
% s % self . id self . center 10 
self . id + 1 * 25 font 0.6 0 
255 0                 
                    
  1 cv2 . LINE _ AA def main   
    # 加载 视频       # camera 
= cv2 . VideoCapture . . / movie . mpg 
      # camera = cv2 . VideoCapture . 
. / traffic . flv       camera = 
cv2 . VideoCapture . . / 768x576 . avi   
    # 初始化 背景 分割器       history 
= 20       bs = cv2 . c 
r e a t e B a c k g 
r o u n d u b t r a 
c t o r K N N detectShadows = True 
      # 创建 显示 主 窗口     
  cv2 . namedWindow surveillance       pedestrians = 
{ }   # 行人 字典       firstFrame 
= True       frames = 0     
  fourcc = cv2 . VideoWriter _ fourcc * XVID 
      out = cv2 . VideoWriter . . 
/ output . avi fourcc 20.0 640 480     
  while True               
print frmae % d % frames         
      grabbed frane = camera . read   
            if grabbed is False 
                    
  print failed to grab frame         
              break     
          ret frame = camera . 
read               fgmask = 
bs . apply frame             
  if frames history             
          frames + = 1   
                    
continue               # 设置 
阈值               th = 
cv2 . threshold fgmask . copy 127 255 cv2 . 
THRESH _ BINARY 1             
  # 腐蚀               
th = cv2 . erode th cv2 . g e 
t t r u c t u r i n 
g E l e m e n t cv2 . 
MORPH _ ELLIPSE 3 3 iterations = 2     
          # 膨胀       
        dilated = cv2 . dilate th 
cv2 . g e t t r u c t 
u r i n g E l e m e 
n t cv2 . MORPH _ ELLIPSE 8 3 iterations 
= 2               # 
查找 轮廓               image 
contours hier = cv2 . findContours dilated cv2 . RETR 
_ EXTERNAL cv2 . CHAIN _ APPROX _ SIMPLE   
            counter = 0   
            for c in contours 
                    
  if cv2 . contourArea c 500       
                    
    # 边界 数组           
                    
x y w h = cv2 . boundingRect c   
                    
        # 绘制 矩形       
                    
    cv2 . rectangle frame x y x + 
w y + h 0 255 0 1     
                    
      if firstFrame is True       
                    
            pedestrians counter = Pedestrian 
counter frame x y w h         
                    
  counter + = 1           
    # 更新 帧 内容         
      for i p in pedestrians . items 
                    
  p . update frame           
    # false 只 跟踪 已有 的 行人   
            # firstFrame = True 
              firstFrame = False 
              frames + = 
1               # 显示 
              cv2 . imshow 
surveillance frame               out 
. write frame               
if cv2 . waitKey 120 & 0xFF = = 27 
  # esc 退出             
          break       out 
. release       camera . release if _ 
_ name _ _ = = _ _ main _ 
_       main 运行 结果 如下 第八章 目标 跟踪 1 检测 目标 的 移动 基本 的 
运动 检测 示例代码 如下 import cv2 import numpy as np 
# 捕获 摄像头 图像 camera = cv2 . VideoCapture 0 
# es = cv2 . g e t t r 
u c t u r i n g E l 
e m e n t cv2 . MORPH _ ELLIPSE 
10 10 kernel = np . ones 5 5 np 
. uint8 background = None while True       
ret frame = camera . read       # 
将 第一 帧 设为 图像 的 背景       
if background is None             
  # 转换 颜色 空间           
    background = cv2 . cvtColor frame cv2 . 
COLOR _ BGR2GRAY               
# 高斯 模糊               
background = cv2 . GaussianBlur background 21 21 0   
            continue       
# 转换 颜色 空间 并作 模糊 处理       
gray _ frame = cv2 . cvtColor frame cv2 . 
COLOR _ BGR2GRAY       gray _ frame = 
cv2 . GaussianBlur gray _ frame 21 21 0   
    # 取得 差分 图       diff 
= cv2 . absdiff background gray _ frame     
  diff = cv2 . threshold diff 25 255 cv2 
. THRESH _ BINARY 1       # 膨胀 
      diff = cv2 . dilate diff es 
iterations = 2       # 得到 图像 中 
目标 的 轮廓       image cnts hierarchy = 
cv2 . findContours diff . copy cv2 . RETR _ 
EXTERNAL cv2 . CHAIN _ APPROX _ SIMPLE     
  for c in cnts           
    if cv2 . contourArea c 1500     
                  continue 
              # 计算 矩形 
边框               x y 
w h = cv2 . boundingRect c       
        # 绘制 矩形       
        cv2 . rectangle frame x y 
x + w y + h 0 255 0 2 
      # 显示 图像       cv2 
. imshow contours frame       cv2 . imshow 
dif diff       if cv2 . waitKey int 
1000 / 12 & 0xFF = = ord q   
            break cv2 . d 
e s t r o y A l l W 
i n d o w s camera . release 运行 
结果 如下 2 背景 分割器 knn mog2 和 GMGOpencv3 有三种 
背景 分割器 K nearest knn Mixture of Gaussians MOG2 Geometric 
multigid GMC b a c k g r o u 
n d u b t r a c t o 
r 用于 分割 前景 和 背景 示例代码 如下 import cv2 
import numpy as np cv2 . ocl . setUseOpenCL False 
cap = cv2 . VideoCapture 0 mog = cv2 . 
c r e a t e B a c k 
g r o u n d u b t r 
a c t o r M O G 2 while 
True       ret frame = cap . read 
      fgmask = mog . apply frame   
    cv2 . imshow frame fgmask       
if cv2 . waitKey 30 & 0xFF = = ord 
q               break cap 
. release cv2 . d e s t r o 
y A l l W i n d o w 
s 运行 结果 如下 使用 b a c k g 
r o u n d u b t r a 
c t o r K N N 来 实现 运动 
检测 示例代码 如下 import cv2 cv2 . ocl . setUseOpenCL 
False bs = cv2 . c r e a t 
e B a c k g r o u n 
d u b t r a c t o r 
K N N detectShadows = True # 读取 本地 视频 
camera = cv2 . VideoCapture . . / traffic . 
flv while True       ret frame = camera 
. read       fgmask = bs . apply 
frame . copy       # 设置 阈值   
    th = cv2 . threshold fgmask   # 
源 图像                 
                    
        244   # 阈值     
                    
                    
255   # 最大值             
                    
            cv2 . THRESH _ 
BINARY 1   # 阈 值类型       # 
膨胀       dilated = cv2 . dilate th 
  # 源 图像             
                    
                cv2 . 
g e t t r u c t u r 
i n g E l e m e n t 
cv2 . MORPH _ ELLIPSE 3 3   # 内核 
                    
                    
        iterations = 2   # 腐蚀 
次数       # 查找 图像 中 的 目标 
轮廓       image contours hier = cv2 . 
findContours dilated cv2 . RETR _ EXTERNAL cv2 . CHAIN 
_ APPROX _ SIMPLE       for c in 
contours               if cv2 
. contourArea c 1600             
          x y w h = 
cv2 . boundingRect c             
          cv2 . rectangle frame x 
y x + w y + h 255 255 0 
2       cv2 . imshow mog fgmask   
# 分割 前景 与 背景       cv2 . 
imshow thresh th   #       cv2 . 
imshow detection frame   # 运动 检测 结果     
  if cv2 . waitKey 30 & 0xFF = = 
27               break camera 
. release cv2 . d e s t r o 
y A l l W i n d o w 
s 运行 结果 如下 均值 漂移 meanShift 示例代码 如下 import 
cv2 import numpy as np # 取得 摄像头 图像 cap 
= cv2 . VideoCapture 0 ret frame = cap . 
read # 设置 跟踪 窗体 大小 r h c w 
= 10 200 10 200 track _ window = c 
r w h # 提取 roi roi = frame r 
r + h c c + w # 转换 颜色 
空间 hsv _ roi = cv2 . cvtColor frame cv2 
. COLOR _ BGR2HSV # 根据 阈值 构建 掩码 mask 
= cv2 . inRange hsv _ roi np . array 
100 . 30 . 32 . np . array 180 
. 120 . 255 . # 计算 roi 图形 的 
彩色 直方图 roi _ hist = cv2 . calcHist hsv 
_ roi 0 mask 180 0 180 cv2 . normalize 
roi _ hist roi _ hist 0 255 cv2 . 
NORM _ MINMAX # 指定 停止 条件 term _ crit 
= cv2 . TERM _ CRITERIA _ EPS | cv2 
. TERM _ CRITERIA _ COUNT 10 1 while True 
      ret frame = cap . read   
    if ret = = True       
        # 更换 颜色 空间     
          hsv = cv2 . cvtColor 
frame cv2 . COLOR _ BGR2HSV         
      # histogram back projection calculation 直方图 反向 
投影               dst = 
cv2 . calcBackProject hsv 0 roi _ hist 0 180 
1               # 均值 
漂移               ret track 
_ window = cv2 . meanShift dst track _ window 
term _ crit               
# 绘制 矩形 显示 图像           
    x y w h = track _ window 
              img2 = cv2 
. rectangle frame x y x + w y + 
h 255 2               
cv2 . imshow img2 img2           
    # esc 退出           
    if cv2 . waitKey 60 & 0xFF = 
= 27                 
      break       else     
          break cv2 . d e 
s t r o y A l l W i 
n d o w s cap . release 运行 结果 
如下 彩色 直方图 calHist 函数 函数 原型 def calcHist images 
# 源 图像 channels # 通道 列表 mask # 可选 
的 掩码 histSize # 每个 维度 下 直方图 数组 的 
大小 ranges # 每 一个 维度 下 直方图 bin 的 
上下 界 的 数组 hist = None # 输出 直方图 
是 一个 维 稠 密度 的 数组 accumulate = None 
# 累计 标志 Camshift 示例代码 如下 # / usr / 
bin / env python # * coding utf 8 * 
# @ Time       2016 / 12/15 16 
48 # @ Author   Retacn # @ Site   
    camshift 实现 物体 跟踪 # @ File   
    camshift . py # @ Software PyCharm _ 
_ author _ _ = retacn _ _ copyright _ 
_ = property of mankind . _ _ license _ 
_ = CN _ _ version _ _ = 0 
. 0.1 _ _ maintainer _ _ = retacn _ 
_ email _ _ = zhenhuayue @ sina . com 
_ _ status _ _ = Development import cv2 import 
numpy as np # 取得 摄像头 图像 cap = cv2 
. VideoCapture 0 ret frame = cap . read # 
设置 跟踪 窗体 大小 r h c w = 300 
200 400 300 track _ window = c r w 
h # 提取 roi roi = frame r r + 
h c c + w # 转换 颜色 空间 hsv 
_ roi = cv2 . cvtColor frame cv2 . COLOR 
_ BGR2HSV # 根据 阈值 构建 掩码 mask = cv2 
. inRange hsv _ roi np . array 100 . 
30 . 32 . np . array 180 . 120 
. 255 . # 计算 roi 图形 的 彩色 直方图 
roi _ hist = cv2 . calcHist hsv _ roi 
0 mask 180 0 180 cv2 . normalize roi _ 
hist roi _ hist 0 255 cv2 . NORM _ 
MINMAX # 指定 停止 条件 term _ crit = cv2 
. TERM _ CRITERIA _ EPS | cv2 . TERM 
_ CRITERIA _ COUNT 10 1 while True     
  ret frame = cap . read       
if ret = = True           
    # 更换 颜色 空间         
      hsv = cv2 . cvtColor frame cv2 
. COLOR _ BGR2HSV             
  # histogram back projection calculation 直方图 反向 投影   
            dst = cv2 . 
calcBackProject hsv 0 roi _ hist 0 180 1   
            # 均值 漂移   
            ret track _ window 
= cv2 . CamShift dst track _ window term _ 
crit               # 绘制 
矩形 显示 图像               
pts = cv2 . boxPoints ret         
      pts = np . int0 pts   
            img2 = cv2 . 
polylines frame pts True 255 2         
      cv2 . imshow img2 img2     
          # esc 退出     
          if cv2 . waitKey 60 
& 0xFF = = 27           
            break       
else               break cv2 
. d e s t r o y A l 
l W i n d o w s cap . 
release 运行 结果 如下 4 卡尔曼 滤波器 函数 原型 为 
def KalmanFilter dynamParams = None # 状态 的 维度 measureParams 
= None # 测量 的 维度 controlParams = None # 
控制 的 维度 type = None # 矩阵 的 类型 
示例代码 如下 import cv2 import numpy as np # 创建 
空帧/nr frame = np . zeros 800 800 3 np 
. uint8 # 测量 坐标 last _ measurement = current 
_ measurement = np . array 2 1 np . 
float32 # 鼠标 运动 预测 last _ prediction = current 
_ predication = np . zeros 2 1 np . 
float32 def mousemove event x y s p     
  # 设置 全局变量       global frame measurements 
current _ measurement last _ measurement current _ predication last 
_ prediction       last _ prediction = current 
_ predication       last _ measurement = current 
_ measurement       current _ measurement = np 
. array np . float32 x np . float32 y 
      kalman . correct current _ measurement   
    current _ predication = kalman . predict   
    # 实际 移动 起始 点       
lmx lmy = last _ measurement 0 last _ measurement 
1       cmx cmy = current _ measurement 
0 current _ measurement 1       # 预测 
线 起止点       lpx lpy = last _ 
prediction 0 last _ prediction 1       cpx 
cpy = current _ predication 0 current _ predication 1 
      # 绘制 连线       cv2 
. line frame lmx lmy cmx cmy 0 100 0 
  # 绿色       cv2 . line frame 
lpx lpy cpx cpy 0 0 200   # 红色 
# 创建 窗体 cv2 . namedWindow mouse _ detection # 
注册 鼠标 事件 的 回调函数 cv2 . setMouseCallback mouse _ 
detection mousemove # 卡尔曼 滤波器 kalman = cv2 . KalmanFilter 
4 2 kalman . m e a s u r 
e m e n t M a t r i 
x = np . array 1 0 0 0 0 
1 0 0 np . float32 kalman . transitionMatrix = 
np . array 1 0 1 0 0 1 0 
1 0 0 1 0 0 0 0 1 np 
. float32 kalman . processNoiseCov = np . array 1 
0 0 0 0 1 0 0 0 0 1 
0 0 0 0 1 np . float32 * 0.03 
while True       cv2 . imshow mouse _ 
detection frame       if cv2 . waitKey 30 
& 0xFF = = 27           
    break cv2 . d e s t r 
o y A l l W i n d o 
w s 运行 结果 如下 一个 基于 行人 跟踪 的 
例子 示例代码 如下 import cv2 import numpy as np import 
os . path as path import argparse font = cv2 
. FONT _ HERSHEY _ SIMPLEX parser = argparse . 
ArgumentParser parser . add _ argument a algorithm     
                    
              help = m 
or nothing for meanShift and c for camshift args = 
vars parser . parse _ args # 计算 矩阵 中心 
行人 位置 def center points       x = 
points 0 0 + points 1 0 + points 2 
0 + points 3 0 / 4       
y = points 0 1 + points 1 1 + 
points 2 1 + points 3 1 / 4   
    # print np . array np . float32 
x np . float32 y np . float32     
  # 588 .     257.5       
return np . array np . float32 x np . 
float32 y np . float32 # 行人 class Pedestrian   
    def _ _ init _ _ self id 
frame track _ window             
  self . id = int id   # 行人 
id               x y 
w h = track _ window   # 跟踪 窗体 
              self . track 
_ window = track _ window         
      # 更换 颜色 空间       
        self . roi = cv2 . 
cvtColor frame y y + h x x + w 
cv2 . COLOR _ BGR2HSV           
    # 计算 roi 图形 的 彩色 直方图   
            roi _ hist = 
cv2 . calcHist self . roi 0 None 16 0 
180               self . 
roi _ hist = cv2 . normalize roi _ hist 
roi _ hist 0 255 cv2 . NORM _ MINMAX 
              # 设置 卡尔曼 
滤波器               self . 
kalman = cv2 . KalmanFilter 4 2       
        self . kalman . m e 
a s u r e m e n t M 
a t r i x = np . array 1 
0 0 0 0 1 0 0 np . float32 
              self . kalman 
. transitionMatrix = np . array 1 0 1 0 
0 1 0 1 0 0 1 0 0 0 
0 1 np . float32           
    self . kalman . processNoiseCov = np . 
array 1 0 0 0 0 1 0 0 0 
0 1 0 0 0 0 1       
                    
                    
                    
                    
      np . float32 * 0.03     
          # 测量 坐标     
          self . measurement = np 
. array 2 1 np . float32       
        # 鼠标 运动 预测     
          self . predication = np 
. zeros 2 1 np . float32       
        # 指定 停止 条件     
          self . term _ crit 
= cv2 . TERM _ CRITERIA _ EPS | cv2 
. TERM _ CRITERIA _ COUNT 10 1     
          self . center = None 
              self . update 
frame       def _ _ del _ _ 
self               print Pedestrian 
% d destroyed % self . id       
# 更新 图像 帧       def update self 
frame               # 更换 
颜色 空间               hsv 
= cv2 . cvtColor frame cv2 . COLOR _ BGR2HSV 
              # histogram back 
projection calculation 直方图 反向 投影           
    back _ project = cv2 . calcBackProject hsv 
0 self . roi _ hist 0 180 1   
            # camshift     
          if args . get algorithm 
= = c               
        ret self . track _ window 
= cv2 . CamShift back _ project self . track 
_ window self . term _ crit       
                # 绘制 
跟踪 框                 
      pts = cv2 . boxPoints ret   
                    
pts = np . int0 pts         
              self . center 
= center pts               
        cv2 . polylines frame pts True 
255 1               # 
均值 漂移               if 
not args . get algorithm or args . get algorithm 
= = m               
        ret self . track _ window 
= cv2 . meanShift back _ project self . track 
_ window self . term _ crit       
                # 绘制 
跟踪 框                 
      x y w h = self . 
track _ window               
        self . center = center x 
y x + w y x y + h x 
+ w y + h           
            cv2 . rectangle frame 
x y x + w y + h 255 255 
0 2               self 
. kalman . correct self . center       
        prediction = self . kalman . 
predict               cv2 . 
circle frame int prediction 0 int prediction 1 4 0 
255 0 1               
# 计数器               cv2 
. putText frame ID % d % s % self 
. id self . center 11 self . id + 
1 * 25 + 1 font 0.6 0 0 0 
                    
                  1 
cv2 . LINE _ AA           
    # 跟踪 窗口 坐标         
      cv2 . putText frame ID % d 
% s % self . id self . center 10 
self . id + 1 * 25 font 0.6 0 
255 0                 
                    
  1 cv2 . LINE _ AA def main   
    # 加载 视频       # camera 
= cv2 . VideoCapture . . / movie . mpg 
      # camera = cv2 . VideoCapture . 
. / traffic . flv       camera = 
cv2 . VideoCapture . . / 768x576 . avi   
    # 初始化 背景 分割器       history 
= 20       bs = cv2 . c 
r e a t e B a c k g 
r o u n d u b t r a 
c t o r K N N detectShadows = True 
      # 创建 显示 主 窗口     
  cv2 . namedWindow surveillance       pedestrians = 
{ }   # 行人 字典       firstFrame 
= True       frames = 0     
  fourcc = cv2 . VideoWriter _ fourcc * XVID 
      out = cv2 . VideoWriter . . 
/ output . avi fourcc 20.0 640 480     
  while True               
print frmae % d % frames         
      grabbed frane = camera . read   
            if grabbed is False 
                    
  print failed to grab frame         
              break     
          ret frame = camera . 
read               fgmask = 
bs . apply frame             
  if frames history             
          frames + = 1   
                    
continue               # 设置 
阈值               th = 
cv2 . threshold fgmask . copy 127 255 cv2 . 
THRESH _ BINARY 1             
  # 腐蚀               
th = cv2 . erode th cv2 . g e 
t t r u c t u r i n 
g E l e m e n t cv2 . 
MORPH _ ELLIPSE 3 3 iterations = 2     
          # 膨胀       
        dilated = cv2 . dilate th 
cv2 . g e t t r u c t 
u r i n g E l e m e 
n t cv2 . MORPH _ ELLIPSE 8 3 iterations 
= 2               # 
查找 轮廓               image 
contours hier = cv2 . findContours dilated cv2 . RETR 
_ EXTERNAL cv2 . CHAIN _ APPROX _ SIMPLE   
            counter = 0   
            for c in contours 
                    
  if cv2 . contourArea c 500       
                    
    # 边界 数组           
                    
x y w h = cv2 . boundingRect c   
                    
        # 绘制 矩形       
                    
    cv2 . rectangle frame x y x + 
w y + h 0 255 0 1     
                    
      if firstFrame is True       
                    
            pedestrians counter = Pedestrian 
counter frame x y w h         
                    
  counter + = 1           
    # 更新 帧 内容         
      for i p in pedestrians . items 
                    
  p . update frame           
    # false 只 跟踪 已有 的 行人   
            # firstFrame = True 
              firstFrame = False 
              frames + = 
1               # 显示 
              cv2 . imshow 
surveillance frame               out 
. write frame               
if cv2 . waitKey 120 & 0xFF = = 27 
  # esc 退出             
          break       out 
. release       camera . release if _ 
_ name _ _ = = _ _ main _ 
_       main 运行 结果 如下 