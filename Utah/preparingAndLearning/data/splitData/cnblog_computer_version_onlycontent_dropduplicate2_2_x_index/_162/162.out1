一 Mask RCNN 流程 Mask R CNN 是 一个 实例 
分割 Instance segmentation 算法 通过 增加 不同 的 分支 可以 
完成 目标 分类 目标 检测 语义 分割 实例 分割 人体 
姿势 识别 等 多种 任务 灵活 而 强大 Mask R 
CNN 进行 目标 检测 与 实例 分割 Mask R CNN 
进行 人体 姿态 识别 其 抽象 架构 如下 首先 输入 
一幅 你 想 处理 的 图片 然后 进行 对应 的 
预处理 操作 或者 预处理 后的/nr 图片 然后 将其 输入 到 
一个 预 训 练好 的 神经 网络 中 ResNeXt 等 
获得 对应 的 feature map 接着 对 这个 feature map 
中的 每 一点 设定 预定 个 的 ROI 从而 获得 
多 个 候选 ROI 接着 将 这些 候选 的 ROI 
送入 RPN 网络 进行 二 值 分类 前景 或 背景 
和 BB 回归 过滤 掉 一部分 候选 的 ROI 截止 
到 目前 Mask 和 Faster 完全相同 其实 R FCN 之类 
的 在这之前 也 没有 什么 不同 接着 对 这些 剩下 
的 ROI 进行 ROIAlign 操作 即 先将 原图 和 feature 
map 的 pixel 对应 起来 然后 将 feature map 和 
固定 的 feature 对应 起来 ROIAlign 为 本文 创新 点 
1 比 ROIPooling 有 长足 进步 最后 对 这些 ROI 
进行 分类 N 类别 分类 BB 回归 和 MASK 生成 
在 每一个 ROI 里面 进行 FCN 操作 引入 FCN 生成 
Mask 为 本文 创新 点 2 使得 本文 结构 可以 
进行 分割 型 任务 注 有关 MASK 部分 还有 一处 
容易 忽视 的 创新 点 3 损失 函数 的 计算 
作者 放弃 了 更 广泛 的 softmax 转而 使用 了 
sigmoid 避免了 同类 竞争 更多 的 经历 放在 优化 mask 
像素 上 这 一点 我们 下 一小 节会 提到 二 
Mask RCNN 结构 ROIPooling 的 问题 RoiPool 过程 假定 我们 
输入 的 是 一张 800x800 的 图像 在 图像 中 
有 两个 目标 猫 和狗/nr 狗 的 BB 大小 为 
665x665 经过 VGG16 网络 后 获得 的 feature map 会比 
原图 缩小 一定 的 比例 这/r 和/c Pooling/w 层/q 的/uj 
个数/n 和/c 大小/b 有关/vn 在 该 VGG16 中 我们 使用 
了 5个 池化/nr 操作 每个 池化/nr 操作 都是 2Pooling 因此 
我们 最终 获得 feature map 的 大小 为 800/32 x 
800/32 = 25x25 是 整数 但是 将 狗 的 BB 
对应 到 feature map 上面 我们 得到 的 结果 是 
665/32 x 665/32 = 20.78 x 20.78 结果 是 浮点数 
含有 小数 取整 变为 20 x 20 在 这里 引入 
了 第一次 的 量化 误差 然后 我们 需要 将 20 
x 20 的 ROI 映 射成 7 x 7 的 
ROI feature 其 结果 是 20 / 7 x 20/7 
= 2.86 x 2.86 同样 是 浮点数 含有 小数点 同样 
的 取整 在 这里 引入 了 第二次 量化 误差 这里 
引入 的 误差 会 导致 图像 中 的 像素 和 
特征 中的 像素 的 偏差 即将 feature 空间 的 ROI 
对应 到 原图 上面 会 出现 很大 的 偏差 原因 
如下 比如 用 我们 第二 次 引入 的 误差 来 
分析 本来 是 2 86 我们 将 其量 化为 2 
这期间 引入 了 0.86 的 feature 空间误差 我们/r 的/uj feature/w 
空间/n 和/c 图像/n 空间/n 是/v 有/v 比例/n 关系/n 的/uj 在 
这里 是 1 32 那么 对 应到 原图 上面 的 
差距 就是 0.86 x 32 = 27.52 这 仅仅 考虑 
了 第二次 的 量化 误差 ROIAlignROIAlign 过程 为了 得到 为了 
得到 固定 大小 7X7 的 feature map ROIAlign 技术 并 
没有 使 用量 化 操作 取而代之 的 使用 了 双 
线性插值 它 充分 的 利用 了 原图 中 虚拟 点 
比如 20.56 这个 浮点数 像素 位置 都是/nr 整数 值 没有 
浮点 值 四周 的 四个 真实 存在 的 像素 值 
来 共同 决定 目标 图中 的 一个 像素 值 即 
可以 将 20.56 这个 虚拟 的 位置 点 对应 的 
像素 值 估计 出来 蓝色 的 虚 线框 表示 卷积 
后 获得 的 feature map 黑色 实 线框 表示 ROI 
feature 最后 需要 输出 的 大小 是 2x2 那么 我们 
就 利用 双 线性插值 来 估计 这些 蓝点 虚拟 坐标 
点 又称 双 线性插值 的 网 格点 处所 对应 的 
像素 值 最后 得到 相应 的 输出 然后 在 每一个 
橘红色 的 区域 里面 进行 max pooling 或者 average pooling 
操作 获得 最终 2x2 的 输出 结果 我们 的 整个 
过程 中 没有 用到 量化 操作 没有 引入 误差 即 
原图 中的 像素 和 feature map 中的 像素 是 完全 
对齐 的 没有 偏差 这 不仅 会 提高 检测 的 
精度 同时 也 会 有利于 实例 分割 ROI 处理 架构 
为了 证明 我们 方法 的 通用性 我们 构造 了 多种 
不同 结构 的 Mask R CNN 详细 的 说 我们 
使用 不同 的 i 用于 整个 图像 上 的 特征 
提取 的 卷积 主干 架构 ii 用于 边框 识别 分类 
和 回归 和 掩模 预测 的 上层 网络 分别 应用 
于 每个 RoI 我们 使用 术语 网络 深层 特征 来 
命名 下层 架构 我们 评估 了 深度 为 50 或 
101层 的 ResNet 14 和 ResNeXt 34 网络 使用 ResNet 
14 的 Faster R CNN 从 第四 级 的 最终 
卷积 层 提取 特征 我们 称之为 C4 例如 使用 ResNet 
50 的 主干 架构 由 ResNet 50 C4 表示 这是 
14 7 16 30 中 常用 的 选择 我们 也 
探索 了 由 Li 21 等人 最近 提出 的 另一种 
更 有效 主干 架构 称 为特征 金字塔 网络 FPN FPN 
使用 具有 横向 连接 lateral connections 的 自顶向下 架构 从 
单一 规模 的 输入 构建 网络 功能 金字塔 使用 FPN 
的 Faster R CNN 根据 其 尺度 提取 不同 级别 
的 金字塔 的 RoI 特征 不过 其他 部分 和 平常 
的 ResNet 类似 使用 ResNet FPN 主干 架构 的 Mask 
R CNN 进行 特征提取 可以 在 精度 和 速度 方面 
获得 极大 的 提升 有关 FPN 的 更多 细节 读者 
可以 参考 21 对于 上层 网络 我们 基本 遵循 了 
以前 论文 中 提出 的 架构 我们 添加 了 一个 
全 卷积 的 掩模 预测 分支 具体来说 我们 扩展 了 
ResNet 14 和 FPN 21 中 提出 的 Faster R 
CNN 的 上层 网络 详情 见 下图 所示 上层 架构 
我们 扩展 了 两种 现有 的 Faster R CNN 上层 
架构 14 21 并 分别 添加 了 一个 掩模 分支 
左/右/nr 面板 分别 显示 了 ResNet C4 和 FPN 主干 
的 上层 架构 图中/i 数字/n 表示/v 通/v 道数/n 和/c 分辨率/n 
箭头 表示 卷积 反/zg 卷积/n 和全/nr 连接/v 层/q 可以 通过 
上下文 推断 卷积 减小 维度 反 卷积 增加 维度 所有 
的 卷积 都是 3 × 3 的 除了 输出 层 
是 1 × 1 反 卷积 是 2 × 2 
其 步进 为 2 我们 在 隐藏 层 中 使用 
ReLU 24 在 左 图中 res5 表示 ResNet 的 第五级/nr 
简单 起见 我们 修改 了 第一 个 卷积 操作 使用 
7 × 7 步 长为 1 的 RoI 代替 14 
× 14 步 长为 2 的 RoI 14 右图 中的 
× 4 表示 堆叠 的 4个 连续 的 卷积 ResNet 
C4 主干 的 上层 网络 包括 ResNet 的 第 5 
阶段 即 9层 的 res5 14 这是 计算 密集型 的 
但 对于 FPN 其 主干 已经 包含 了 res5 因此 
可以 使 上层 网络 包含 更少 的 卷积 核 而 
变 的 更加 高效 重点 在于 作者 把 各种 网络 
作为 backbone 进行 对比 发现 使用 ResNet FPN 作为 特征提取 
的 backbone 具有 更高 的 精度 和 更快 的 运行 
速度 所以 实际 工作 时 大都 采用 右图 的 完全 
并行 的 mask / 分类 回归 mask 分支 针对 每个 
RoI 产生 一个 K * m * m 的 输出 
即 K 个 分辨率 为 m * m 的 二 
值 的 掩膜 K 为 分类 物体 的 种类 数目 
依 据预测 类别 分支 预测 的 输出 我们 仅 将 
第 i 个 类别 的 输出 登记 用于 计算 Mask 
R CNN 采用 了 和 Faster R CNN 相同 的 
两步 走 策略 即 先 使用 RPN 提取 候选 区域 
关于 RPN 的 详细 介绍 可以 参考 Faster R CNN 
一文 不同于 Faster R CNN 中 使用 分类 和 回归 
的 多任务 回归 Mask R CNN 在其 基础 上 并行 
添加 了 一个 用于 语义 分割 的 Mask 损失 函数 
所以 Mask R CNN 的 损失 函数 可以 表示 为 
下式 上式 中 表示 bounding box 的 分类 损失 值 
表示 bounding box 的 回归 损失 值 表示 mask 部分 
的 损失 值 对于 预测 的 二 值 掩膜 输出 
我们 对 每个 像素点 应用 sigmoid 函数 整体 损失 定义 
为 平均 二 值 交叉 损失 熵 引入 预测 K 
个 输出 的 机制 允许 每个 类 都 生成 独立 
的 掩膜 避免 类 间 竞争 这样 做 解耦 了 
掩膜 和 种类 预测 不像 FCN 的 做法 在 每个 
像素点 上 应用 softmax 函数 整体 采用 的 多任务 交叉 
熵 这样 会 导致 类 间 竞争 最终 导致 分割 
效果 差 训练 参数 面试 考点 这 一部分 是 临时 
看到 面经 感觉 还是 有 不少 RCNN 系列 发展 的 
要点 记录下来 以后 再看 RCNN 时 可以 带着 问题 回忆 
RPN 作用 和 原理 RPN 提 出于 Faster 所以 参考 
之前 的 文章 计算机 视觉 经典 RCNN _ 其一 从 
RCNN 到 Faster RCNNROI align 和 ROI pooling 的 不同 
各 部分 损失 函数 选用 的 什么 函数 参考 后续 
文章 计算机 视觉 Mask RCNN _ 训练 网络 其二 train 
网络结构 & 损失 函数 三 参考资料 Mask R CNNMask R 
CNN 详解 TensorFlow 实战 Chapter 8 上 Mask R CNN 
介绍 与 实现 开 源代码 Tensorflow 版本 代码 链接 Keras 
and TensorFlow 版本 代码 链接 MxNet 版本 代码 链接 一 Mask RCNN 流程 Mask R CNN 是 一个 实例 
分割 Instance segmentation 算法 通过 增加 不同 的 分支 可以 
完成 目标 分类 目标 检测 语义 分割 实例 分割 人体 
姿势 识别 等 多种 任务 灵活 而 强大 Mask R 
CNN 进行 目标 检测 与 实例 分割 Mask R CNN 
进行 人体 姿态 识别 其 抽象 架构 如下 首先 输入 
一幅 你 想 处理 的 图片 然后 进行 对应 的 
预处理 操作 或者 预处理 后的/nr 图片 然后 将其 输入 到 
一个 预 训 练好 的 神经 网络 中 ResNeXt 等 
获得 对应 的 feature map 接着 对 这个 feature map 
中的 每 一点 设定 预定 个 的 ROI 从而 获得 
多 个 候选 ROI 接着 将 这些 候选 的 ROI 
送入 RPN 网络 进行 二 值 分类 前景 或 背景 
和 BB 回归 过滤 掉 一部分 候选 的 ROI 截止 
到 目前 Mask 和 Faster 完全相同 其实 R FCN 之类 
的 在这之前 也 没有 什么 不同 接着 对 这些 剩下 
的 ROI 进行 ROIAlign 操作 即 先将 原图 和 feature 
map 的 pixel 对应 起来 然后 将 feature map 和 
固定 的 feature 对应 起来 ROIAlign 为 本文 创新 点 
1 比 ROIPooling 有 长足 进步 最后 对 这些 ROI 
进行 分类 N 类别 分类 BB 回归 和 MASK 生成 
在 每一个 ROI 里面 进行 FCN 操作 引入 FCN 生成 
Mask 为 本文 创新 点 2 使得 本文 结构 可以 
进行 分割 型 任务 注 有关 MASK 部分 还有 一处 
容易 忽视 的 创新 点 3 损失 函数 的 计算 
作者 放弃 了 更 广泛 的 softmax 转而 使用 了 
sigmoid 避免了 同类 竞争 更多 的 经历 放在 优化 mask 
像素 上 这 一点 我们 下 一小 节会 提到 二 
Mask RCNN 结构 ROIPooling 的 问题 RoiPool 过程 假定 我们 
输入 的 是 一张 800x800 的 图像 在 图像 中 
有 两个 目标 猫 和狗/nr 狗 的 BB 大小 为 
665x665 经过 VGG16 网络 后 获得 的 feature map 会比 
原图 缩小 一定 的 比例 这/r 和/c Pooling/w 层/q 的/uj 
个数/n 和/c 大小/b 有关/vn 在 该 VGG16 中 我们 使用 
了 5个 池化/nr 操作 每个 池化/nr 操作 都是 2Pooling 因此 
我们 最终 获得 feature map 的 大小 为 800/32 x 
800/32 = 25x25 是 整数 但是 将 狗 的 BB 
对应 到 feature map 上面 我们 得到 的 结果 是 
665/32 x 665/32 = 20.78 x 20.78 结果 是 浮点数 
含有 小数 取整 变为 20 x 20 在 这里 引入 
了 第一次 的 量化 误差 然后 我们 需要 将 20 
x 20 的 ROI 映 射成 7 x 7 的 
ROI feature 其 结果 是 20 / 7 x 20/7 
= 2.86 x 2.86 同样 是 浮点数 含有 小数点 同样 
的 取整 在 这里 引入 了 第二次 量化 误差 这里 
引入 的 误差 会 导致 图像 中 的 像素 和 
特征 中的 像素 的 偏差 即将 feature 空间 的 ROI 
对应 到 原图 上面 会 出现 很大 的 偏差 原因 
如下 比如 用 我们 第二 次 引入 的 误差 来 
分析 本来 是 2 86 我们 将 其量 化为 2 
这期间 引入 了 0.86 的 feature 空间误差 我们/r 的/uj feature/w 
空间/n 和/c 图像/n 空间/n 是/v 有/v 比例/n 关系/n 的/uj 在 
这里 是 1 32 那么 对 应到 原图 上面 的 
差距 就是 0.86 x 32 = 27.52 这 仅仅 考虑 
了 第二次 的 量化 误差 ROIAlignROIAlign 过程 为了 得到 为了 
得到 固定 大小 7X7 的 feature map ROIAlign 技术 并 
没有 使 用量 化 操作 取而代之 的 使用 了 双 
线性插值 它 充分 的 利用 了 原图 中 虚拟 点 
比如 20.56 这个 浮点数 像素 位置 都是/nr 整数 值 没有 
浮点 值 四周 的 四个 真实 存在 的 像素 值 
来 共同 决定 目标 图中 的 一个 像素 值 即 
可以 将 20.56 这个 虚拟 的 位置 点 对应 的 
像素 值 估计 出来 蓝色 的 虚 线框 表示 卷积 
后 获得 的 feature map 黑色 实 线框 表示 ROI 
feature 最后 需要 输出 的 大小 是 2x2 那么 我们 
就 利用 双 线性插值 来 估计 这些 蓝点 虚拟 坐标 
点 又称 双 线性插值 的 网 格点 处所 对应 的 
像素 值 最后 得到 相应 的 输出 然后 在 每一个 
橘红色 的 区域 里面 进行 max pooling 或者 average pooling 
操作 获得 最终 2x2 的 输出 结果 我们 的 整个 
过程 中 没有 用到 量化 操作 没有 引入 误差 即 
原图 中的 像素 和 feature map 中的 像素 是 完全 
对齐 的 没有 偏差 这 不仅 会 提高 检测 的 
精度 同时 也 会 有利于 实例 分割 ROI 处理 架构 
为了 证明 我们 方法 的 通用性 我们 构造 了 多种 
不同 结构 的 Mask R CNN 详细 的 说 我们 
使用 不同 的 i 用于 整个 图像 上 的 特征 
提取 的 卷积 主干 架构 ii 用于 边框 识别 分类 
和 回归 和 掩模 预测 的 上层 网络 分别 应用 
于 每个 RoI 我们 使用 术语 网络 深层 特征 来 
命名 下层 架构 我们 评估 了 深度 为 50 或 
101层 的 ResNet 14 和 ResNeXt 34 网络 使用 ResNet 
14 的 Faster R CNN 从 第四 级 的 最终 
卷积 层 提取 特征 我们 称之为 C4 例如 使用 ResNet 
50 的 主干 架构 由 ResNet 50 C4 表示 这是 
14 7 16 30 中 常用 的 选择 我们 也 
探索 了 由 Li 21 等人 最近 提出 的 另一种 
更 有效 主干 架构 称 为特征 金字塔 网络 FPN FPN 
使用 具有 横向 连接 lateral connections 的 自顶向下 架构 从 
单一 规模 的 输入 构建 网络 功能 金字塔 使用 FPN 
的 Faster R CNN 根据 其 尺度 提取 不同 级别 
的 金字塔 的 RoI 特征 不过 其他 部分 和 平常 
的 ResNet 类似 使用 ResNet FPN 主干 架构 的 Mask 
R CNN 进行 特征提取 可以 在 精度 和 速度 方面 
获得 极大 的 提升 有关 FPN 的 更多 细节 读者 
可以 参考 21 对于 上层 网络 我们 基本 遵循 了 
以前 论文 中 提出 的 架构 我们 添加 了 一个 
全 卷积 的 掩模 预测 分支 具体来说 我们 扩展 了 
ResNet 14 和 FPN 21 中 提出 的 Faster R 
CNN 的 上层 网络 详情 见 下图 所示 上层 架构 
我们 扩展 了 两种 现有 的 Faster R CNN 上层 
架构 14 21 并 分别 添加 了 一个 掩模 分支 
左/右/nr 面板 分别 显示 了 ResNet C4 和 FPN 主干 
的 上层 架构 图中/i 数字/n 表示/v 通/v 道数/n 和/c 分辨率/n 
箭头 表示 卷积 反/zg 卷积/n 和全/nr 连接/v 层/q 可以 通过 
上下文 推断 卷积 减小 维度 反 卷积 增加 维度 所有 
的 卷积 都是 3 × 3 的 除了 输出 层 
是 1 × 1 反 卷积 是 2 × 2 
其 步进 为 2 我们 在 隐藏 层 中 使用 
ReLU 24 在 左 图中 res5 表示 ResNet 的 第五级/nr 
简单 起见 我们 修改 了 第一 个 卷积 操作 使用 
7 × 7 步 长为 1 的 RoI 代替 14 
× 14 步 长为 2 的 RoI 14 右图 中的 
× 4 表示 堆叠 的 4个 连续 的 卷积 ResNet 
C4 主干 的 上层 网络 包括 ResNet 的 第 5 
阶段 即 9层 的 res5 14 这是 计算 密集型 的 
但 对于 FPN 其 主干 已经 包含 了 res5 因此 
可以 使 上层 网络 包含 更少 的 卷积 核 而 
变 的 更加 高效 重点 在于 作者 把 各种 网络 
作为 backbone 进行 对比 发现 使用 ResNet FPN 作为 特征提取 
的 backbone 具有 更高 的 精度 和 更快 的 运行 
速度 所以 实际 工作 时 大都 采用 右图 的 完全 
并行 的 mask / 分类 回归 mask 分支 针对 每个 
RoI 产生 一个 K * m * m 的 输出 
即 K 个 分辨率 为 m * m 的 二 
值 的 掩膜 K 为 分类 物体 的 种类 数目 
依 据预测 类别 分支 预测 的 输出 我们 仅 将 
第 i 个 类别 的 输出 登记 用于 计算 Mask 
R CNN 采用 了 和 Faster R CNN 相同 的 
两步 走 策略 即 先 使用 RPN 提取 候选 区域 
关于 RPN 的 详细 介绍 可以 参考 Faster R CNN 
一文 不同于 Faster R CNN 中 使用 分类 和 回归 
的 多任务 回归 Mask R CNN 在其 基础 上 并行 
添加 了 一个 用于 语义 分割 的 Mask 损失 函数 
所以 Mask R CNN 的 损失 函数 可以 表示 为 
下式 上式 中 表示 bounding box 的 分类 损失 值 
表示 bounding box 的 回归 损失 值 表示 mask 部分 
的 损失 值 对于 预测 的 二 值 掩膜 输出 
我们 对 每个 像素点 应用 sigmoid 函数 整体 损失 定义 
为 平均 二 值 交叉 损失 熵 引入 预测 K 
个 输出 的 机制 允许 每个 类 都 生成 独立 
的 掩膜 避免 类 间 竞争 这样 做 解耦 了 
掩膜 和 种类 预测 不像 FCN 的 做法 在 每个 
像素点 上 应用 softmax 函数 整体 采用 的 多任务 交叉 
熵 这样 会 导致 类 间 竞争 最终 导致 分割 
效果 差 训练 参数 面试 考点 这 一部分 是 临时 
看到 面经 感觉 还是 有 不少 RCNN 系列 发展 的 
要点 记录下来 以后 再看 RCNN 时 可以 带着 问题 回忆 
RPN 作用 和 原理 RPN 提 出于 Faster 所以 参考 
之前 的 文章 计算机 视觉 经典 RCNN _ 其一 从 
RCNN 到 Faster RCNNROI align 和 ROI pooling 的 不同 
各 部分 损失 函数 选用 的 什么 函数 参考 后续 
文章 计算机 视觉 Mask RCNN _ 训练 网络 其二 train 
网络结构 & 损失 函数 三 参考资料 Mask R CNNMask R 
CNN 详解 TensorFlow 实战 Chapter 8 上 Mask R CNN 
介绍 与 实现 开 源代码 Tensorflow 版本 代码 链接 Keras 
and TensorFlow 版本 代码 链接 MxNet 版本 代码 链接 一 Mask RCNN 流程 Mask R CNN 是 一个 实例 
分割 Instance segmentation 算法 通过 增加 不同 的 分支 可以 
完成 目标 分类 目标 检测 语义 分割 实例 分割 人体 
姿势 识别 等 多种 任务 灵活 而 强大 Mask R 
CNN 进行 目标 检测 与 实例 分割 Mask R CNN 
进行 人体 姿态 识别 其 抽象 架构 如下 首先 输入 
一幅 你 想 处理 的 图片 然后 进行 对应 的 
预处理 操作 或者 预处理 后的/nr 图片 然后 将其 输入 到 
一个 预 训 练好 的 神经 网络 中 ResNeXt 等 
获得 对应 的 feature map 接着 对 这个 feature map 
中的 每 一点 设定 预定 个 的 ROI 从而 获得 
多 个 候选 ROI 接着 将 这些 候选 的 ROI 
送入 RPN 网络 进行 二 值 分类 前景 或 背景 
和 BB 回归 过滤 掉 一部分 候选 的 ROI 截止 
到 目前 Mask 和 Faster 完全相同 其实 R FCN 之类 
的 在这之前 也 没有 什么 不同 接着 对 这些 剩下 
的 ROI 进行 ROIAlign 操作 即 先将 原图 和 feature 
map 的 pixel 对应 起来 然后 将 feature map 和 
固定 的 feature 对应 起来 ROIAlign 为 本文 创新 点 
1 比 ROIPooling 有 长足 进步 最后 对 这些 ROI 
进行 分类 N 类别 分类 BB 回归 和 MASK 生成 
在 每一个 ROI 里面 进行 FCN 操作 引入 FCN 生成 
Mask 为 本文 创新 点 2 使得 本文 结构 可以 
进行 分割 型 任务 注 有关 MASK 部分 还有 一处 
容易 忽视 的 创新 点 3 损失 函数 的 计算 
作者 放弃 了 更 广泛 的 softmax 转而 使用 了 
sigmoid 避免了 同类 竞争 更多 的 经历 放在 优化 mask 
像素 上 这 一点 我们 下 一小 节会 提到 二 
Mask RCNN 结构 ROIPooling 的 问题 RoiPool 过程 假定 我们 
输入 的 是 一张 800x800 的 图像 在 图像 中 
有 两个 目标 猫 和狗/nr 狗 的 BB 大小 为 
665x665 经过 VGG16 网络 后 获得 的 feature map 会比 
原图 缩小 一定 的 比例 这/r 和/c Pooling/w 层/q 的/uj 
个数/n 和/c 大小/b 有关/vn 在 该 VGG16 中 我们 使用 
了 5个 池化/nr 操作 每个 池化/nr 操作 都是 2Pooling 因此 
我们 最终 获得 feature map 的 大小 为 800/32 x 
800/32 = 25x25 是 整数 但是 将 狗 的 BB 
对应 到 feature map 上面 我们 得到 的 结果 是 
665/32 x 665/32 = 20.78 x 20.78 结果 是 浮点数 
含有 小数 取整 变为 20 x 20 在 这里 引入 
了 第一次 的 量化 误差 然后 我们 需要 将 20 
x 20 的 ROI 映 射成 7 x 7 的 
ROI feature 其 结果 是 20 / 7 x 20/7 
= 2.86 x 2.86 同样 是 浮点数 含有 小数点 同样 
的 取整 在 这里 引入 了 第二次 量化 误差 这里 
引入 的 误差 会 导致 图像 中 的 像素 和 
特征 中的 像素 的 偏差 即将 feature 空间 的 ROI 
对应 到 原图 上面 会 出现 很大 的 偏差 原因 
如下 比如 用 我们 第二 次 引入 的 误差 来 
分析 本来 是 2 86 我们 将 其量 化为 2 
这期间 引入 了 0.86 的 feature 空间误差 我们/r 的/uj feature/w 
空间/n 和/c 图像/n 空间/n 是/v 有/v 比例/n 关系/n 的/uj 在 
这里 是 1 32 那么 对 应到 原图 上面 的 
差距 就是 0.86 x 32 = 27.52 这 仅仅 考虑 
了 第二次 的 量化 误差 ROIAlignROIAlign 过程 为了 得到 为了 
得到 固定 大小 7X7 的 feature map ROIAlign 技术 并 
没有 使 用量 化 操作 取而代之 的 使用 了 双 
线性插值 它 充分 的 利用 了 原图 中 虚拟 点 
比如 20.56 这个 浮点数 像素 位置 都是/nr 整数 值 没有 
浮点 值 四周 的 四个 真实 存在 的 像素 值 
来 共同 决定 目标 图中 的 一个 像素 值 即 
可以 将 20.56 这个 虚拟 的 位置 点 对应 的 
像素 值 估计 出来 蓝色 的 虚 线框 表示 卷积 
后 获得 的 feature map 黑色 实 线框 表示 ROI 
feature 最后 需要 输出 的 大小 是 2x2 那么 我们 
就 利用 双 线性插值 来 估计 这些 蓝点 虚拟 坐标 
点 又称 双 线性插值 的 网 格点 处所 对应 的 
像素 值 最后 得到 相应 的 输出 然后 在 每一个 
橘红色 的 区域 里面 进行 max pooling 或者 average pooling 
操作 获得 最终 2x2 的 输出 结果 我们 的 整个 
过程 中 没有 用到 量化 操作 没有 引入 误差 即 
原图 中的 像素 和 feature map 中的 像素 是 完全 
对齐 的 没有 偏差 这 不仅 会 提高 检测 的 
精度 同时 也 会 有利于 实例 分割 ROI 处理 架构 
为了 证明 我们 方法 的 通用性 我们 构造 了 多种 
不同 结构 的 Mask R CNN 详细 的 说 我们 
使用 不同 的 i 用于 整个 图像 上 的 特征 
提取 的 卷积 主干 架构 ii 用于 边框 识别 分类 
和 回归 和 掩模 预测 的 上层 网络 分别 应用 
于 每个 RoI 我们 使用 术语 网络 深层 特征 来 
命名 下层 架构 我们 评估 了 深度 为 50 或 
101层 的 ResNet 14 和 ResNeXt 34 网络 使用 ResNet 
14 的 Faster R CNN 从 第四 级 的 最终 
卷积 层 提取 特征 我们 称之为 C4 例如 使用 ResNet 
50 的 主干 架构 由 ResNet 50 C4 表示 这是 
14 7 16 30 中 常用 的 选择 我们 也 
探索 了 由 Li 21 等人 最近 提出 的 另一种 
更 有效 主干 架构 称 为特征 金字塔 网络 FPN FPN 
使用 具有 横向 连接 lateral connections 的 自顶向下 架构 从 
单一 规模 的 输入 构建 网络 功能 金字塔 使用 FPN 
的 Faster R CNN 根据 其 尺度 提取 不同 级别 
的 金字塔 的 RoI 特征 不过 其他 部分 和 平常 
的 ResNet 类似 使用 ResNet FPN 主干 架构 的 Mask 
R CNN 进行 特征提取 可以 在 精度 和 速度 方面 
获得 极大 的 提升 有关 FPN 的 更多 细节 读者 
可以 参考 21 对于 上层 网络 我们 基本 遵循 了 
以前 论文 中 提出 的 架构 我们 添加 了 一个 
全 卷积 的 掩模 预测 分支 具体来说 我们 扩展 了 
ResNet 14 和 FPN 21 中 提出 的 Faster R 
CNN 的 上层 网络 详情 见 下图 所示 上层 架构 
我们 扩展 了 两种 现有 的 Faster R CNN 上层 
架构 14 21 并 分别 添加 了 一个 掩模 分支 
左/右/nr 面板 分别 显示 了 ResNet C4 和 FPN 主干 
的 上层 架构 图中/i 数字/n 表示/v 通/v 道数/n 和/c 分辨率/n 
箭头 表示 卷积 反/zg 卷积/n 和全/nr 连接/v 层/q 可以 通过 
上下文 推断 卷积 减小 维度 反 卷积 增加 维度 所有 
的 卷积 都是 3 × 3 的 除了 输出 层 
是 1 × 1 反 卷积 是 2 × 2 
其 步进 为 2 我们 在 隐藏 层 中 使用 
ReLU 24 在 左 图中 res5 表示 ResNet 的 第五级/nr 
简单 起见 我们 修改 了 第一 个 卷积 操作 使用 
7 × 7 步 长为 1 的 RoI 代替 14 
× 14 步 长为 2 的 RoI 14 右图 中的 
× 4 表示 堆叠 的 4个 连续 的 卷积 ResNet 
C4 主干 的 上层 网络 包括 ResNet 的 第 5 
阶段 即 9层 的 res5 14 这是 计算 密集型 的 
但 对于 FPN 其 主干 已经 包含 了 res5 因此 
可以 使 上层 网络 包含 更少 的 卷积 核 而 
变 的 更加 高效 重点 在于 作者 把 各种 网络 
作为 backbone 进行 对比 发现 使用 ResNet FPN 作为 特征提取 
的 backbone 具有 更高 的 精度 和 更快 的 运行 
速度 所以 实际 工作 时 大都 采用 右图 的 完全 
并行 的 mask / 分类 回归 mask 分支 针对 每个 
RoI 产生 一个 K * m * m 的 输出 
即 K 个 分辨率 为 m * m 的 二 
值 的 掩膜 K 为 分类 物体 的 种类 数目 
依 据预测 类别 分支 预测 的 输出 我们 仅 将 
第 i 个 类别 的 输出 登记 用于 计算 Mask 
R CNN 采用 了 和 Faster R CNN 相同 的 
两步 走 策略 即 先 使用 RPN 提取 候选 区域 
关于 RPN 的 详细 介绍 可以 参考 Faster R CNN 
一文 不同于 Faster R CNN 中 使用 分类 和 回归 
的 多任务 回归 Mask R CNN 在其 基础 上 并行 
添加 了 一个 用于 语义 分割 的 Mask 损失 函数 
所以 Mask R CNN 的 损失 函数 可以 表示 为 
下式 上式 中 表示 bounding box 的 分类 损失 值 
表示 bounding box 的 回归 损失 值 表示 mask 部分 
的 损失 值 对于 预测 的 二 值 掩膜 输出 
我们 对 每个 像素点 应用 sigmoid 函数 整体 损失 定义 
为 平均 二 值 交叉 损失 熵 引入 预测 K 
个 输出 的 机制 允许 每个 类 都 生成 独立 
的 掩膜 避免 类 间 竞争 这样 做 解耦 了 
掩膜 和 种类 预测 不像 FCN 的 做法 在 每个 
像素点 上 应用 softmax 函数 整体 采用 的 多任务 交叉 
熵 这样 会 导致 类 间 竞争 最终 导致 分割 
效果 差 训练 参数 面试 考点 这 一部分 是 临时 
看到 面经 感觉 还是 有 不少 RCNN 系列 发展 的 
要点 记录下来 以后 再看 RCNN 时 可以 带着 问题 回忆 
RPN 作用 和 原理 RPN 提 出于 Faster 所以 参考 
之前 的 文章 计算机 视觉 经典 RCNN _ 其一 从 
RCNN 到 Faster RCNNROI align 和 ROI pooling 的 不同 
各 部分 损失 函数 选用 的 什么 函数 参考 后续 
文章 计算机 视觉 Mask RCNN _ 训练 网络 其二 train 
网络结构 & 损失 函数 三 参考资料 Mask R CNNMask R 
CNN 详解 TensorFlow 实战 Chapter 8 上 Mask R CNN 
介绍 与 实现 开 源代码 Tensorflow 版本 代码 链接 Keras 
and TensorFlow 版本 代码 链接 MxNet 版本 代码 链接 