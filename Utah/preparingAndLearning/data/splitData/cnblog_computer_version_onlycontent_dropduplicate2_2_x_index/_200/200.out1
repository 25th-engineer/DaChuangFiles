不同 色彩 空间 的 转换 当前 在 计算机 视觉 中 
有三种 常用 的 色彩 空间 灰度 BGR 以及 HSV1 . 
灰度 色彩 空间 是 通过 去除 彩色 信息 来 将其 
转换 为 灰阶 灰度 色彩 空间 对 中间 处理 特别 
有效 比如 人脸 检测 2 . BGR 即 蓝绿 红 
色彩 空间 每 一个 像素点 都由 一个 三元组 来 表示 
3 . HSV H Hue 是 色调 S Saturation 是 
饱和度 V value 表示 黑暗 的 程度 或 光谱 另一端 
的 明亮 程度 傅里叶 变换 Numpy 里 有 快速 傅里叶 
变换 FFT 的 包 它 包含 了 fft2 函数 该 
函数 可以 计算 一副 图像 的 离散 傅里叶 变换 DFT 
下面 通过 傅里叶 变换 来 介绍 图像 的 幅度 谱 
图像 的 幅度 谱 是 另一种 图像 幅度 谱 图像 
呈现 了 原始 图像 在 变化 方面 的 一种 表示 
把 一幅 图像 中 最 明亮 的 像素 放到 图像 
中央 然后 逐渐 变暗 在 边缘 上 的 像素 最暗 
这样/r 可以/c 发现/v 图像/n 中/f 有/v 多少/m 亮/v 的/uj 像素/n 
和暗的/nr 像素/n 以及 他们 分布 的 百分比 高通 滤波器 高通 
滤波器 是 检测 图像 的 某个 区域 然后 根据 像素 
与 周围 像素 的 亮度 差 来 提升 该 像素 
的 亮度 的 滤波器 以 如下 的 核 kernel 为例 
0 0.25 0 0.25 1 0.25 0 0.25 0 核 
是 指 一组 权重 的 集合 他 会 应用在 源 
图像 的 一个 区域 并 由此 生成 目标 图像 的 
一个 像素 在 计算 完 中央 像素 与 周围 邻近 
像素 的 亮度 的 差值 之和 以后 如果 亮度 变化 
很大 中央 像素 的 亮度 会 增加 反之 则 不会 
高通/nr 和/c 低通滤波器/n 都有/nr 一个/m 称为/v 半径/n 的/uj 属性/n 它 
决定 了 多 大面积 的 邻近 像素 参与 滤波 运算 
这些 滤波器 中 的 所有 值 加 起来 为 0import 
cv2 import numpy as np from scipy import ndimage kernel 
_ 3X3 = np . array 1 1 1 1 
8 1 1 1 1 kernel _ 5X5 = np 
. array 1 1 1 1 1 1 1 2 
1 1 1 2 4 2 1 1 1 2 
1 1 1 1 1 1 1 img = cv2 
. imread 1 . jpg 0 k3 = ndimage . 
convolve img kernel _ 3X3 # 卷积 k5 = ndimage 
. convolve img kernel _ 5X5 # 卷积 blurred = 
cv2 . GaussianBlur img 11 11 0 g _ hpf 
= img blurred # 两种 高 通滤波 的 效果 cv2 
. imshow 3x3 k3 cv2 . imshow 5x5 k5 # 
通过 对 图像 应用 低通滤波器 之后 与 原始 图像 计算 
差值 cv2 . imshow g _ hpf g _ hpf 
cv2 . waitKey cv2 . d e s t r 
o y A l l W i n d o 
w s 低通滤波器 低通滤波器 LPF 则是 在 像素 与 周围 
像素 的 亮度 的 亮度 差值 小于 一个 特定 值 
时 平滑 该 像素 的 亮度 它 主要 用于 去 
噪 和 模糊 化 比如说 高斯 模糊 是 最 常用 
的 模糊 滤波器 平滑 滤波器 之一 它 是 一个 消 
弱 高频信号 强度 的 低通滤波器 边缘 检测 边缘 在 认 
类 视觉 和 计算机 视觉 中 均 起着 重要 的 
作用 OpenCV 提供 了 许多 边缘 检测 滤 波函数 包括 
Laplacian Sobel 以及 Scharr 这些 滤 波函数 都会 将 非 
边缘 区域 转换 为 黑色 将 边缘 区域 转为 白色 
或 其他 饱和 的 颜色 但是 这些 函数 都 很容易 
将 噪声 错误 地 识别 为 边缘 缓解 这个 问题 
的 方法 是 在 找到 边缘 之前 对 图像 进行 
模糊 处理 OpenCV 也 提供 了 许多 模糊 滤 波函数 
包括 blur 简单 的 算术 平均 medianBlur 以及 GaussianBlur 边缘/n 
检测/vn 滤/zg 波函数/l 和/c 模糊/a 滤波/n 函数/n 的/uj 参数/n 有/v 
很多/m 但 总会 有 一个 ksize 参数 它 是 一个 
奇数 表示 滤波 核 的 宽和 高 以 像素 为 
单位 这里 使用 medianBlur 作为 模糊 函数 它 对 去除 
数字化 的 视频 噪声 非常 有效 特别 是 去除 彩色图像 
的 噪声 使用 Laplacian 作为 边缘 检测 函数 他 会 
产生 明显 的 边缘 线条 灰度 图像 更是如此 在 使用 
medianBlur 函数 之后 将要 使用 Laplacian 函数 之前 需要 将 
图像 从 BRG 色彩 空间 转换 为 灰色 色彩 空间 
在 得到 Laplacian 函数 的 结果 之后 需要/v 将其/i 转换/v 
成/n 黑色/n 边缘/n 和/c 白色/n 背景/n 的/uj 图像/n 然后 将其 
归一化 使其 像素 值 在 0 1 之间 并 乘以 
源 图像 以便 能将 边缘 变黑 用 定制 内核 做 
卷积 OpenCV 预定义 的 许多 滤波器 滤 波函数 都会 使用 
核 其实 核 是 一组 权重 它 决定 如何 通过 
邻近 像素点 来 计算 新的 像素点 核 也 称为 卷积 
矩阵 它 对 一个 区域 的 像素 做 调和 mix 
up 或 卷积 运算 通常 基于 核 的 滤波器 滤 
波函数 被 称为 卷积 滤波器 滤 波函数 OpenCV 提供 了 
一个 非常 通用 的 filter2D 函数 它 运用 由 用户 
指定 的 任意 核 或 卷积 矩阵 cv . filter2D 
src 1 kernel dst 第二个 参数 指定 了 目标 图像 
每个 通道 的 位 深度 如果 为 负值 则/d 表示/v 
目标/n 图像/n 和源/nr 图像/n 有/v 同样/d 的/uj 位/q 深度/ns 对于 
彩色图像 来说 filter2D 会对 每个 通道 都用/nr 同样 的 核 
如果 要 对 每个 通道 使用 不同 的 核 就 
必须 用 split 函数 和 merge 函数 Canny 边缘 检测 
Canny 边缘 检测 算法 非常复杂 但也 很 有趣 它 有 
5个 步骤 即使 用 高斯 滤波器 对 图像 及 逆行 
去 噪 计算 梯度 在 边缘 上 使用 非 最大 
抑制 NMS 在 检测 到 的 边缘 上 使用 双 
阈值 去除 假 阳性 最后 还 会 分析 所有 的 
边缘 及其 之间 的 连接 以 保留 真正 的 边缘 
并 消除 不 明显 的 边缘 import cv2 import numpy 
as np img = cv2 . imread 1 . jpg 
0 c = cv2 . Canny img 200 300 cv2 
. imshow canny c cv2 . waitKey cv2 . d 
e s t r o y A l l W 
i n d o w s 轮廓 检测 在 计算机 
视觉 中 轮廓 检测 是 另一个 比较 重要 的 任务 
不单 是 用来 检测 图像 或者 视频 帧 中 物体 
的 轮廓 而且 还有 其他 操作 与 轮廓 检测 有关 
这些 操作 有 计算 多边形 边界 形状 逼近 和 计算 
感兴趣 区域 这是 与 图像 数据 交互 时的/nr 简单 操作 
因为 Numpy 中的 矩形 区域 可以 使用 数组 切片 slice 
来 定义 import cv2 import numpy as np img = 
np . zeros 200 200 dtype = np . uint8 
img 50 150 50 150 = 255 ret thresh = 
cv2 . threshold img 127 255 0 image contours hierarchy 
= cv2 . findContours thresh cv2 . RETR _ TREE 
cv2 . CHAIN _ APPROX _ SIMPLE color = cv2 
. cvtColor img cv2 . COLOR _ GRAY2BGR img = 
cv2 . drawContours color contours 1 0 255 0 2 
cv2 . imshow contours color cv2 . waitKey cv2 . 
d e s t r o y A l l 
W i n d o w s 这段 代码 首先 
创建 了 一个 200X200 大小 的 黑色 空白 图像 接着 
在 图像 的 中央 放置 一个 白色 方块 这里 用 
到了 np 数组 在 切片 上 赋值 的 功能 接下来 
对 图像 进行 二 值 化 操作 然后 调 用了 
findContours 函数 该 函数 有 三个 参数 输入 图像 层次 
类型 和 轮廓 逼近 方法 它 有 几个 方面 特别 
有趣 1 . 这个 函数 会 修改 输入 图像 因此 
建议 使用 原始 图像 的 一份 拷贝 2 . 由 
函数 返回 的 层次 树 相当 重要 cv2 . RETR 
_ TREE 参数 会 得到 图像 中 轮廓 的 整体 
层次结构 以此 来 建立 轮廓 之间 的 关系 如果 只 
想得到 最 外面 的 轮廓 可使用 cv2 . RETR _ 
EXTERNAL 这对 消除 包含 在 其他 轮廓 中的 轮廓 很 
有用 findContours 函数 有 三个 返回值 修改后 的 图像 图像 
的 轮廓 以及 他们 的 层次 使用 轮廓 来 画出 
图像 的 彩色 版本 并 显示 出来 不同 色彩 空间 的 转换 当前 在 计算机 视觉 中 
有三种 常用 的 色彩 空间 灰度 BGR 以及 HSV1 . 
灰度 色彩 空间 是 通过 去除 彩色 信息 来 将其 
转换 为 灰阶 灰度 色彩 空间 对 中间 处理 特别 
有效 比如 人脸 检测 2 . BGR 即 蓝绿 红 
色彩 空间 每 一个 像素点 都由 一个 三元组 来 表示 
3 . HSV H Hue 是 色调 S Saturation 是 
饱和度 V value 表示 黑暗 的 程度 或 光谱 另一端 
的 明亮 程度 傅里叶 变换 Numpy 里 有 快速 傅里叶 
变换 FFT 的 包 它 包含 了 fft2 函数 该 
函数 可以 计算 一副 图像 的 离散 傅里叶 变换 DFT 
下面 通过 傅里叶 变换 来 介绍 图像 的 幅度 谱 
图像 的 幅度 谱 是 另一种 图像 幅度 谱 图像 
呈现 了 原始 图像 在 变化 方面 的 一种 表示 
把 一幅 图像 中 最 明亮 的 像素 放到 图像 
中央 然后 逐渐 变暗 在 边缘 上 的 像素 最暗 
这样/r 可以/c 发现/v 图像/n 中/f 有/v 多少/m 亮/v 的/uj 像素/n 
和暗的/nr 像素/n 以及 他们 分布 的 百分比 高通 滤波器 高通 
滤波器 是 检测 图像 的 某个 区域 然后 根据 像素 
与 周围 像素 的 亮度 差 来 提升 该 像素 
的 亮度 的 滤波器 以 如下 的 核 kernel 为例 
0 0.25 0 0.25 1 0.25 0 0.25 0 核 
是 指 一组 权重 的 集合 他 会 应用在 源 
图像 的 一个 区域 并 由此 生成 目标 图像 的 
一个 像素 在 计算 完 中央 像素 与 周围 邻近 
像素 的 亮度 的 差值 之和 以后 如果 亮度 变化 
很大 中央 像素 的 亮度 会 增加 反之 则 不会 
高通/nr 和/c 低通滤波器/n 都有/nr 一个/m 称为/v 半径/n 的/uj 属性/n 它 
决定 了 多 大面积 的 邻近 像素 参与 滤波 运算 
这些 滤波器 中 的 所有 值 加 起来 为 0import 
cv2 import numpy as np from scipy import ndimage kernel 
_ 3X3 = np . array 1 1 1 1 
8 1 1 1 1 kernel _ 5X5 = np 
. array 1 1 1 1 1 1 1 2 
1 1 1 2 4 2 1 1 1 2 
1 1 1 1 1 1 1 img = cv2 
. imread 1 . jpg 0 k3 = ndimage . 
convolve img kernel _ 3X3 # 卷积 k5 = ndimage 
. convolve img kernel _ 5X5 # 卷积 blurred = 
cv2 . GaussianBlur img 11 11 0 g _ hpf 
= img blurred # 两种 高 通滤波 的 效果 cv2 
. imshow 3x3 k3 cv2 . imshow 5x5 k5 # 
通过 对 图像 应用 低通滤波器 之后 与 原始 图像 计算 
差值 cv2 . imshow g _ hpf g _ hpf 
cv2 . waitKey cv2 . d e s t r 
o y A l l W i n d o 
w s 低通滤波器 低通滤波器 LPF 则是 在 像素 与 周围 
像素 的 亮度 的 亮度 差值 小于 一个 特定 值 
时 平滑 该 像素 的 亮度 它 主要 用于 去 
噪 和 模糊 化 比如说 高斯 模糊 是 最 常用 
的 模糊 滤波器 平滑 滤波器 之一 它 是 一个 消 
弱 高频信号 强度 的 低通滤波器 边缘 检测 边缘 在 认 
类 视觉 和 计算机 视觉 中 均 起着 重要 的 
作用 OpenCV 提供 了 许多 边缘 检测 滤 波函数 包括 
Laplacian Sobel 以及 Scharr 这些 滤 波函数 都会 将 非 
边缘 区域 转换 为 黑色 将 边缘 区域 转为 白色 
或 其他 饱和 的 颜色 但是 这些 函数 都 很容易 
将 噪声 错误 地 识别 为 边缘 缓解 这个 问题 
的 方法 是 在 找到 边缘 之前 对 图像 进行 
模糊 处理 OpenCV 也 提供 了 许多 模糊 滤 波函数 
包括 blur 简单 的 算术 平均 medianBlur 以及 GaussianBlur 边缘/n 
检测/vn 滤/zg 波函数/l 和/c 模糊/a 滤波/n 函数/n 的/uj 参数/n 有/v 
很多/m 但 总会 有 一个 ksize 参数 它 是 一个 
奇数 表示 滤波 核 的 宽和 高 以 像素 为 
单位 这里 使用 medianBlur 作为 模糊 函数 它 对 去除 
数字化 的 视频 噪声 非常 有效 特别 是 去除 彩色图像 
的 噪声 使用 Laplacian 作为 边缘 检测 函数 他 会 
产生 明显 的 边缘 线条 灰度 图像 更是如此 在 使用 
medianBlur 函数 之后 将要 使用 Laplacian 函数 之前 需要 将 
图像 从 BRG 色彩 空间 转换 为 灰色 色彩 空间 
在 得到 Laplacian 函数 的 结果 之后 需要/v 将其/i 转换/v 
成/n 黑色/n 边缘/n 和/c 白色/n 背景/n 的/uj 图像/n 然后 将其 
归一化 使其 像素 值 在 0 1 之间 并 乘以 
源 图像 以便 能将 边缘 变黑 用 定制 内核 做 
卷积 OpenCV 预定义 的 许多 滤波器 滤 波函数 都会 使用 
核 其实 核 是 一组 权重 它 决定 如何 通过 
邻近 像素点 来 计算 新的 像素点 核 也 称为 卷积 
矩阵 它 对 一个 区域 的 像素 做 调和 mix 
up 或 卷积 运算 通常 基于 核 的 滤波器 滤 
波函数 被 称为 卷积 滤波器 滤 波函数 OpenCV 提供 了 
一个 非常 通用 的 filter2D 函数 它 运用 由 用户 
指定 的 任意 核 或 卷积 矩阵 cv . filter2D 
src 1 kernel dst 第二个 参数 指定 了 目标 图像 
每个 通道 的 位 深度 如果 为 负值 则/d 表示/v 
目标/n 图像/n 和源/nr 图像/n 有/v 同样/d 的/uj 位/q 深度/ns 对于 
彩色图像 来说 filter2D 会对 每个 通道 都用/nr 同样 的 核 
如果 要 对 每个 通道 使用 不同 的 核 就 
必须 用 split 函数 和 merge 函数 Canny 边缘 检测 
Canny 边缘 检测 算法 非常复杂 但也 很 有趣 它 有 
5个 步骤 即使 用 高斯 滤波器 对 图像 及 逆行 
去 噪 计算 梯度 在 边缘 上 使用 非 最大 
抑制 NMS 在 检测 到 的 边缘 上 使用 双 
阈值 去除 假 阳性 最后 还 会 分析 所有 的 
边缘 及其 之间 的 连接 以 保留 真正 的 边缘 
并 消除 不 明显 的 边缘 import cv2 import numpy 
as np img = cv2 . imread 1 . jpg 
0 c = cv2 . Canny img 200 300 cv2 
. imshow canny c cv2 . waitKey cv2 . d 
e s t r o y A l l W 
i n d o w s 轮廓 检测 在 计算机 
视觉 中 轮廓 检测 是 另一个 比较 重要 的 任务 
不单 是 用来 检测 图像 或者 视频 帧 中 物体 
的 轮廓 而且 还有 其他 操作 与 轮廓 检测 有关 
这些 操作 有 计算 多边形 边界 形状 逼近 和 计算 
感兴趣 区域 这是 与 图像 数据 交互 时的/nr 简单 操作 
因为 Numpy 中的 矩形 区域 可以 使用 数组 切片 slice 
来 定义 import cv2 import numpy as np img = 
np . zeros 200 200 dtype = np . uint8 
img 50 150 50 150 = 255 ret thresh = 
cv2 . threshold img 127 255 0 image contours hierarchy 
= cv2 . findContours thresh cv2 . RETR _ TREE 
cv2 . CHAIN _ APPROX _ SIMPLE color = cv2 
. cvtColor img cv2 . COLOR _ GRAY2BGR img = 
cv2 . drawContours color contours 1 0 255 0 2 
cv2 . imshow contours color cv2 . waitKey cv2 . 
d e s t r o y A l l 
W i n d o w s 这段 代码 首先 
创建 了 一个 200X200 大小 的 黑色 空白 图像 接着 
在 图像 的 中央 放置 一个 白色 方块 这里 用 
到了 np 数组 在 切片 上 赋值 的 功能 接下来 
对 图像 进行 二 值 化 操作 然后 调 用了 
findContours 函数 该 函数 有 三个 参数 输入 图像 层次 
类型 和 轮廓 逼近 方法 它 有 几个 方面 特别 
有趣 1 . 这个 函数 会 修改 输入 图像 因此 
建议 使用 原始 图像 的 一份 拷贝 2 . 由 
函数 返回 的 层次 树 相当 重要 cv2 . RETR 
_ TREE 参数 会 得到 图像 中 轮廓 的 整体 
层次结构 以此 来 建立 轮廓 之间 的 关系 如果 只 
想得到 最 外面 的 轮廓 可使用 cv2 . RETR _ 
EXTERNAL 这对 消除 包含 在 其他 轮廓 中的 轮廓 很 
有用 findContours 函数 有 三个 返回值 修改后 的 图像 图像 
的 轮廓 以及 他们 的 层次 使用 轮廓 来 画出 
图像 的 彩色 版本 并 显示 出来 不同 色彩 空间 的 转换 当前 在 计算机 视觉 中 
有三种 常用 的 色彩 空间 灰度 BGR 以及 HSV1 . 
灰度 色彩 空间 是 通过 去除 彩色 信息 来 将其 
转换 为 灰阶 灰度 色彩 空间 对 中间 处理 特别 
有效 比如 人脸 检测 2 . BGR 即 蓝绿 红 
色彩 空间 每 一个 像素点 都由 一个 三元组 来 表示 
3 . HSV H Hue 是 色调 S Saturation 是 
饱和度 V value 表示 黑暗 的 程度 或 光谱 另一端 
的 明亮 程度 傅里叶 变换 Numpy 里 有 快速 傅里叶 
变换 FFT 的 包 它 包含 了 fft2 函数 该 
函数 可以 计算 一副 图像 的 离散 傅里叶 变换 DFT 
下面 通过 傅里叶 变换 来 介绍 图像 的 幅度 谱 
图像 的 幅度 谱 是 另一种 图像 幅度 谱 图像 
呈现 了 原始 图像 在 变化 方面 的 一种 表示 
把 一幅 图像 中 最 明亮 的 像素 放到 图像 
中央 然后 逐渐 变暗 在 边缘 上 的 像素 最暗 
这样/r 可以/c 发现/v 图像/n 中/f 有/v 多少/m 亮/v 的/uj 像素/n 
和暗的/nr 像素/n 以及 他们 分布 的 百分比 高通 滤波器 高通 
滤波器 是 检测 图像 的 某个 区域 然后 根据 像素 
与 周围 像素 的 亮度 差 来 提升 该 像素 
的 亮度 的 滤波器 以 如下 的 核 kernel 为例 
0 0.25 0 0.25 1 0.25 0 0.25 0 核 
是 指 一组 权重 的 集合 他 会 应用在 源 
图像 的 一个 区域 并 由此 生成 目标 图像 的 
一个 像素 在 计算 完 中央 像素 与 周围 邻近 
像素 的 亮度 的 差值 之和 以后 如果 亮度 变化 
很大 中央 像素 的 亮度 会 增加 反之 则 不会 
高通/nr 和/c 低通滤波器/n 都有/nr 一个/m 称为/v 半径/n 的/uj 属性/n 它 
决定 了 多 大面积 的 邻近 像素 参与 滤波 运算 
这些 滤波器 中 的 所有 值 加 起来 为 0import 
cv2 import numpy as np from scipy import ndimage kernel 
_ 3X3 = np . array 1 1 1 1 
8 1 1 1 1 kernel _ 5X5 = np 
. array 1 1 1 1 1 1 1 2 
1 1 1 2 4 2 1 1 1 2 
1 1 1 1 1 1 1 img = cv2 
. imread 1 . jpg 0 k3 = ndimage . 
convolve img kernel _ 3X3 # 卷积 k5 = ndimage 
. convolve img kernel _ 5X5 # 卷积 blurred = 
cv2 . GaussianBlur img 11 11 0 g _ hpf 
= img blurred # 两种 高 通滤波 的 效果 cv2 
. imshow 3x3 k3 cv2 . imshow 5x5 k5 # 
通过 对 图像 应用 低通滤波器 之后 与 原始 图像 计算 
差值 cv2 . imshow g _ hpf g _ hpf 
cv2 . waitKey cv2 . d e s t r 
o y A l l W i n d o 
w s 低通滤波器 低通滤波器 LPF 则是 在 像素 与 周围 
像素 的 亮度 的 亮度 差值 小于 一个 特定 值 
时 平滑 该 像素 的 亮度 它 主要 用于 去 
噪 和 模糊 化 比如说 高斯 模糊 是 最 常用 
的 模糊 滤波器 平滑 滤波器 之一 它 是 一个 消 
弱 高频信号 强度 的 低通滤波器 边缘 检测 边缘 在 认 
类 视觉 和 计算机 视觉 中 均 起着 重要 的 
作用 OpenCV 提供 了 许多 边缘 检测 滤 波函数 包括 
Laplacian Sobel 以及 Scharr 这些 滤 波函数 都会 将 非 
边缘 区域 转换 为 黑色 将 边缘 区域 转为 白色 
或 其他 饱和 的 颜色 但是 这些 函数 都 很容易 
将 噪声 错误 地 识别 为 边缘 缓解 这个 问题 
的 方法 是 在 找到 边缘 之前 对 图像 进行 
模糊 处理 OpenCV 也 提供 了 许多 模糊 滤 波函数 
包括 blur 简单 的 算术 平均 medianBlur 以及 GaussianBlur 边缘/n 
检测/vn 滤/zg 波函数/l 和/c 模糊/a 滤波/n 函数/n 的/uj 参数/n 有/v 
很多/m 但 总会 有 一个 ksize 参数 它 是 一个 
奇数 表示 滤波 核 的 宽和 高 以 像素 为 
单位 这里 使用 medianBlur 作为 模糊 函数 它 对 去除 
数字化 的 视频 噪声 非常 有效 特别 是 去除 彩色图像 
的 噪声 使用 Laplacian 作为 边缘 检测 函数 他 会 
产生 明显 的 边缘 线条 灰度 图像 更是如此 在 使用 
medianBlur 函数 之后 将要 使用 Laplacian 函数 之前 需要 将 
图像 从 BRG 色彩 空间 转换 为 灰色 色彩 空间 
在 得到 Laplacian 函数 的 结果 之后 需要/v 将其/i 转换/v 
成/n 黑色/n 边缘/n 和/c 白色/n 背景/n 的/uj 图像/n 然后 将其 
归一化 使其 像素 值 在 0 1 之间 并 乘以 
源 图像 以便 能将 边缘 变黑 用 定制 内核 做 
卷积 OpenCV 预定义 的 许多 滤波器 滤 波函数 都会 使用 
核 其实 核 是 一组 权重 它 决定 如何 通过 
邻近 像素点 来 计算 新的 像素点 核 也 称为 卷积 
矩阵 它 对 一个 区域 的 像素 做 调和 mix 
up 或 卷积 运算 通常 基于 核 的 滤波器 滤 
波函数 被 称为 卷积 滤波器 滤 波函数 OpenCV 提供 了 
一个 非常 通用 的 filter2D 函数 它 运用 由 用户 
指定 的 任意 核 或 卷积 矩阵 cv . filter2D 
src 1 kernel dst 第二个 参数 指定 了 目标 图像 
每个 通道 的 位 深度 如果 为 负值 则/d 表示/v 
目标/n 图像/n 和源/nr 图像/n 有/v 同样/d 的/uj 位/q 深度/ns 对于 
彩色图像 来说 filter2D 会对 每个 通道 都用/nr 同样 的 核 
如果 要 对 每个 通道 使用 不同 的 核 就 
必须 用 split 函数 和 merge 函数 Canny 边缘 检测 
Canny 边缘 检测 算法 非常复杂 但也 很 有趣 它 有 
5个 步骤 即使 用 高斯 滤波器 对 图像 及 逆行 
去 噪 计算 梯度 在 边缘 上 使用 非 最大 
抑制 NMS 在 检测 到 的 边缘 上 使用 双 
阈值 去除 假 阳性 最后 还 会 分析 所有 的 
边缘 及其 之间 的 连接 以 保留 真正 的 边缘 
并 消除 不 明显 的 边缘 import cv2 import numpy 
as np img = cv2 . imread 1 . jpg 
0 c = cv2 . Canny img 200 300 cv2 
. imshow canny c cv2 . waitKey cv2 . d 
e s t r o y A l l W 
i n d o w s 轮廓 检测 在 计算机 
视觉 中 轮廓 检测 是 另一个 比较 重要 的 任务 
不单 是 用来 检测 图像 或者 视频 帧 中 物体 
的 轮廓 而且 还有 其他 操作 与 轮廓 检测 有关 
这些 操作 有 计算 多边形 边界 形状 逼近 和 计算 
感兴趣 区域 这是 与 图像 数据 交互 时的/nr 简单 操作 
因为 Numpy 中的 矩形 区域 可以 使用 数组 切片 slice 
来 定义 import cv2 import numpy as np img = 
np . zeros 200 200 dtype = np . uint8 
img 50 150 50 150 = 255 ret thresh = 
cv2 . threshold img 127 255 0 image contours hierarchy 
= cv2 . findContours thresh cv2 . RETR _ TREE 
cv2 . CHAIN _ APPROX _ SIMPLE color = cv2 
. cvtColor img cv2 . COLOR _ GRAY2BGR img = 
cv2 . drawContours color contours 1 0 255 0 2 
cv2 . imshow contours color cv2 . waitKey cv2 . 
d e s t r o y A l l 
W i n d o w s 这段 代码 首先 
创建 了 一个 200X200 大小 的 黑色 空白 图像 接着 
在 图像 的 中央 放置 一个 白色 方块 这里 用 
到了 np 数组 在 切片 上 赋值 的 功能 接下来 
对 图像 进行 二 值 化 操作 然后 调 用了 
findContours 函数 该 函数 有 三个 参数 输入 图像 层次 
类型 和 轮廓 逼近 方法 它 有 几个 方面 特别 
有趣 1 . 这个 函数 会 修改 输入 图像 因此 
建议 使用 原始 图像 的 一份 拷贝 2 . 由 
函数 返回 的 层次 树 相当 重要 cv2 . RETR 
_ TREE 参数 会 得到 图像 中 轮廓 的 整体 
层次结构 以此 来 建立 轮廓 之间 的 关系 如果 只 
想得到 最 外面 的 轮廓 可使用 cv2 . RETR _ 
EXTERNAL 这对 消除 包含 在 其他 轮廓 中的 轮廓 很 
有用 findContours 函数 有 三个 返回值 修改后 的 图像 图像 
的 轮廓 以及 他们 的 层次 使用 轮廓 来 画出 
图像 的 彩色 版本 并 显示 出来 