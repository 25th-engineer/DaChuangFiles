1 图像 描述符 特征 描述符 和 特征向量 的 定义 特征向量 
用于 表示 和 量化 图像 的 数字 列表 简单 理解 
成将/nr 图片 转化 为 一个 数字 列表 表示 特征向量 中 
用来 描述 图片 的 各种 属性 的 向量 称 为特征 
矢量 图像 描述符 理解/v 成/n 一种/m 算法/n 和/c 方法/n 控制 
整个 图像 如何 转变 为 特征向量 量化 是的 图像 形状 
颜色 纹理 或 三者 的 任何 组合 输入 1个 图像 
时 图像 描述符 将 返回 1个 特征向量 主要 用于 图像 
分类 缺乏 区分 图像 中 不同 对象 的 能力 特征 
描述符 是 一种 算法 和 方法 控制 图像 部分 区域 
对 部分 区域 返回 多个 特征向量 输入 1个 图像 返回 
多个 特征向量 主要 用来 处理 图像 的 局部 主要 用于 
图像匹配 视觉 检测 匹配 图像 中 的 物品 2 色彩 
通道 统计 运行 命令 python color _ channel _ stats 
. py 原理 通过 统计 图像 中 的 每个 色彩 
通道 及 RGB 色彩 通道 凭据 通道 值 和 标准 
差等 方法 量化 和 表示 图像 的 颜色 分布 从而 
对 图像 进行 分类 主要 运用 颜色 差异 名义 不同 
场景 图片 分类 from scipy . spatial import distance as 
dist from imutils import paths import numpy as np import 
cv2 imagePaths = sorted list paths . list _ images 
dinos index = { } for imagePath in imagePaths image 
= cv2 . imread imagePath filename = imagePath imagePath . 
rfind / + 1 means stds = cv2 . meanStdDev 
image # 计算 图像 中 每个 色彩 通道 的 平均值 
和 标准偏差 features = np . concatenate means stds . 
flatten # 将 每个 色彩 通道 的 平均值 和 标准偏差 
连接 在 一起 形成 我们 的 特征向量 index filename = 
features query = cv2 . imread imagePaths 0 cv2 . 
imshow Query trex _ 01 . png query keys = 
sorted index . keys for i k in enumerate keys 
if k = = trex _ 01 . png continue 
image = cv2 . imread imagePaths i d = dist 
. euclidean index trex _ 01 . png index k 
# 计算 目标 图像 特征向量 与 我们 数据 集中 的 
特征向量 之间 的 欧几里德 距离 d 越小 颜色通道 越 相似 
图片 越 相似 cv2 . putText image % . 2f 
% d 10 30 cv2 . FONT _ HERSHEY _ 
SIMPLEX 0.75 0 255 0 2 cv2 . imshow k 
image cv2 . waitKey 0 3 彩色 直方图 原理 通过 
颜色 的 分布 运用 机器学习 中的 K 均值 聚 类 
运用于 聚 类 颜色 直方图 无 参考值 进行 图像 分类 
关键 是 需要 对 颜色 直方图 理解 文件 结构 | 
pyimagesearch |         | _ _ init 
_ _ . py |         | 
descriptors |         |       
  | _ _ init _ _ . py | 
        |         | 
labhistogram . py | cluster _ histograms . py 疑问 
1 imutils . is _ cv2 意义 labhistogram . pyimport 
cv2 import imutils class LabHistogram def _ _ init _ 
_ self bins self . bins = bins def describe 
self image mask = None lab = cv2 . cvtColor 
image cv2 . COLOR _ BGR2LAB hist = cv2 . 
calcHist lab 0 1 2 mask self . bins 0 
256 0 256 0 256 # 获取 3D 直方图 # 
将 图片大小 标准化 忽略 图片大小 对 直方图 的 影响 if 
imutils . is _ cv2 hist = cv2 . normalize 
hist . flatten else hist = cv2 . normalize hist 
hist . flatten return histcluster _ histograms . pyfrom pyimagesearch 
. descriptors . labhistogram import LabHistogram from sklearn . cluster 
import KMeans from imutils import paths import numpy as np 
import argparse import cv2 ap = argparse . ArgumentParser ap 
. add _ argument d dataset required = True help 
= path to the input dataset directory ap . add 
_ argument k clusters type = int default = 2 
help = # of clusters to generate # 默认设置 k 
值 为 2 及 将 图片 分为 俩 类 args 
= vars ap . parse _ args desc = LabHistogram 
8 8 8 data = imagePaths = list paths . 
list _ images args dataset imagePaths = np . array 
sorted imagePaths for imagePath in imagePaths image = cv2 . 
imread imagePath hist = desc . describe image data . 
append hist # 描述符 加入到 数据 集中 # 对 描述符 
进行 聚 类 clt = KMeans n _ clusters = 
args clusters labels = clt . fit _ predict data 
for label in np . unique labels # 获取 每个 
集群 的 唯一 ID 进行 分类 labelPaths = imagePaths np 
. where labels = = label # 将 同一 集群 
的 图片 输出 显示 for i path in enumerate labelPaths 
image = cv2 . imread path cv2 . imshow Cluster 
{ } Image # { } . format label + 
1 i + 1 image cv2 . waitKey 0 cv2 
. d e s t r o y A l 
l W i n d o w s 4 胡 
默斯 作用 用于 物品 形状 检测 处理 二 值 图片 
提取 图片 中 物体 的 形状 运行 命令 python extract 
_ hu _ moments . pyextract _ hu _ moments 
. pyimport cv2 import imutils image = cv2 . imread 
planes . png image = cv2 . cvtColor image cv2 
. COLOR _ BGR2GRAY moments = cv2 . HuMoments cv2 
. moments image . flatten print ORIGINAL MOMENTS { } 
. format moments cv2 . imshow Image image cv2 . 
waitKey 0 # 找到 图片 中 每个 物件 的 行 
轮廓 cnts = cv2 . findContours image . copy cv2 
. RETR _ EXTERNAL cv2 . CHAIN _ APPROX _ 
SIMPLE cnts = cnts 0 if imutils . is _ 
cv2 else cnts 1 for i c in enumerate cnts 
x y w h = cv2 . boundingRect c roi 
= image y y + h x x + w 
# 提取 每个 形状 的 hu _ monebts 值 moments 
= cv2 . HuMoments cv2 . moments roi . flatten 
print MOMENTS FOR PLANE # { } { } . 
format i + 1 moments cv2 . imshow ROI # 
{ } . format i + 1 roi cv2 . 
waitKey 0 作用 随机 生成 数据集 运行 命令 python generate 
_ images . py output outputgenetate _ images . pyimport 
numpy as np import argparse import uuid import cv2 ap 
= argparse . ArgumentParser ap . add _ argument o 
output required = True help = Path to the output 
directory ap . add _ argument n num images type 
= int default = 500 help = # of disctrator 
images to generate args = vars ap . parse _ 
args for i in range 0 args num _ images 
image = np . zeros 500 500 3 dtype = 
uint8 x y = np . random . uniform low 
= 105 high = 405 size = 2 . astype 
int0 r = np . random . uniform low = 
25 high = 100 size = 1 . astype int0 
0 color = np . random . uniform low = 
0 high = 255 size = 3 . astype int0 
color = tuple map int color cv2 . circle image 
x y r color 1 cv2 . imwrite { } 
/ { } . jpg . format args output uuid 
. uuid4 image image = np . zeros 500 500 
3 dtype = uint8 topLeft = np . random . 
uniform low = 25 high = 225 size = 2 
. astype int0 botRight = np . random . uniform 
low = 250 high = 400 size = 2 . 
astype int0 color = np . random . uniform low 
= 0 high = 255 size = 3 . astype 
int0 color = tuple map int color cv2 . rectangle 
image tuple topLeft tuple botRight color 1 cv2 . imwrite 
{ } / { } . jpg . format args 
output uuid . uuid4 image 作用 从 数据 集中 找出 
异常 形状 运行 命令 python find _ rectangle . py 
dataset outputfind _ rectangle . pyfrom sklearn . metrics . 
pairwise import pairwise _ distances import numpy as np import 
argparse import glob import cv2 import imutils ap = argparse 
. ArgumentParser ap . add _ argument d dataset required 
= True help = Path to the dataset directory args 
= vars ap . parse _ args imagePaths = sorted 
glob . glob args dataset + / * . jpg 
data = for imagePath in imagePaths image = cv2 . 
imread imagePath gray = cv2 . cvtColor image cv2 . 
COLOR _ BGR2GRAY thresh = cv2 . threshold gray 5 
255 cv2 . THRESH _ BINARY 1 cnts = cv2 
. findContours thresh . copy cv2 . RETR _ EXTERNAL 
cv2 . CHAIN _ APPROX _ SIMPLE cnts = cnts 
0 if imutils . is _ cv2 else cnts 1 
c = max cnts key = cv2 . contourArea x 
y w h = cv2 . boundingRect c roi = 
cv2 . resize thresh y y + h x x 
+ w 50 50 # 忽略 图片大小 的 影响 moments 
= cv2 . HuMoments cv2 . moments roi . flatten 
data . append moments D = pairwise _ distances data 
. sum axis = 1 i = np . argmax 
D # 获取 距离 最大 的 图形 圆形 距离 很小 
矩形 距离 较大 image = cv2 . imread imagePaths i 
print Found square { } . format imagePaths i cv2 
. imshow Outlier image cv2 . waitKey 0 5 Zernike 
时刻 运用 Zernike 矩阵 量化 图像 中 的 形状 在 
图片 中 寻找 某个 特定 的 形状 from scipy . 
spatial import distance as dist import numpy as np import 
mahotas import cv2 import imutils def describe _ shapes image 
shapeFeatures = gray = cv2 . cvtColor image cv2 . 
COLOR _ BGR2GRAY blurred = cv2 . GaussianBlur gray 13 
13 0 cv2 . imshow 2 blurred thresh = cv2 
. threshold blurred 120 255 cv2 . THRESH _ BINARY 
1 thresh = cv2 . dilate thresh None iterations = 
4 thres = cv2 . erode thresh None iterations = 
2 cv2 . imshow 1 thres cv2 . waitKey 0 
cnts = cv2 . findContours thresh . copy cv2 . 
RETR _ EXTERNAL cv2 . CHAIN _ APPROX _ SIMPLE 
cnts = cnts 0 if imutils . is _ cv2 
else cnts 1 for c in cnts mask = np 
. zeros image . shape 2 dtype = uint8 cv2 
. drawContours mask c 1 255 1 x y w 
h = cv2 . boundingRect c roi = mask y 
y + h x x + w cv2 . imshow 
roi roi cv2 . waitKey 0 features = mahotas . 
features . zernike _ moments roi cv2 . m i 
n E n c l o s i n g 
C i r c l e c 1 degree = 
8 shapeFeatures . append features return cnts shapeFeatures refImage = 
cv2 . imread 2 . jpg _ gameFeatures = describe 
_ shapes refImage shapesImage = cv2 . imread 1 . 
jpg cnts shapeFeatures = describe _ shapes shapesImage D = 
dist . cdist gameFeatures shapeFeatures i = np . argmin 
D # 获取 最小 距离 的 下标 for j c 
in enumerate cnts if i = j box = cv2 
. minAreaRect c box = np . int0 cv2 . 
cv . BoxPoints box if imutils . is _ cv2 
else cv2 . boxPoints box cv2 . drawContours shapesImage box 
1 0 0 255 2 box = cv2 . minAreaRect 
cnts i box = np . int0 cv2 . cv 
. BoxPoints box if imutils . is _ cv2 else 
cv2 . boxPoints box cv2 . drawContours shapesImage box 1 
0 255 0 2 x y w h = cv2 
. boundingRect cnts i cv2 . putText shapesImage FOUND x 
y 10 cv2 . FONT _ HERSHEY _ SIMPLEX 0.9 
0 255 0 3 cv2 . imshow Input Image refImage 
cv2 . imshow Detected Shapes shapesImage cv2 . waitKey 0 
6 Haralick 纹理 功能 依据 数据 学习 分析 纹理 再将 
数据 图片 依据 纹理 分类 from sklearn . svm import 
LinearSVC import argparse import glob import mahotas import cv2 ap 
= argparse . ArgumentParser ap . add _ argument d 
training required = True help = Path to the dataset 
of textures ap . add _ argument t test required 
= True help = Path to the test images args 
= vars ap . parse _ args print INFO extracting 
features . . . data = labels = for imagePath 
in glob . glob args training + / * . 
jpg image = cv2 . imread imagePath image = cv2 
. cvtColor image cv2 . COLOR _ BGR2GRAY texture = 
imagePath imagePath . rfind / + 1 . split _ 
0 features = mahotas . features . haralick image . 
mean axis = 0 data . append features labels . 
append texture print INFO training model . . . model 
= LinearSVC C = 10.0 random _ state = 42 
model . fit data labels print INFO classifying . . 
. for imagePath in glob . glob args test + 
/ * . jpg image = cv2 . imread imagePath 
gray = cv2 . cvtColor image cv2 . COLOR _ 
BGR2GRAY features = mahotas . features . haralick gray . 
mean axis = 0 print features pred = model . 
predict features . reshape 1 1 0 print pred cv2 
. putText image pred 20 30 cv2 . FONT _ 
HERSHEY _ SIMPLEX 1.0 0 255 0 3 cv2 . 
imshow Image image cv2 . waitKey 0 7 本地 二进制 
模式 原理 LBP   在 本地 处理 像素     
而 不是 使用 灰度 共生 矩阵 通过 量化 小区 域特征 
分析 图片 的 特征向量 再 对 图片 进行 分类 注意 
点 记住 半径 r     和 点数 p 的 
影响 也 很重要 积分 越多 p     你 品尝 
更多 的 模式 你 可以 编码 但 在 同一 时间 
你 增加 你 的 计算 成本 另一方面 如果 增加 半径大小 
r     则 可以 在 图像 中 捕捉 较大 
的 纹理 细节 但是 如果 增加 r     而不 
增加 p     那么 您 将 失去 LBP 描述符 
的 局部 区分 能力 例 时尚 索引 文件 结构 | 
pyimagesearch | | _ _ init _ _ . py 
| | descriptors | | | _ _ init _ 
_ . py | | | l o c a 
l b i n a r y p a t 
t e r n s . py | search _ 
shirts . py 作用 创建 二进制 描述符 l o c 
a l b i n a r y p a 
t t e r n s . pyfrom skimage import 
feature import numpy as np class L o c a 
l B i n a r y P a t 
t e r n s def _ _ init _ 
_ self numPoints radius # 围绕 中心 像素 的 图案 
半径 半径 外围 点数 决定 计算 量 self . numPoints 
= numPoints self . radius = radius def describe self 
image eps = 1e 7 lbp = feature . local 
_ binary _ pattern image self . numPoints self . 
radius method = uniform hist _ = np . histogram 
lbp . ravel bins = range 0 self . numPoints 
+ 3 range = 0 self . numPoints + 2 
# normalize the histogram hist = hist . astype float 
hist / = hist . sum + eps # return 
the histogram of Local Binary Patterns return hist 作用 测试 
二进制 描述符 的 纹理 特征 效果 运行 命令 python search 
_ shirts . py dataset shirts query queries / query 
_ 01 . jpgsearch _ shirts . py from _ 
_ future _ _ import print _ function from pyimagesearch 
import L o c a l B i n a 
r y P a t t e r n s 
from imutils import paths import numpy as np import argparse 
import cv2 ap = argparse . ArgumentParser ap . add 
_ argument d dataset required = True help = path 
to the dataset of shirt images ap . add _ 
argument q query required = True help = path to 
the query image args = vars ap . parse _ 
args desc = L o c a l B i 
n a r y P a t t e r 
n s 24 8 index = { } for imagePath 
in paths . list _ images args dataset image = 
cv2 . imread imagePath gray = cv2 . cvtColor image 
cv2 . COLOR _ BGR2GRAY hist = desc . describe 
gray filename = imagePath imagePath . rfind / + 1 
index filename = hist query = cv2 . imread args 
query queryFeatures = desc . describe cv2 . cvtColor query 
cv2 . COLOR _ BGR2GRAY cv2 . imshow Query query 
results = { } for k features in index . 
items d = 0.5 * np . sum features queryFeatures 
* * 2 / features + queryFeatures + 1e 10 
results k = d results = sorted v k for 
k v in results . items 3 # 选取 前 
较小 距离 相似性 高的/nr 前 3个 结果 for i score 
filename in enumerate results # 将 前 3个 结果 显示 
出来 print # % d . % s % . 
4f % i + 1 filename score image = cv2 
. imread args dataset + / + filename cv2 . 
imshow Result # { } . format i + 1 
image cv2 . waitKey 0 8 定向 梯度 直方图 原理 
运用 HOG 描述符 他 主要 用于 描述 图像 中 物体 
的 结构 形状 和 外观 使其 成为 物体 分类 的 
优秀 描述符 但是 由于 HOG 捕获 局部 强度 梯度 和 
边缘 方向 因此 它 也 会 产生 良好 的 纹理 
描述符 知识点 pixels _ per _ cell 中的 像素   
  越多 我们 的 表示 越 粗糙 类 似地 pixels 
_ per _ cell 的 较小 值 将 产生 更 
细粒度 轮廓 更 明显 疑问 1 from sklearn . neighbors 
import K N e i g h b o r 
s C l a s s i f i e 
r 解释 http / / scikit learn . org / 
stable / modules / generated / sklearn . neighbors . 
K N e i g h b o r s 
C l a s s i f i e r 
. html 运行 命令 python recognize _ car _ logos 
. py training car _ logos test test _ imagesrecognize 
_ car _ logs . pyfrom sklearn . neighbors import 
K N e i g h b o r s 
C l a s s i f i e r 
from skimage import exposure from skimage import feature from imutils 
import paths import argparse import imutils import cv2 ap = 
argparse . ArgumentParser ap . add _ argument d training 
required = True help = Path to the logos training 
dataset ap . add _ argument t test required = 
True help = Path to the test dataset args = 
vars ap . parse _ args print INFO extracting features 
. . . data = labels = for imagePath in 
paths . list _ images args training # 提取 每个 
标志 的 hog 特征向量 make = imagePath . split / 
2 image = cv2 . imread imagePath gray = cv2 
. cvtColor image cv2 . COLOR _ BGR2GRAY edged = 
imutils . auto _ canny gray cnts = cv2 . 
findContours edged . copy cv2 . RETR _ EXTERNAL cv2 
. CHAIN _ APPROX _ SIMPLE cnts = cnts 0 
if imutils . is _ cv2 else cnts 1 c 
= max cnts key = cv2 . contourArea x y 
w h = cv2 . boundingRect c logo = gray 
y y + h x x + w logo = 
cv2 . resize logo 200 100 H = feature . 
hog logo orientations = 9 pixels _ per _ cell 
= 10 10 cells _ per _ block = 2 
2 transform _ sqrt = True block _ norm = 
L1 data . append H labels . append make print 
INFO training classifier . . . model = K N 
e i g h b o r s C l 
a s s i f i e r n _ 
neighbors = 1 # 对 特征 数据 进行 K 值 
分类 model . fit data labels print INFO evaluating . 
. . for i imagePath in enumerate paths . list 
_ images args test image = cv2 . imread imagePath 
gray = cv2 . cvtColor image cv2 . COLOR _ 
BGR2GRAY logo = cv2 . resize gray 200 100 H 
hogImage = feature . hog logo orientations = 9 pixels 
_ per _ cell = 10 10 cells _ per 
_ block = 2 2 transform _ sqrt = True 
block _ norm = L1 visualise = True pred = 
model . predict H . reshape 1 1 0 hogImage 
= exposure . rescale _ intensity hogImage out _ range 
= 0 255 hogImage = hogImage . astype uint8 cv2 
. imshow HOG Image # { } . format i 
+ 1 hogImage cv2 . putText image pred . title 
10 35 cv2 . FONT _ HERSHEY _ SIMPLEX 1.0 
0 255 0 3 cv2 . imshow Test Image # 
{ } . format i + 1 image cv2 . 
waitKey 0 9 关键点 检测 9.1 FAST 关键点 检测 原理 
必须 有 至少 Ñ 沿着 连续 像素 圆形 周边 具有 
半径 R 是 所有 或者 亮 或 更暗 比 中心 
像素 由 阈值 t 疑问 是否 可以 修改 参数 半径 
R 和N值/nr 运行 命令 python fast _ keypoint . pyfast 
_ keypoint . pyfrom _ _ future _ _ import 
print _ function import numpy as np import cv2 import 
imutils image = cv2 . imread next . png orig 
= image . copy gray = cv2 . cvtColor image 
cv2 . COLOR _ BGR2GRAY if imutils . is _ 
cv2 detector = cv2 . FeatureDetector _ create FAST kps 
= detector . detect gray else detector = cv2 . 
F a s t F e a t u r 
e D e t e c t o r _ 
create kps = detector . detect gray None print # 
of keypoints { } . format len kps for kp 
in kps r = int 0.5 * kp . size 
x y = np . int0 kp . pt cv2 
. circle image x y r 0 255 255 2 
cv2 . imshow Images np . hstack orig image cv2 
. waitKey 0 9 . 2Harris 关键点 检测 原理 将 
分别 在 x 和y/nr 方向 上 对 该区 域中 的 
梯度 值 求和 和/c 如果/c 这/r 两个/m 值/n 都/d 足够/v 
大 那么 我们 可以 将 该 区域 定义 为 角落 
该 过程 针对 输入 图像 中 的 每个 像素 完成 
这种 方法 是 有效 的 因为/c 红色/n 圆/n 圈内/n 的/uj 
区域/n 会/v 有/v 大量/n 的/uj 水平/n 和/c 垂直/v 梯度/n 当 
发生 这种 情况 时 我们 知道 我们 找到 了 一个 
角落 . 疑问 1 harris 函数 的 参数 的 作用 
• img 数据类型 为 float32 的 输入 图像 • blockSize 
角 点 检测 中 要 考虑 的 领域 大小 • 
ksize Sobel 求导 中 使用 的 窗口 大小 • k 
Harris 角 点 检测 方程 中的 自由 参数 取值 参数 
为 0 04 0.06 . 2 harris 什么 时候 被 
调用 harris _ keypoint . pyfrom _ _ future _ 
_ import print _ function import numpy as np import 
cv2 import imutils def harris gray blockSize = 2 apetureSize 
= 3 k = 0.1 T = 0.02 gray = 
np . float32 gray H = cv2 . cornerHarris gray 
blockSize apetureSize k kps = np . argwhere H T 
* H . max kps = cv2 . KeyPoint pt 
1 pt 0 3 for pt in kps return kps 
image = cv2 . imread next . png orig = 
image . copy gray = cv2 . cvtColor image cv2 
. COLOR _ BGR2GRAY if imutils . is _ cv2 
detector = cv2 . FeatureDetector _ create HARRIS kps = 
detector . detect gray else kps = harris gray print 
# of keypoints { } . format len kps for 
kp in kps r = int 0.5 * kp . 
size x y = np . int0 kp . pt 
cv2 . circle image x y r 0 255 255 
2 # show the image cv2 . imshow Images np 
. hstack orig image cv2 . waitKey 0 9.3 GFTT 
关键点 检测 原理 提出 了 以下 R 的 计算 来 
表明 一个 地区 是否 是 一个 角落 在 这种 情况 
下 我们 只是 取 特征值 分解 分量 的 最小值 如果 
这个 值 R 大于 我们 的 阈值 T     
即 那么 我们 可以 将 该 区域 标记 为 拐角 
在 harris 基础上 改进 from _ _ future _ _ 
import print _ function import numpy as np import cv2 
import imutils def gftt gray maxCorners = 0 qualityLevel = 
0.01 minDistance = 1 mask = None blockSize = 3 
u s e H a r r i s D 
e t e c t o r = False k 
= 0.04 kps = cv2 . g o o d 
F e a t u r e s T o 
T r a c k gray maxCorners qualityLevel minDistance mask 
= mask blockSize = blockSize u s e H a 
r r i s D e t e c t 
o r = u s e H a r r 
i s D e t e c t o r 
k = k return cv2 . KeyPoint pt 0 0 
pt 0 1 3 for pt in kps image = 
cv2 . imread next . png orig = image . 
copy gray = cv2 . cvtColor image cv2 . COLOR 
_ BGR2GRAY if imutils . is _ cv2 detector = 
cv2 . FeatureDetector _ create GFTT kps = detector . 
detect gray else kps = gftt gray for kp in 
kps r = int 0.5 * kp . size x 
y = np . int0 kp . pt cv2 . 
circle image x y r 0 255 255 2 print 
# of keypoints { } . format len kps cv2 
. imshow Images np . hstack orig image cv2 . 
waitKey 0 9.4 DoG 关键点 检测器 通过 对 图像 缩放 
变化 寻找 角 点 获取 的 角 点 绘制 出来 
的 圆 有 大小 区别 from _ _ future _ 
_ import print _ function import numpy as np import 
cv2 import imutils image = cv2 . imread next . 
png orig = image . copy gray = cv2 . 
cvtColor image cv2 . COLOR _ BGR2GRAY if imutils . 
is _ cv2 detector = cv2 . FeatureDetector _ create 
SIFT kps = detector . detect gray else detector = 
cv2 . xfeatures2d . SIFT _ create kps _ = 
detector . detectAndCompute gray None print # of keypoints { 
} . format len kps for kp in kps r 
= int 0.5 * kp . size x y = 
np . int0 kp . pt cv2 . circle image 
x y r 0 255 255 2 cv2 . imshow 
Images np . hstack orig image cv2 . waitKey 0 
9.5 Fast _ Hessian 关键点 检测 作用 类似于 高斯 差分 
快速 Hessian 关键点 检测器 用于 定位 图像 中 可 重复 
的 斑点 状 区域 这些 区域 可能 是 边缘 角落 
或 两者 from _ _ future _ _ import print 
_ function import numpy as np import cv2 import imutils 
image = cv2 . imread next . png orig = 
image . copy gray = cv2 . cvtColor image cv2 
. COLOR _ BGR2GRAY if imutils . is _ cv2 
detector = cv2 . FeatureDetector _ create SURF kps = 
detector . detect gray else detector = cv2 . xfeatures2d 
. SURF _ create kps _ = detector . detectAndCompute 
gray None print # of keypoints { } . format 
len kps for kp in kps r = int 0.5 
* kp . size x y = np . int0 
kp . pt cv2 . circle image x y r 
0 255 255 2 cv2 . imshow Images np . 
hstack orig image cv2 . waitKey 0 9.6 STAR 关键点 
检测 运用 情况 用于 检测 图像 中的 斑点 状 区域 
from _ _ future _ _ import print _ function 
import numpy as np import cv2 import imutils image = 
cv2 . imread next . png orig = image . 
copy gray = cv2 . cvtColor image cv2 . COLOR 
_ BGR2GRAY if imutils . is _ cv2 detector = 
cv2 . FeatureDetector _ create STAR kps = detector . 
detect gray else detector = cv2 . xfeatures2d . StarDetector 
_ create kps = detector . detect gray print # 
of keypoints { } . format len kps for kp 
in kps r = int 0.5 * kp . size 
x y = np . int0 kp . pt cv2 
. circle image x y r 0 255 255 2 
cv2 . imshow Images np . hstack orig image cv2 
. waitKey 0 9.7 MSER 关键点 检测 作用 MSER 检测器 
用于 检测 图像 中的 斑点 状 结构 假设 这些 区域 
很小 具有 相对 相同 的 像素 强度 并且 被 对比 
像素 包围 from _ _ future _ _ import print 
_ function import numpy as np import cv2 import imutils 
image = cv2 . imread next . png orig = 
image . copy gray = cv2 . cvtColor image cv2 
. COLOR _ BGR2GRAY # detect MSER keypoints in the 
image if imutils . is _ cv2 detector = cv2 
. FeatureDetector _ create MSER kps = detector . detect 
gray else detector = cv2 . MSER _ create kps 
= detector . detect gray None print # of keypoints 
{ } . format len kps for kp in kps 
r = int 0.5 * kp . size x y 
= np . int0 kp . pt cv2 . circle 
image x y r 0 255 255 2 cv2 . 
imshow Images np . hstack orig image cv2 . waitKey 
0 9.8 密集 关键点 检测 作用 浓密 检测器   将 
图像 中 的 每个 k 像素 标记 为 关键 点 
from _ _ future _ _ import print _ function 
import numpy as np import argparse import cv2 import imutils 
def dense image step radius kps = for x in 
range 0 image . shape 1 step for y in 
range 0 image . shape 0 step kps . append 
cv2 . KeyPoint x y radius * 2 return kps 
ap = argparse . ArgumentParser ap . add _ argument 
s step type = int default = 28 help = 
step in pixels of the dense detector args = vars 
ap . parse _ args image = cv2 . imread 
next . png orig = image . copy gray = 
cv2 . cvtColor image cv2 . COLOR _ BGR2GRAY kps 
= radii = 4 8 12 if imutils . is 
_ cv2 detector = cv2 . FeatureDetector _ create Dense 
detector . setInt initXyStep args step rawKps = detector . 
detect gray else rawKps = dense gray args step 1 
for rawKp in rawKps for r in radii kp = 
cv2 . KeyPoint x = rawKp . pt 0 y 
= rawKp . pt 1 _ size = r * 
2 kps . append kp print # dense keypoints { 
} . format len rawKps print # dense + multi 
radii keypoints { } . format len kps for kp 
in kps r = int 0.5 * kp . size 
x y = np . int0 kp . pt cv2 
. circle image x y r 0 255 255 1 
cv2 . imshow Images np . hstack orig image cv2 
. waitKey 0 9.9 BRISK 关键点 检测器 运用 情况 多 
尺度 版本 from _ _ future _ _ import print 
_ function import numpy as np import cv2 import imutils 
image = cv2 . imread next . png orig = 
image . copy gray = cv2 . cvtColor image cv2 
. COLOR _ BGR2GRAY if imutils . is _ cv2 
detector = cv2 . FeatureDetector _ create BRISK kps = 
detector . detect gray else detector = cv2 . BRISK 
_ create kps = detector . detect gray None print 
# of keypoints { } . format len kps for 
kp in kps r = int 0.5 * kp . 
size x y = np . int0 kp . pt 
cv2 . circle image x y r 0 255 255 
2 cv2 . imshow Images np . hstack orig image 
cv2 . waitKey 0 9.10 ORB 关键点 检测器 的 运用 
作用 ORB 用于 检测 图像 中的 角 点 from _ 
_ future _ _ import print _ function import numpy 
as np import cv2 import imutils image = cv2 . 
imread next . png orig = image . copy gray 
= cv2 . cvtColor image cv2 . COLOR _ BGR2GRAY 
if imutils . is _ cv2 detector = cv2 . 
FeatureDetector _ create ORB kps = detector . detect gray 
else detector = cv2 . ORB _ create kps = 
detector . detect gray None print # of keypoints { 
} . format len kps for kp in kps r 
= int 0.5 * kp . size x y = 
np . int0 kp . pt cv2 . circle image 
x y r 0 255 255 2 cv2 . imshow 
Images np . hstack orig image cv2 . waitKey 0 
10 局部 不变 描述符 10.1 SIFT 作用 检测 关键点 并从 
图像 中 提取 SIFT 特征向量 from _ _ future _ 
_ import print _ function import argparse import cv2 import 
imutils ap = argparse . ArgumentParser ap . add _ 
argument i image required = True help = Path to 
the image args = vars ap . parse _ args 
image = cv2 . imread args image gray = cv2 
. cvtColor image cv2 . COLOR _ BGR2GRAY if imutils 
. is _ cv2 detector = cv2 . FeatureDetector _ 
create SIFT extractor = cv2 . D e s c 
r i p t o r E x t r 
a c t o r _ create SIFT kps = 
detector . detect gray kps descs = extractor . compute 
gray kps else detector = cv2 . xfeatures2d . SIFT 
_ create kps descs = detector . detectAndCompute gray None 
print INFO # of keypoints detected { } . format 
len kps print INFO feature vector shape { } . 
format descs . shape 10.2 RootSIFT 作用 定义 RootSIFT 检测器 
获取 关键点 特征 rootsift . pyimport numpy as np import 
cv2 import imutils class RootSIFT def _ _ init _ 
_ self if imutils . is _ cv2 self . 
extractor = cv2 . D e s c r i 
p t o r E x t r a c 
t o r _ create SIFT else self . extractor 
= cv2 . xfeatures2d . SIFT _ create def compute 
self image kps eps = 1e 7 if imutils . 
is _ cv2 kps descs = self . extractor . 
compute image kps else kps descs = self . extractor 
. detectAndCompute image None if len kps = = 0 
return None descs / = descs . sum axis = 
1 keepdims = True + eps descs = np . 
sqrt descs return kps descs 作用 从 图像 中 提取 
RootSIFT 描述符 extract _ rpptsift . pyfrom _ _ future 
_ _ import print _ function from pyimagesearch . descriptors 
import RootSIFT import argparse import cv2 import imutils ap = 
argparse . ArgumentParser ap . add _ argument i image 
required = True help = Path to the image args 
= vars ap . parse _ args image = cv2 
. imread args image gray = cv2 . cvtColor image 
cv2 . COLOR _ BGR2GRAY if imutils . is _ 
cv2 detector = cv2 . FeatureDetector _ create SIFT extractor 
= RootSIFT kps = detector . detect gray else detector 
= cv2 . xfeatures2d . SIFT _ create extractor = 
RootSIFT kps _ = detector . detectAndCompute gray None kps 
descs = extractor . compute gray kps print INFO # 
of keypoints detected { } . format len kps print 
INFO feature vector shape { } . format descs . 
shape 10.3 SURF 作用 SURF 的 第一步 是 选择 围绕 
关键点 的 图像 的 矩形 区域 在 关键 点 检测 
阶段 确定 区域 的 确切 大小 extract _ surf . 
pyfrom _ _ future _ _ import print _ function 
import argparse import cv2 import imutils ap = argparse . 
ArgumentParser ap . add _ argument i image required = 
True help = Path to the image args = vars 
ap . parse _ args image = cv2 . imread 
args image gray = cv2 . cvtColor image cv2 . 
COLOR _ BGR2GRAY if imutils . is _ cv2 detector 
= cv2 . FeatureDetector _ create SURF extractor = cv2 
. D e s c r i p t o 
r E x t r a c t o r 
_ create SURF kps = detector . detect gray kps 
descs = extractor . compute gray kps else detector = 
cv2 . xfeatures2d . SURF _ create kps descs = 
detector . detectAndCompute gray None print INFO # of keypoints 
detected { } . format len kps print INFO feature 
vector shape { } . format descs . shape 10.4 
实值 特征 匹配 知识点 提取 关键点 的 图像 坐标 例 
ksp 0 . pt 运行 命令 1 python draw _ 
matches . py first jp _ 01 . png second 
jp _ 02 . png detector SURF extractor SIFT2 python 
draw _ matches . py first jp _ 01 . 
png second jp _ 02 . png detector SURF extractor 
RootSIFT3 python draw _ matches . py first jp _ 
01 . png second jp _ 02 . png detector 
SURF extractor SURF # coding = utf 8 from _ 
_ future _ _ import print _ function import numpy 
as np import argparse import cv2 from imutils . feature 
. factories import FeatureDetector _ create D e s c 
r i p t o r E x t r 
a c t o r _ create D e s 
c r i p t o r M a t 
c h e r _ create ap = argparse . 
ArgumentParser ap . add _ argument f first required = 
True help = Path to first image # 提取 关键点 
和 特征向量 的 第一 幅 图像 的 路经 ap . 
add _ argument s second required = True help = 
Path to second image # 提取 关键点 和 特征向量 的 
第二 幅 图像 的 路经 ap . add _ argument 
d detector type = str default = SURF help = 
Kepyoint detector to use . Options BRISK DENSE DOG SIFT 
FAST FASTHESSIAN SURF GFTT HARRIS MSER ORB STAR # 用于 
在 俩个 图像 执行 关键点 检测 的 关键 点 的 
检测器 ap . add _ argument e extractor type = 
str default = SIFT help = Keypoint detector to use 
. Options RootSIFT SIFT SURF # 关键 点 区域 提取 
局部 不变 描述符 ap . add _ argument m matcher 
type = str default = BruteForce help = Feature matcher 
to use . Options BruteForce BruteForce SL2 BruteForce L1 FlannBased 
# 寻找 没对 描述符 最小 距离 方法 # ap . 
add _ argument v visualize type = str default = 
Yes help = Whether the visualiz image should be shown 
. Options Yes No Each ap . add _ argument 
v visualize type = str default = Yes help = 
Whether the visualiztion image should be shown . Options Yes 
No Each # 绘制 对 关键 点 和 描述符 之间 
的 匹配 args = vars ap . parse _ args 
if args detector = = DOG detector = FeatureDetector _ 
create SIFT elif args detector = = FASTHESSIAN detector = 
FeatureDetector _ create SURF else detector = FeatureDetector _ create 
args detector extractor = D e s c r i 
p t o r E x t r a c 
t o r _ create args extractor # 提取 关键 
点 区域 的 特征 描述符 matcher = D e s 
c r i p t o r M a t 
c h e r _ create args matcher imageA = 
cv2 . imread args first imageB = cv2 . imread 
args second grayA = cv2 . cvtColor imageA cv2 . 
COLOR _ BGR2GRAY grayB = cv2 . cvtColor imageB cv2 
. COLOR _ BGR2GRAY # 提取 关键点 kpsA = detector 
. detect grayA kpsB = detector . detect grayB # 
提取 关键 的 局部 特征 描述符 kpsA featuresA = extractor 
. compute grayA kpsA kpsB featuresB = extractor . compute 
grayB kpsB rawMatches = matcher . knnMatch featuresA featuresB 2 
matches = if rawMatches is not None for m in 
rawMatches # 筛选 符合 条件 的 关键 点 if len 
m = = 2 and m 0 . distance m 
1 . distance * 0.8 matches . append m 0 
. trainIdx m 0 . queryIdx print # of keypoints 
from first image { } . format len kpsA 11 
二进制 描述符 11.1 ORBfrom _ _ future _ _ import 
print _ function import argparse import cv2 import imutils ap 
= argparse . ArgumentParser ap . add _ argument i 
image required = True help = Path to the image 
args = vars ap . parse _ args image = 
cv2 . imread args image gray = cv2 . cvtColor 
image cv2 . COLOR _ BGR2GRAY if imutils . is 
_ cv2 detector = cv2 . FeatureDetector _ create ORB 
extractor = cv2 . D e s c r i 
p t o r E x t r a c 
t o r _ create ORB kps = detector . 
detect gray kps descs = extractor . compute gray kps 
else detector = cv2 . ORB _ create kps descs 
= detector . detectAndCompute gray None # show the shape 
of the keypoints and local invariant descriptors array print INFO 
# of keypoints detected { } . format len kps 
print INFO feature vector shape { } . format descs 
. shape 11.2 BRISKfrom _ _ future _ _ import 
print _ function import argparse import cv2 import imutils ap 
= argparse . ArgumentParser ap . add _ argument i 
image required = True help = Path to the image 
args = vars ap . parse _ args image = 
cv2 . imread args image gray = cv2 . cvtColor 
image cv2 . COLOR _ BGR2GRAY if imutils . is 
_ cv2 detector = cv2 . FeatureDetector _ create BRISK 
extractor = cv2 . D e s c r i 
p t o r E x t r a c 
t o r _ create BRISK kps = detector . 
detect gray kps descs = extractor . compute gray kps 
else detector = cv2 . BRISK _ create kps descs 
= detector . detectAndCompute gray None print INFO # of 
keypoints detected { } . format len kps print INFO 
feature vector shape { } . format descs . shape 
11.3 BRIEFfrom _ _ future _ _ import print _ 
function import argparse import cv2 import imutils ap = argparse 
. ArgumentParser ap . add _ argument i image required 
= True help = Path to the image args = 
vars ap . parse _ args image = cv2 . 
imread args image gray = cv2 . cvtColor image cv2 
. COLOR _ BGR2GRAY if imutils . is _ cv2 
detector = cv2 . FeatureDetector _ create FAST extractor = 
cv2 . D e s c r i p t 
o r E x t r a c t o 
r _ create BRIEF else detector = cv2 . F 
a s t F e a t u r e 
D e t e c t o r _ create 
extractor = cv2 . xfeatures2d . B r i e 
f D e s c r i p t o 
r E x t r a c t o r 
_ create kps = detector . detect gray kps descs 
= extractor . compute gray kps print INFO # of 
keypoints detected { } . format len kps print INFO 
feature vector shape { } . format descs . shape 
from _ _ future _ _ import print _ function 
import argparse import cv2 import imutils # construct the argument 
parser and parse the arguments ap = argparse . ArgumentParser 
ap . add _ argument i image required = True 
help = Path to the image args = vars ap 
. parse _ args image = cv2 . imread args 
image gray = cv2 . cvtColor image cv2 . COLOR 
_ BGR2GRAY if imutils . is _ cv2 detector = 
cv2 . FeatureDetector _ create FAST extractor = cv2 . 
D e s c r i p t o r 
E x t r a c t o r _ 
create FREAK kps = detector . detect gray kps descs 
= extractor . compute gray kps else detector = cv2 
. F a s t F e a t u 
r e D e t e c t o r 
_ create extractor = cv2 . xfeatures2d . FREAK _ 
create kps = detector . detect gray None kps descs 
= extractor . compute gray kps print INFO # of 
keypoints detected { } . format len kps print INFO 
feature vector shape { } . format descs . shape 
1 图像 描述符 特征 描述符 和 特征向量 的 定义 特征向量 
用于 表示 和 量化 图像 的 数字 列表 简单 理解 
成将/nr 图片 转化 为 一个 数字 列表 表示 特征向量 中 
用来 描述 图片 的 各种 属性 的 向量 称 为特征 
矢量 图像 描述符 理解/v 成/n 一种/m 算法/n 和/c 方法/n 控制 
整个 图像 如何 转变 为 特征向量 量化 是的 图像 形状 
颜色 纹理 或 三者 的 任何 组合 输入 1个 图像 
时 图像 描述符 将 返回 1个 特征向量 主要 用于 图像 
分类 缺乏 区分 图像 中 不同 对象 的 能力 特征 
描述符 是 一种 算法 和 方法 控制 图像 部分 区域 
对 部分 区域 返回 多个 特征向量 输入 1个 图像 返回 
多个 特征向量 主要 用来 处理 图像 的 局部 主要 用于 
图像匹配 视觉 检测 匹配 图像 中 的 物品 2 色彩 
通道 统计 运行 命令 python color _ channel _ stats 
. py 原理 通过 统计 图像 中 的 每个 色彩 
通道 及 RGB 色彩 通道 凭据 通道 值 和 标准 
差等 方法 量化 和 表示 图像 的 颜色 分布 从而 
对 图像 进行 分类 主要 运用 颜色 差异 名义 不同 
场景 图片 分类 from scipy . spatial import distance as 
dist from imutils import paths import numpy as np import 
cv2 imagePaths = sorted list paths . list _ images 
dinos index = { } for imagePath in imagePaths image 
= cv2 . imread imagePath filename = imagePath imagePath . 
rfind / + 1 means stds = cv2 . meanStdDev 
image # 计算 图像 中 每个 色彩 通道 的 平均值 
和 标准偏差 features = np . concatenate means stds . 
flatten # 将 每个 色彩 通道 的 平均值 和 标准偏差 
连接 在 一起 形成 我们 的 特征向量 index filename = 
features query = cv2 . imread imagePaths 0 cv2 . 
imshow Query trex _ 01 . png query keys = 
sorted index . keys for i k in enumerate keys 
if k = = trex _ 01 . png continue 
image = cv2 . imread imagePaths i d = dist 
. euclidean index trex _ 01 . png index k 
# 计算 目标 图像 特征向量 与 我们 数据 集中 的 
特征向量 之间 的 欧几里德 距离 d 越小 颜色通道 越 相似 
图片 越 相似 cv2 . putText image % . 2f 
% d 10 30 cv2 . FONT _ HERSHEY _ 
SIMPLEX 0.75 0 255 0 2 cv2 . imshow k 
image cv2 . waitKey 0 3 彩色 直方图 原理 通过 
颜色 的 分布 运用 机器学习 中的 K 均值 聚 类 
运用于 聚 类 颜色 直方图 无 参考值 进行 图像 分类 
关键 是 需要 对 颜色 直方图 理解 文件 结构 | 
pyimagesearch |         | _ _ init 
_ _ . py |         | 
descriptors |         |       
  | _ _ init _ _ . py | 
        |         | 
labhistogram . py | cluster _ histograms . py 疑问 
1 imutils . is _ cv2 意义 labhistogram . pyimport 
cv2 import imutils class LabHistogram def _ _ init _ 
_ self bins self . bins = bins def describe 
self image mask = None lab = cv2 . cvtColor 
image cv2 . COLOR _ BGR2LAB hist = cv2 . 
calcHist lab 0 1 2 mask self . bins 0 
256 0 256 0 256 # 获取 3D 直方图 # 
将 图片大小 标准化 忽略 图片大小 对 直方图 的 影响 if 
imutils . is _ cv2 hist = cv2 . normalize 
hist . flatten else hist = cv2 . normalize hist 
hist . flatten return histcluster _ histograms . pyfrom pyimagesearch 
. descriptors . labhistogram import LabHistogram from sklearn . cluster 
import KMeans from imutils import paths import numpy as np 
import argparse import cv2 ap = argparse . ArgumentParser ap 
. add _ argument d dataset required = True help 
= path to the input dataset directory ap . add 
_ argument k clusters type = int default = 2 
help = # of clusters to generate # 默认设置 k 
值 为 2 及 将 图片 分为 俩 类 args 
= vars ap . parse _ args desc = LabHistogram 
8 8 8 data = imagePaths = list paths . 
list _ images args dataset imagePaths = np . array 
sorted imagePaths for imagePath in imagePaths image = cv2 . 
imread imagePath hist = desc . describe image data . 
append hist # 描述符 加入到 数据 集中 # 对 描述符 
进行 聚 类 clt = KMeans n _ clusters = 
args clusters labels = clt . fit _ predict data 
for label in np . unique labels # 获取 每个 
集群 的 唯一 ID 进行 分类 labelPaths = imagePaths np 
. where labels = = label # 将 同一 集群 
的 图片 输出 显示 for i path in enumerate labelPaths 
image = cv2 . imread path cv2 . imshow Cluster 
{ } Image # { } . format label + 
1 i + 1 image cv2 . waitKey 0 cv2 
. d e s t r o y A l 
l W i n d o w s 4 胡 
默斯 作用 用于 物品 形状 检测 处理 二 值 图片 
提取 图片 中 物体 的 形状 运行 命令 python extract 
_ hu _ moments . pyextract _ hu _ moments 
. pyimport cv2 import imutils image = cv2 . imread 
planes . png image = cv2 . cvtColor image cv2 
. COLOR _ BGR2GRAY moments = cv2 . HuMoments cv2 
. moments image . flatten print ORIGINAL MOMENTS { } 
. format moments cv2 . imshow Image image cv2 . 
waitKey 0 # 找到 图片 中 每个 物件 的 行 
轮廓 cnts = cv2 . findContours image . copy cv2 
. RETR _ EXTERNAL cv2 . CHAIN _ APPROX _ 
SIMPLE cnts = cnts 0 if imutils . is _ 
cv2 else cnts 1 for i c in enumerate cnts 
x y w h = cv2 . boundingRect c roi 
= image y y + h x x + w 
# 提取 每个 形状 的 hu _ monebts 值 moments 
= cv2 . HuMoments cv2 . moments roi . flatten 
print MOMENTS FOR PLANE # { } { } . 
format i + 1 moments cv2 . imshow ROI # 
{ } . format i + 1 roi cv2 . 
waitKey 0 作用 随机 生成 数据集 运行 命令 python generate 
_ images . py output outputgenetate _ images . pyimport 
numpy as np import argparse import uuid import cv2 ap 
= argparse . ArgumentParser ap . add _ argument o 
output required = True help = Path to the output 
directory ap . add _ argument n num images type 
= int default = 500 help = # of disctrator 
images to generate args = vars ap . parse _ 
args for i in range 0 args num _ images 
image = np . zeros 500 500 3 dtype = 
uint8 x y = np . random . uniform low 
= 105 high = 405 size = 2 . astype 
int0 r = np . random . uniform low = 
25 high = 100 size = 1 . astype int0 
0 color = np . random . uniform low = 
0 high = 255 size = 3 . astype int0 
color = tuple map int color cv2 . circle image 
x y r color 1 cv2 . imwrite { } 
/ { } . jpg . format args output uuid 
. uuid4 image image = np . zeros 500 500 
3 dtype = uint8 topLeft = np . random . 
uniform low = 25 high = 225 size = 2 
. astype int0 botRight = np . random . uniform 
low = 250 high = 400 size = 2 . 
astype int0 color = np . random . uniform low 
= 0 high = 255 size = 3 . astype 
int0 color = tuple map int color cv2 . rectangle 
image tuple topLeft tuple botRight color 1 cv2 . imwrite 
{ } / { } . jpg . format args 
output uuid . uuid4 image 作用 从 数据 集中 找出 
异常 形状 运行 命令 python find _ rectangle . py 
dataset outputfind _ rectangle . pyfrom sklearn . metrics . 
pairwise import pairwise _ distances import numpy as np import 
argparse import glob import cv2 import imutils ap = argparse 
. ArgumentParser ap . add _ argument d dataset required 
= True help = Path to the dataset directory args 
= vars ap . parse _ args imagePaths = sorted 
glob . glob args dataset + / * . jpg 
data = for imagePath in imagePaths image = cv2 . 
imread imagePath gray = cv2 . cvtColor image cv2 . 
COLOR _ BGR2GRAY thresh = cv2 . threshold gray 5 
255 cv2 . THRESH _ BINARY 1 cnts = cv2 
. findContours thresh . copy cv2 . RETR _ EXTERNAL 
cv2 . CHAIN _ APPROX _ SIMPLE cnts = cnts 
0 if imutils . is _ cv2 else cnts 1 
c = max cnts key = cv2 . contourArea x 
y w h = cv2 . boundingRect c roi = 
cv2 . resize thresh y y + h x x 
+ w 50 50 # 忽略 图片大小 的 影响 moments 
= cv2 . HuMoments cv2 . moments roi . flatten 
data . append moments D = pairwise _ distances data 
. sum axis = 1 i = np . argmax 
D # 获取 距离 最大 的 图形 圆形 距离 很小 
矩形 距离 较大 image = cv2 . imread imagePaths i 
print Found square { } . format imagePaths i cv2 
. imshow Outlier image cv2 . waitKey 0 5 Zernike 
时刻 运用 Zernike 矩阵 量化 图像 中 的 形状 在 
图片 中 寻找 某个 特定 的 形状 from scipy . 
spatial import distance as dist import numpy as np import 
mahotas import cv2 import imutils def describe _ shapes image 
shapeFeatures = gray = cv2 . cvtColor image cv2 . 
COLOR _ BGR2GRAY blurred = cv2 . GaussianBlur gray 13 
13 0 cv2 . imshow 2 blurred thresh = cv2 
. threshold blurred 120 255 cv2 . THRESH _ BINARY 
1 thresh = cv2 . dilate thresh None iterations = 
4 thres = cv2 . erode thresh None iterations = 
2 cv2 . imshow 1 thres cv2 . waitKey 0 
cnts = cv2 . findContours thresh . copy cv2 . 
RETR _ EXTERNAL cv2 . CHAIN _ APPROX _ SIMPLE 
cnts = cnts 0 if imutils . is _ cv2 
else cnts 1 for c in cnts mask = np 
. zeros image . shape 2 dtype = uint8 cv2 
. drawContours mask c 1 255 1 x y w 
h = cv2 . boundingRect c roi = mask y 
y + h x x + w cv2 . imshow 
roi roi cv2 . waitKey 0 features = mahotas . 
features . zernike _ moments roi cv2 . m i 
n E n c l o s i n g 
C i r c l e c 1 degree = 
8 shapeFeatures . append features return cnts shapeFeatures refImage = 
cv2 . imread 2 . jpg _ gameFeatures = describe 
_ shapes refImage shapesImage = cv2 . imread 1 . 
jpg cnts shapeFeatures = describe _ shapes shapesImage D = 
dist . cdist gameFeatures shapeFeatures i = np . argmin 
D # 获取 最小 距离 的 下标 for j c 
in enumerate cnts if i = j box = cv2 
. minAreaRect c box = np . int0 cv2 . 
cv . BoxPoints box if imutils . is _ cv2 
else cv2 . boxPoints box cv2 . drawContours shapesImage box 
1 0 0 255 2 box = cv2 . minAreaRect 
cnts i box = np . int0 cv2 . cv 
. BoxPoints box if imutils . is _ cv2 else 
cv2 . boxPoints box cv2 . drawContours shapesImage box 1 
0 255 0 2 x y w h = cv2 
. boundingRect cnts i cv2 . putText shapesImage FOUND x 
y 10 cv2 . FONT _ HERSHEY _ SIMPLEX 0.9 
0 255 0 3 cv2 . imshow Input Image refImage 
cv2 . imshow Detected Shapes shapesImage cv2 . waitKey 0 
6 Haralick 纹理 功能 依据 数据 学习 分析 纹理 再将 
数据 图片 依据 纹理 分类 from sklearn . svm import 
LinearSVC import argparse import glob import mahotas import cv2 ap 
= argparse . ArgumentParser ap . add _ argument d 
training required = True help = Path to the dataset 
of textures ap . add _ argument t test required 
= True help = Path to the test images args 
= vars ap . parse _ args print INFO extracting 
features . . . data = labels = for imagePath 
in glob . glob args training + / * . 
jpg image = cv2 . imread imagePath image = cv2 
. cvtColor image cv2 . COLOR _ BGR2GRAY texture = 
imagePath imagePath . rfind / + 1 . split _ 
0 features = mahotas . features . haralick image . 
mean axis = 0 data . append features labels . 
append texture print INFO training model . . . model 
= LinearSVC C = 10.0 random _ state = 42 
model . fit data labels print INFO classifying . . 
. for imagePath in glob . glob args test + 
/ * . jpg image = cv2 . imread imagePath 
gray = cv2 . cvtColor image cv2 . COLOR _ 
BGR2GRAY features = mahotas . features . haralick gray . 
mean axis = 0 print features pred = model . 
predict features . reshape 1 1 0 print pred cv2 
. putText image pred 20 30 cv2 . FONT _ 
HERSHEY _ SIMPLEX 1.0 0 255 0 3 cv2 . 
imshow Image image cv2 . waitKey 0 7 本地 二进制 
模式 原理 LBP   在 本地 处理 像素     
而 不是 使用 灰度 共生 矩阵 通过 量化 小区 域特征 
分析 图片 的 特征向量 再 对 图片 进行 分类 注意 
点 记住 半径 r     和 点数 p 的 
影响 也 很重要 积分 越多 p     你 品尝 
更多 的 模式 你 可以 编码 但 在 同一 时间 
你 增加 你 的 计算 成本 另一方面 如果 增加 半径大小 
r     则 可以 在 图像 中 捕捉 较大 
的 纹理 细节 但是 如果 增加 r     而不 
增加 p     那么 您 将 失去 LBP 描述符 
的 局部 区分 能力 例 时尚 索引 文件 结构 | 
pyimagesearch | | _ _ init _ _ . py 
| | descriptors | | | _ _ init _ 
_ . py | | | l o c a 
l b i n a r y p a t 
t e r n s . py | search _ 
shirts . py 作用 创建 二进制 描述符 l o c 
a l b i n a r y p a 
t t e r n s . pyfrom skimage import 
feature import numpy as np class L o c a 
l B i n a r y P a t 
t e r n s def _ _ init _ 
_ self numPoints radius # 围绕 中心 像素 的 图案 
半径 半径 外围 点数 决定 计算 量 self . numPoints 
= numPoints self . radius = radius def describe self 
image eps = 1e 7 lbp = feature . local 
_ binary _ pattern image self . numPoints self . 
radius method = uniform hist _ = np . histogram 
lbp . ravel bins = range 0 self . numPoints 
+ 3 range = 0 self . numPoints + 2 
# normalize the histogram hist = hist . astype float 
hist / = hist . sum + eps # return 
the histogram of Local Binary Patterns return hist 作用 测试 
二进制 描述符 的 纹理 特征 效果 运行 命令 python search 
_ shirts . py dataset shirts query queries / query 
_ 01 . jpgsearch _ shirts . py from _ 
_ future _ _ import print _ function from pyimagesearch 
import L o c a l B i n a 
r y P a t t e r n s 
from imutils import paths import numpy as np import argparse 
import cv2 ap = argparse . ArgumentParser ap . add 
_ argument d dataset required = True help = path 
to the dataset of shirt images ap . add _ 
argument q query required = True help = path to 
the query image args = vars ap . parse _ 
args desc = L o c a l B i 
n a r y P a t t e r 
n s 24 8 index = { } for imagePath 
in paths . list _ images args dataset image = 
cv2 . imread imagePath gray = cv2 . cvtColor image 
cv2 . COLOR _ BGR2GRAY hist = desc . describe 
gray filename = imagePath imagePath . rfind / + 1 
index filename = hist query = cv2 . imread args 
query queryFeatures = desc . describe cv2 . cvtColor query 
cv2 . COLOR _ BGR2GRAY cv2 . imshow Query query 
results = { } for k features in index . 
items d = 0.5 * np . sum features queryFeatures 
* * 2 / features + queryFeatures + 1e 10 
results k = d results = sorted v k for 
k v in results . items 3 # 选取 前 
较小 距离 相似性 高的/nr 前 3个 结果 for i score 
filename in enumerate results # 将 前 3个 结果 显示 
出来 print # % d . % s % . 
4f % i + 1 filename score image = cv2 
. imread args dataset + / + filename cv2 . 
imshow Result # { } . format i + 1 
image cv2 . waitKey 0 8 定向 梯度 直方图 原理 
运用 HOG 描述符 他 主要 用于 描述 图像 中 物体 
的 结构 形状 和 外观 使其 成为 物体 分类 的 
优秀 描述符 但是 由于 HOG 捕获 局部 强度 梯度 和 
边缘 方向 因此 它 也 会 产生 良好 的 纹理 
描述符 知识点 pixels _ per _ cell 中的 像素   
  越多 我们 的 表示 越 粗糙 类 似地 pixels 
_ per _ cell 的 较小 值 将 产生 更 
细粒度 轮廓 更 明显 疑问 1 from sklearn . neighbors 
import K N e i g h b o r 
s C l a s s i f i e 
r 解释 http / / scikit learn . org / 
stable / modules / generated / sklearn . neighbors . 
K N e i g h b o r s 
C l a s s i f i e r 
. html 运行 命令 python recognize _ car _ logos 
. py training car _ logos test test _ imagesrecognize 
_ car _ logs . pyfrom sklearn . neighbors import 
K N e i g h b o r s 
C l a s s i f i e r 
from skimage import exposure from skimage import feature from imutils 
import paths import argparse import imutils import cv2 ap = 
argparse . ArgumentParser ap . add _ argument d training 
required = True help = Path to the logos training 
dataset ap . add _ argument t test required = 
True help = Path to the test dataset args = 
vars ap . parse _ args print INFO extracting features 
. . . data = labels = for imagePath in 
paths . list _ images args training # 提取 每个 
标志 的 hog 特征向量 make = imagePath . split / 
2 image = cv2 . imread imagePath gray = cv2 
. cvtColor image cv2 . COLOR _ BGR2GRAY edged = 
imutils . auto _ canny gray cnts = cv2 . 
findContours edged . copy cv2 . RETR _ EXTERNAL cv2 
. CHAIN _ APPROX _ SIMPLE cnts = cnts 0 
if imutils . is _ cv2 else cnts 1 c 
= max cnts key = cv2 . contourArea x y 
w h = cv2 . boundingRect c logo = gray 
y y + h x x + w logo = 
cv2 . resize logo 200 100 H = feature . 
hog logo orientations = 9 pixels _ per _ cell 
= 10 10 cells _ per _ block = 2 
2 transform _ sqrt = True block _ norm = 
L1 data . append H labels . append make print 
INFO training classifier . . . model = K N 
e i g h b o r s C l 
a s s i f i e r n _ 
neighbors = 1 # 对 特征 数据 进行 K 值 
分类 model . fit data labels print INFO evaluating . 
. . for i imagePath in enumerate paths . list 
_ images args test image = cv2 . imread imagePath 
gray = cv2 . cvtColor image cv2 . COLOR _ 
BGR2GRAY logo = cv2 . resize gray 200 100 H 
hogImage = feature . hog logo orientations = 9 pixels 
_ per _ cell = 10 10 cells _ per 
_ block = 2 2 transform _ sqrt = True 
block _ norm = L1 visualise = True pred = 
model . predict H . reshape 1 1 0 hogImage 
= exposure . rescale _ intensity hogImage out _ range 
= 0 255 hogImage = hogImage . astype uint8 cv2 
. imshow HOG Image # { } . format i 
+ 1 hogImage cv2 . putText image pred . title 
10 35 cv2 . FONT _ HERSHEY _ SIMPLEX 1.0 
0 255 0 3 cv2 . imshow Test Image # 
{ } . format i + 1 image cv2 . 
waitKey 0 9 关键点 检测 9.1 FAST 关键点 检测 原理 
必须 有 至少 Ñ 沿着 连续 像素 圆形 周边 具有 
半径 R 是 所有 或者 亮 或 更暗 比 中心 
像素 由 阈值 t 疑问 是否 可以 修改 参数 半径 
R 和N值/nr 运行 命令 python fast _ keypoint . pyfast 
_ keypoint . pyfrom _ _ future _ _ import 
print _ function import numpy as np import cv2 import 
imutils image = cv2 . imread next . png orig 
= image . copy gray = cv2 . cvtColor image 
cv2 . COLOR _ BGR2GRAY if imutils . is _ 
cv2 detector = cv2 . FeatureDetector _ create FAST kps 
= detector . detect gray else detector = cv2 . 
F a s t F e a t u r 
e D e t e c t o r _ 
create kps = detector . detect gray None print # 
of keypoints { } . format len kps for kp 
in kps r = int 0.5 * kp . size 
x y = np . int0 kp . pt cv2 
. circle image x y r 0 255 255 2 
cv2 . imshow Images np . hstack orig image cv2 
. waitKey 0 9 . 2Harris 关键点 检测 原理 将 
分别 在 x 和y/nr 方向 上 对 该区 域中 的 
梯度 值 求和 和/c 如果/c 这/r 两个/m 值/n 都/d 足够/v 
大 那么 我们 可以 将 该 区域 定义 为 角落 
该 过程 针对 输入 图像 中 的 每个 像素 完成 
这种 方法 是 有效 的 因为/c 红色/n 圆/n 圈内/n 的/uj 
区域/n 会/v 有/v 大量/n 的/uj 水平/n 和/c 垂直/v 梯度/n 当 
发生 这种 情况 时 我们 知道 我们 找到 了 一个 
角落 . 疑问 1 harris 函数 的 参数 的 作用 
• img 数据类型 为 float32 的 输入 图像 • blockSize 
角 点 检测 中 要 考虑 的 领域 大小 • 
ksize Sobel 求导 中 使用 的 窗口 大小 • k 
Harris 角 点 检测 方程 中的 自由 参数 取值 参数 
为 0 04 0.06 . 2 harris 什么 时候 被 
调用 harris _ keypoint . pyfrom _ _ future _ 
_ import print _ function import numpy as np import 
cv2 import imutils def harris gray blockSize = 2 apetureSize 
= 3 k = 0.1 T = 0.02 gray = 
np . float32 gray H = cv2 . cornerHarris gray 
blockSize apetureSize k kps = np . argwhere H T 
* H . max kps = cv2 . KeyPoint pt 
1 pt 0 3 for pt in kps return kps 
image = cv2 . imread next . png orig = 
image . copy gray = cv2 . cvtColor image cv2 
. COLOR _ BGR2GRAY if imutils . is _ cv2 
detector = cv2 . FeatureDetector _ create HARRIS kps = 
detector . detect gray else kps = harris gray print 
# of keypoints { } . format len kps for 
kp in kps r = int 0.5 * kp . 
size x y = np . int0 kp . pt 
cv2 . circle image x y r 0 255 255 
2 # show the image cv2 . imshow Images np 
. hstack orig image cv2 . waitKey 0 9.3 GFTT 
关键点 检测 原理 提出 了 以下 R 的 计算 来 
表明 一个 地区 是否 是 一个 角落 在 这种 情况 
下 我们 只是 取 特征值 分解 分量 的 最小值 如果 
这个 值 R 大于 我们 的 阈值 T     
即 那么 我们 可以 将 该 区域 标记 为 拐角 
在 harris 基础上 改进 from _ _ future _ _ 
import print _ function import numpy as np import cv2 
import imutils def gftt gray maxCorners = 0 qualityLevel = 
0.01 minDistance = 1 mask = None blockSize = 3 
u s e H a r r i s D 
e t e c t o r = False k 
= 0.04 kps = cv2 . g o o d 
F e a t u r e s T o 
T r a c k gray maxCorners qualityLevel minDistance mask 
= mask blockSize = blockSize u s e H a 
r r i s D e t e c t 
o r = u s e H a r r 
i s D e t e c t o r 
k = k return cv2 . KeyPoint pt 0 0 
pt 0 1 3 for pt in kps image = 
cv2 . imread next . png orig = image . 
copy gray = cv2 . cvtColor image cv2 . COLOR 
_ BGR2GRAY if imutils . is _ cv2 detector = 
cv2 . FeatureDetector _ create GFTT kps = detector . 
detect gray else kps = gftt gray for kp in 
kps r = int 0.5 * kp . size x 
y = np . int0 kp . pt cv2 . 
circle image x y r 0 255 255 2 print 
# of keypoints { } . format len kps cv2 
. imshow Images np . hstack orig image cv2 . 
waitKey 0 9.4 DoG 关键点 检测器 通过 对 图像 缩放 
变化 寻找 角 点 获取 的 角 点 绘制 出来 
的 圆 有 大小 区别 from _ _ future _ 
_ import print _ function import numpy as np import 
cv2 import imutils image = cv2 . imread next . 
png orig = image . copy gray = cv2 . 
cvtColor image cv2 . COLOR _ BGR2GRAY if imutils . 
is _ cv2 detector = cv2 . FeatureDetector _ create 
SIFT kps = detector . detect gray else detector = 
cv2 . xfeatures2d . SIFT _ create kps _ = 
detector . detectAndCompute gray None print # of keypoints { 
} . format len kps for kp in kps r 
= int 0.5 * kp . size x y = 
np . int0 kp . pt cv2 . circle image 
x y r 0 255 255 2 cv2 . imshow 
Images np . hstack orig image cv2 . waitKey 0 
9.5 Fast _ Hessian 关键点 检测 作用 类似于 高斯 差分 
快速 Hessian 关键点 检测器 用于 定位 图像 中 可 重复 
的 斑点 状 区域 这些 区域 可能 是 边缘 角落 
或 两者 from _ _ future _ _ import print 
_ function import numpy as np import cv2 import imutils 
image = cv2 . imread next . png orig = 
image . copy gray = cv2 . cvtColor image cv2 
. COLOR _ BGR2GRAY if imutils . is _ cv2 
detector = cv2 . FeatureDetector _ create SURF kps = 
detector . detect gray else detector = cv2 . xfeatures2d 
. SURF _ create kps _ = detector . detectAndCompute 
gray None print # of keypoints { } . format 
len kps for kp in kps r = int 0.5 
* kp . size x y = np . int0 
kp . pt cv2 . circle image x y r 
0 255 255 2 cv2 . imshow Images np . 
hstack orig image cv2 . waitKey 0 9.6 STAR 关键点 
检测 运用 情况 用于 检测 图像 中的 斑点 状 区域 
from _ _ future _ _ import print _ function 
import numpy as np import cv2 import imutils image = 
cv2 . imread next . png orig = image . 
copy gray = cv2 . cvtColor image cv2 . COLOR 
_ BGR2GRAY if imutils . is _ cv2 detector = 
cv2 . FeatureDetector _ create STAR kps = detector . 
detect gray else detector = cv2 . xfeatures2d . StarDetector 
_ create kps = detector . detect gray print # 
of keypoints { } . format len kps for kp 
in kps r = int 0.5 * kp . size 
x y = np . int0 kp . pt cv2 
. circle image x y r 0 255 255 2 
cv2 . imshow Images np . hstack orig image cv2 
. waitKey 0 9.7 MSER 关键点 检测 作用 MSER 检测器 
用于 检测 图像 中的 斑点 状 结构 假设 这些 区域 
很小 具有 相对 相同 的 像素 强度 并且 被 对比 
像素 包围 from _ _ future _ _ import print 
_ function import numpy as np import cv2 import imutils 
image = cv2 . imread next . png orig = 
image . copy gray = cv2 . cvtColor image cv2 
. COLOR _ BGR2GRAY # detect MSER keypoints in the 
image if imutils . is _ cv2 detector = cv2 
. FeatureDetector _ create MSER kps = detector . detect 
gray else detector = cv2 . MSER _ create kps 
= detector . detect gray None print # of keypoints 
{ } . format len kps for kp in kps 
r = int 0.5 * kp . size x y 
= np . int0 kp . pt cv2 . circle 
image x y r 0 255 255 2 cv2 . 
imshow Images np . hstack orig image cv2 . waitKey 
0 9.8 密集 关键点 检测 作用 浓密 检测器   将 
图像 中 的 每个 k 像素 标记 为 关键 点 
from _ _ future _ _ import print _ function 
import numpy as np import argparse import cv2 import imutils 
def dense image step radius kps = for x in 
range 0 image . shape 1 step for y in 
range 0 image . shape 0 step kps . append 
cv2 . KeyPoint x y radius * 2 return kps 
ap = argparse . ArgumentParser ap . add _ argument 
s step type = int default = 28 help = 
step in pixels of the dense detector args = vars 
ap . parse _ args image = cv2 . imread 
next . png orig = image . copy gray = 
cv2 . cvtColor image cv2 . COLOR _ BGR2GRAY kps 
= radii = 4 8 12 if imutils . is 
_ cv2 detector = cv2 . FeatureDetector _ create Dense 
detector . setInt initXyStep args step rawKps = detector . 
detect gray else rawKps = dense gray args step 1 
for rawKp in rawKps for r in radii kp = 
cv2 . KeyPoint x = rawKp . pt 0 y 
= rawKp . pt 1 _ size = r * 
2 kps . append kp print # dense keypoints { 
} . format len rawKps print # dense + multi 
radii keypoints { } . format len kps for kp 
in kps r = int 0.5 * kp . size 
x y = np . int0 kp . pt cv2 
. circle image x y r 0 255 255 1 
cv2 . imshow Images np . hstack orig image cv2 
. waitKey 0 9.9 BRISK 关键点 检测器 运用 情况 多 
尺度 版本 from _ _ future _ _ import print 
_ function import numpy as np import cv2 import imutils 
image = cv2 . imread next . png orig = 
image . copy gray = cv2 . cvtColor image cv2 
. COLOR _ BGR2GRAY if imutils . is _ cv2 
detector = cv2 . FeatureDetector _ create BRISK kps = 
detector . detect gray else detector = cv2 . BRISK 
_ create kps = detector . detect gray None print 
# of keypoints { } . format len kps for 
kp in kps r = int 0.5 * kp . 
size x y = np . int0 kp . pt 
cv2 . circle image x y r 0 255 255 
2 cv2 . imshow Images np . hstack orig image 
cv2 . waitKey 0 9.10 ORB 关键点 检测器 的 运用 
作用 ORB 用于 检测 图像 中的 角 点 from _ 
_ future _ _ import print _ function import numpy 
as np import cv2 import imutils image = cv2 . 
imread next . png orig = image . copy gray 
= cv2 . cvtColor image cv2 . COLOR _ BGR2GRAY 
if imutils . is _ cv2 detector = cv2 . 
FeatureDetector _ create ORB kps = detector . detect gray 
else detector = cv2 . ORB _ create kps = 
detector . detect gray None print # of keypoints { 
} . format len kps for kp in kps r 
= int 0.5 * kp . size x y = 
np . int0 kp . pt cv2 . circle image 
x y r 0 255 255 2 cv2 . imshow 
Images np . hstack orig image cv2 . waitKey 0 
10 局部 不变 描述符 10.1 SIFT 作用 检测 关键点 并从 
图像 中 提取 SIFT 特征向量 from _ _ future _ 
_ import print _ function import argparse import cv2 import 
imutils ap = argparse . ArgumentParser ap . add _ 
argument i image required = True help = Path to 
the image args = vars ap . parse _ args 
image = cv2 . imread args image gray = cv2 
. cvtColor image cv2 . COLOR _ BGR2GRAY if imutils 
. is _ cv2 detector = cv2 . FeatureDetector _ 
create SIFT extractor = cv2 . D e s c 
r i p t o r E x t r 
a c t o r _ create SIFT kps = 
detector . detect gray kps descs = extractor . compute 
gray kps else detector = cv2 . xfeatures2d . SIFT 
_ create kps descs = detector . detectAndCompute gray None 
print INFO # of keypoints detected { } . format 
len kps print INFO feature vector shape { } . 
format descs . shape 10.2 RootSIFT 作用 定义 RootSIFT 检测器 
获取 关键点 特征 rootsift . pyimport numpy as np import 
cv2 import imutils class RootSIFT def _ _ init _ 
_ self if imutils . is _ cv2 self . 
extractor = cv2 . D e s c r i 
p t o r E x t r a c 
t o r _ create SIFT else self . extractor 
= cv2 . xfeatures2d . SIFT _ create def compute 
self image kps eps = 1e 7 if imutils . 
is _ cv2 kps descs = self . extractor . 
compute image kps else kps descs = self . extractor 
. detectAndCompute image None if len kps = = 0 
return None descs / = descs . sum axis = 
1 keepdims = True + eps descs = np . 
sqrt descs return kps descs 作用 从 图像 中 提取 
RootSIFT 描述符 extract _ rpptsift . pyfrom _ _ future 
_ _ import print _ function from pyimagesearch . descriptors 
import RootSIFT import argparse import cv2 import imutils ap = 
argparse . ArgumentParser ap . add _ argument i image 
required = True help = Path to the image args 
= vars ap . parse _ args image = cv2 
. imread args image gray = cv2 . cvtColor image 
cv2 . COLOR _ BGR2GRAY if imutils . is _ 
cv2 detector = cv2 . FeatureDetector _ create SIFT extractor 
= RootSIFT kps = detector . detect gray else detector 
= cv2 . xfeatures2d . SIFT _ create extractor = 
RootSIFT kps _ = detector . detectAndCompute gray None kps 
descs = extractor . compute gray kps print INFO # 
of keypoints detected { } . format len kps print 
INFO feature vector shape { } . format descs . 
shape 10.3 SURF 作用 SURF 的 第一步 是 选择 围绕 
关键点 的 图像 的 矩形 区域 在 关键 点 检测 
阶段 确定 区域 的 确切 大小 extract _ surf . 
pyfrom _ _ future _ _ import print _ function 
import argparse import cv2 import imutils ap = argparse . 
ArgumentParser ap . add _ argument i image required = 
True help = Path to the image args = vars 
ap . parse _ args image = cv2 . imread 
args image gray = cv2 . cvtColor image cv2 . 
COLOR _ BGR2GRAY if imutils . is _ cv2 detector 
= cv2 . FeatureDetector _ create SURF extractor = cv2 
. D e s c r i p t o 
r E x t r a c t o r 
_ create SURF kps = detector . detect gray kps 
descs = extractor . compute gray kps else detector = 
cv2 . xfeatures2d . SURF _ create kps descs = 
detector . detectAndCompute gray None print INFO # of keypoints 
detected { } . format len kps print INFO feature 
vector shape { } . format descs . shape 10.4 
实值 特征 匹配 知识点 提取 关键点 的 图像 坐标 例 
ksp 0 . pt 运行 命令 1 python draw _ 
matches . py first jp _ 01 . png second 
jp _ 02 . png detector SURF extractor SIFT2 python 
draw _ matches . py first jp _ 01 . 
png second jp _ 02 . png detector SURF extractor 
RootSIFT3 python draw _ matches . py first jp _ 
01 . png second jp _ 02 . png detector 
SURF extractor SURF # coding = utf 8 from _ 
_ future _ _ import print _ function import numpy 
as np import argparse import cv2 from imutils . feature 
. factories import FeatureDetector _ create D e s c 
r i p t o r E x t r 
a c t o r _ create D e s 
c r i p t o r M a t 
c h e r _ create ap = argparse . 
ArgumentParser ap . add _ argument f first required = 
True help = Path to first image # 提取 关键点 
和 特征向量 的 第一 幅 图像 的 路经 ap . 
add _ argument s second required = True help = 
Path to second image # 提取 关键点 和 特征向量 的 
第二 幅 图像 的 路经 ap . add _ argument 
d detector type = str default = SURF help = 
Kepyoint detector to use . Options BRISK DENSE DOG SIFT 
FAST FASTHESSIAN SURF GFTT HARRIS MSER ORB STAR # 用于 
在 俩个 图像 执行 关键点 检测 的 关键 点 的 
检测器 ap . add _ argument e extractor type = 
str default = SIFT help = Keypoint detector to use 
. Options RootSIFT SIFT SURF # 关键 点 区域 提取 
局部 不变 描述符 ap . add _ argument m matcher 
type = str default = BruteForce help = Feature matcher 
to use . Options BruteForce BruteForce SL2 BruteForce L1 FlannBased 
# 寻找 没对 描述符 最小 距离 方法 # ap . 
add _ argument v visualize type = str default = 
Yes help = Whether the visualiz image should be shown 
. Options Yes No Each ap . add _ argument 
v visualize type = str default = Yes help = 
Whether the visualiztion image should be shown . Options Yes 
No Each # 绘制 对 关键 点 和 描述符 之间 
的 匹配 args = vars ap . parse _ args 
if args detector = = DOG detector = FeatureDetector _ 
create SIFT elif args detector = = FASTHESSIAN detector = 
FeatureDetector _ create SURF else detector = FeatureDetector _ create 
args detector extractor = D e s c r i 
p t o r E x t r a c 
t o r _ create args extractor # 提取 关键 
点 区域 的 特征 描述符 matcher = D e s 
c r i p t o r M a t 
c h e r _ create args matcher imageA = 
cv2 . imread args first imageB = cv2 . imread 
args second grayA = cv2 . cvtColor imageA cv2 . 
COLOR _ BGR2GRAY grayB = cv2 . cvtColor imageB cv2 
. COLOR _ BGR2GRAY # 提取 关键点 kpsA = detector 
. detect grayA kpsB = detector . detect grayB # 
提取 关键 的 局部 特征 描述符 kpsA featuresA = extractor 
. compute grayA kpsA kpsB featuresB = extractor . compute 
grayB kpsB rawMatches = matcher . knnMatch featuresA featuresB 2 
matches = if rawMatches is not None for m in 
rawMatches # 筛选 符合 条件 的 关键 点 if len 
m = = 2 and m 0 . distance m 
1 . distance * 0.8 matches . append m 0 
. trainIdx m 0 . queryIdx print # of keypoints 
from first image { } . format len kpsA 11 
二进制 描述符 11.1 ORBfrom _ _ future _ _ import 
print _ function import argparse import cv2 import imutils ap 
= argparse . ArgumentParser ap . add _ argument i 
image required = True help = Path to the image 
args = vars ap . parse _ args image = 
cv2 . imread args image gray = cv2 . cvtColor 
image cv2 . COLOR _ BGR2GRAY if imutils . is 
_ cv2 detector = cv2 . FeatureDetector _ create ORB 
extractor = cv2 . D e s c r i 
p t o r E x t r a c 
t o r _ create ORB kps = detector . 
detect gray kps descs = extractor . compute gray kps 
else detector = cv2 . ORB _ create kps descs 
= detector . detectAndCompute gray None # show the shape 
of the keypoints and local invariant descriptors array print INFO 
# of keypoints detected { } . format len kps 
print INFO feature vector shape { } . format descs 
. shape 11.2 BRISKfrom _ _ future _ _ import 
print _ function import argparse import cv2 import imutils ap 
= argparse . ArgumentParser ap . add _ argument i 
image required = True help = Path to the image 
args = vars ap . parse _ args image = 
cv2 . imread args image gray = cv2 . cvtColor 
image cv2 . COLOR _ BGR2GRAY if imutils . is 
_ cv2 detector = cv2 . FeatureDetector _ create BRISK 
extractor = cv2 . D e s c r i 
p t o r E x t r a c 
t o r _ create BRISK kps = detector . 
detect gray kps descs = extractor . compute gray kps 
else detector = cv2 . BRISK _ create kps descs 
= detector . detectAndCompute gray None print INFO # of 
keypoints detected { } . format len kps print INFO 
feature vector shape { } . format descs . shape 
11.3 BRIEFfrom _ _ future _ _ import print _ 
function import argparse import cv2 import imutils ap = argparse 
. ArgumentParser ap . add _ argument i image required 
= True help = Path to the image args = 
vars ap . parse _ args image = cv2 . 
imread args image gray = cv2 . cvtColor image cv2 
. COLOR _ BGR2GRAY if imutils . is _ cv2 
detector = cv2 . FeatureDetector _ create FAST extractor = 
cv2 . D e s c r i p t 
o r E x t r a c t o 
r _ create BRIEF else detector = cv2 . F 
a s t F e a t u r e 
D e t e c t o r _ create 
extractor = cv2 . xfeatures2d . B r i e 
f D e s c r i p t o 
r E x t r a c t o r 
_ create kps = detector . detect gray kps descs 
= extractor . compute gray kps print INFO # of 
keypoints detected { } . format len kps print INFO 
feature vector shape { } . format descs . shape 
from _ _ future _ _ import print _ function 
import argparse import cv2 import imutils # construct the argument 
parser and parse the arguments ap = argparse . ArgumentParser 
ap . add _ argument i image required = True 
help = Path to the image args = vars ap 
. parse _ args image = cv2 . imread args 
image gray = cv2 . cvtColor image cv2 . COLOR 
_ BGR2GRAY if imutils . is _ cv2 detector = 
cv2 . FeatureDetector _ create FAST extractor = cv2 . 
D e s c r i p t o r 
E x t r a c t o r _ 
create FREAK kps = detector . detect gray kps descs 
= extractor . compute gray kps else detector = cv2 
. F a s t F e a t u 
r e D e t e c t o r 
_ create extractor = cv2 . xfeatures2d . FREAK _ 
create kps = detector . detect gray None kps descs 
= extractor . compute gray kps print INFO # of 
keypoints detected { } . format len kps print INFO 
feature vector shape { } . format descs . shape 
1 图像 描述符 特征 描述符 和 特征向量 的 定义 特征向量 
用于 表示 和 量化 图像 的 数字 列表 简单 理解 
成将/nr 图片 转化 为 一个 数字 列表 表示 特征向量 中 
用来 描述 图片 的 各种 属性 的 向量 称 为特征 
矢量 图像 描述符 理解/v 成/n 一种/m 算法/n 和/c 方法/n 控制 
整个 图像 如何 转变 为 特征向量 量化 是的 图像 形状 
颜色 纹理 或 三者 的 任何 组合 输入 1个 图像 
时 图像 描述符 将 返回 1个 特征向量 主要 用于 图像 
分类 缺乏 区分 图像 中 不同 对象 的 能力 特征 
描述符 是 一种 算法 和 方法 控制 图像 部分 区域 
对 部分 区域 返回 多个 特征向量 输入 1个 图像 返回 
多个 特征向量 主要 用来 处理 图像 的 局部 主要 用于 
图像匹配 视觉 检测 匹配 图像 中 的 物品 2 色彩 
通道 统计 运行 命令 python color _ channel _ stats 
. py 原理 通过 统计 图像 中 的 每个 色彩 
通道 及 RGB 色彩 通道 凭据 通道 值 和 标准 
差等 方法 量化 和 表示 图像 的 颜色 分布 从而 
对 图像 进行 分类 主要 运用 颜色 差异 名义 不同 
场景 图片 分类 from scipy . spatial import distance as 
dist from imutils import paths import numpy as np import 
cv2 imagePaths = sorted list paths . list _ images 
dinos index = { } for imagePath in imagePaths image 
= cv2 . imread imagePath filename = imagePath imagePath . 
rfind / + 1 means stds = cv2 . meanStdDev 
image # 计算 图像 中 每个 色彩 通道 的 平均值 
和 标准偏差 features = np . concatenate means stds . 
flatten # 将 每个 色彩 通道 的 平均值 和 标准偏差 
连接 在 一起 形成 我们 的 特征向量 index filename = 
features query = cv2 . imread imagePaths 0 cv2 . 
imshow Query trex _ 01 . png query keys = 
sorted index . keys for i k in enumerate keys 
if k = = trex _ 01 . png continue 
image = cv2 . imread imagePaths i d = dist 
. euclidean index trex _ 01 . png index k 
# 计算 目标 图像 特征向量 与 我们 数据 集中 的 
特征向量 之间 的 欧几里德 距离 d 越小 颜色通道 越 相似 
图片 越 相似 cv2 . putText image % . 2f 
% d 10 30 cv2 . FONT _ HERSHEY _ 
SIMPLEX 0.75 0 255 0 2 cv2 . imshow k 
image cv2 . waitKey 0 3 彩色 直方图 原理 通过 
颜色 的 分布 运用 机器学习 中的 K 均值 聚 类 
运用于 聚 类 颜色 直方图 无 参考值 进行 图像 分类 
关键 是 需要 对 颜色 直方图 理解 文件 结构 | 
pyimagesearch |         | _ _ init 
_ _ . py |         | 
descriptors |         |       
  | _ _ init _ _ . py | 
        |         | 
labhistogram . py | cluster _ histograms . py 疑问 
1 imutils . is _ cv2 意义 labhistogram . pyimport 
cv2 import imutils class LabHistogram def _ _ init _ 
_ self bins self . bins = bins def describe 
self image mask = None lab = cv2 . cvtColor 
image cv2 . COLOR _ BGR2LAB hist = cv2 . 
calcHist lab 0 1 2 mask self . bins 0 
256 0 256 0 256 # 获取 3D 直方图 # 
将 图片大小 标准化 忽略 图片大小 对 直方图 的 影响 if 
imutils . is _ cv2 hist = cv2 . normalize 
hist . flatten else hist = cv2 . normalize hist 
hist . flatten return histcluster _ histograms . pyfrom pyimagesearch 
. descriptors . labhistogram import LabHistogram from sklearn . cluster 
import KMeans from imutils import paths import numpy as np 
import argparse import cv2 ap = argparse . ArgumentParser ap 
. add _ argument d dataset required = True help 
= path to the input dataset directory ap . add 
_ argument k clusters type = int default = 2 
help = # of clusters to generate # 默认设置 k 
值 为 2 及 将 图片 分为 俩 类 args 
= vars ap . parse _ args desc = LabHistogram 
8 8 8 data = imagePaths = list paths . 
list _ images args dataset imagePaths = np . array 
sorted imagePaths for imagePath in imagePaths image = cv2 . 
imread imagePath hist = desc . describe image data . 
append hist # 描述符 加入到 数据 集中 # 对 描述符 
进行 聚 类 clt = KMeans n _ clusters = 
args clusters labels = clt . fit _ predict data 
for label in np . unique labels # 获取 每个 
集群 的 唯一 ID 进行 分类 labelPaths = imagePaths np 
. where labels = = label # 将 同一 集群 
的 图片 输出 显示 for i path in enumerate labelPaths 
image = cv2 . imread path cv2 . imshow Cluster 
{ } Image # { } . format label + 
1 i + 1 image cv2 . waitKey 0 cv2 
. d e s t r o y A l 
l W i n d o w s 4 胡 
默斯 作用 用于 物品 形状 检测 处理 二 值 图片 
提取 图片 中 物体 的 形状 运行 命令 python extract 
_ hu _ moments . pyextract _ hu _ moments 
. pyimport cv2 import imutils image = cv2 . imread 
planes . png image = cv2 . cvtColor image cv2 
. COLOR _ BGR2GRAY moments = cv2 . HuMoments cv2 
. moments image . flatten print ORIGINAL MOMENTS { } 
. format moments cv2 . imshow Image image cv2 . 
waitKey 0 # 找到 图片 中 每个 物件 的 行 
轮廓 cnts = cv2 . findContours image . copy cv2 
. RETR _ EXTERNAL cv2 . CHAIN _ APPROX _ 
SIMPLE cnts = cnts 0 if imutils . is _ 
cv2 else cnts 1 for i c in enumerate cnts 
x y w h = cv2 . boundingRect c roi 
= image y y + h x x + w 
# 提取 每个 形状 的 hu _ monebts 值 moments 
= cv2 . HuMoments cv2 . moments roi . flatten 
print MOMENTS FOR PLANE # { } { } . 
format i + 1 moments cv2 . imshow ROI # 
{ } . format i + 1 roi cv2 . 
waitKey 0 作用 随机 生成 数据集 运行 命令 python generate 
_ images . py output outputgenetate _ images . pyimport 
numpy as np import argparse import uuid import cv2 ap 
= argparse . ArgumentParser ap . add _ argument o 
output required = True help = Path to the output 
directory ap . add _ argument n num images type 
= int default = 500 help = # of disctrator 
images to generate args = vars ap . parse _ 
args for i in range 0 args num _ images 
image = np . zeros 500 500 3 dtype = 
uint8 x y = np . random . uniform low 
= 105 high = 405 size = 2 . astype 
int0 r = np . random . uniform low = 
25 high = 100 size = 1 . astype int0 
0 color = np . random . uniform low = 
0 high = 255 size = 3 . astype int0 
color = tuple map int color cv2 . circle image 
x y r color 1 cv2 . imwrite { } 
/ { } . jpg . format args output uuid 
. uuid4 image image = np . zeros 500 500 
3 dtype = uint8 topLeft = np . random . 
uniform low = 25 high = 225 size = 2 
. astype int0 botRight = np . random . uniform 
low = 250 high = 400 size = 2 . 
astype int0 color = np . random . uniform low 
= 0 high = 255 size = 3 . astype 
int0 color = tuple map int color cv2 . rectangle 
image tuple topLeft tuple botRight color 1 cv2 . imwrite 
{ } / { } . jpg . format args 
output uuid . uuid4 image 作用 从 数据 集中 找出 
异常 形状 运行 命令 python find _ rectangle . py 
dataset outputfind _ rectangle . pyfrom sklearn . metrics . 
pairwise import pairwise _ distances import numpy as np import 
argparse import glob import cv2 import imutils ap = argparse 
. ArgumentParser ap . add _ argument d dataset required 
= True help = Path to the dataset directory args 
= vars ap . parse _ args imagePaths = sorted 
glob . glob args dataset + / * . jpg 
data = for imagePath in imagePaths image = cv2 . 
imread imagePath gray = cv2 . cvtColor image cv2 . 
COLOR _ BGR2GRAY thresh = cv2 . threshold gray 5 
255 cv2 . THRESH _ BINARY 1 cnts = cv2 
. findContours thresh . copy cv2 . RETR _ EXTERNAL 
cv2 . CHAIN _ APPROX _ SIMPLE cnts = cnts 
0 if imutils . is _ cv2 else cnts 1 
c = max cnts key = cv2 . contourArea x 
y w h = cv2 . boundingRect c roi = 
cv2 . resize thresh y y + h x x 
+ w 50 50 # 忽略 图片大小 的 影响 moments 
= cv2 . HuMoments cv2 . moments roi . flatten 
data . append moments D = pairwise _ distances data 
. sum axis = 1 i = np . argmax 
D # 获取 距离 最大 的 图形 圆形 距离 很小 
矩形 距离 较大 image = cv2 . imread imagePaths i 
print Found square { } . format imagePaths i cv2 
. imshow Outlier image cv2 . waitKey 0 5 Zernike 
时刻 运用 Zernike 矩阵 量化 图像 中 的 形状 在 
图片 中 寻找 某个 特定 的 形状 from scipy . 
spatial import distance as dist import numpy as np import 
mahotas import cv2 import imutils def describe _ shapes image 
shapeFeatures = gray = cv2 . cvtColor image cv2 . 
COLOR _ BGR2GRAY blurred = cv2 . GaussianBlur gray 13 
13 0 cv2 . imshow 2 blurred thresh = cv2 
. threshold blurred 120 255 cv2 . THRESH _ BINARY 
1 thresh = cv2 . dilate thresh None iterations = 
4 thres = cv2 . erode thresh None iterations = 
2 cv2 . imshow 1 thres cv2 . waitKey 0 
cnts = cv2 . findContours thresh . copy cv2 . 
RETR _ EXTERNAL cv2 . CHAIN _ APPROX _ SIMPLE 
cnts = cnts 0 if imutils . is _ cv2 
else cnts 1 for c in cnts mask = np 
. zeros image . shape 2 dtype = uint8 cv2 
. drawContours mask c 1 255 1 x y w 
h = cv2 . boundingRect c roi = mask y 
y + h x x + w cv2 . imshow 
roi roi cv2 . waitKey 0 features = mahotas . 
features . zernike _ moments roi cv2 . m i 
n E n c l o s i n g 
C i r c l e c 1 degree = 
8 shapeFeatures . append features return cnts shapeFeatures refImage = 
cv2 . imread 2 . jpg _ gameFeatures = describe 
_ shapes refImage shapesImage = cv2 . imread 1 . 
jpg cnts shapeFeatures = describe _ shapes shapesImage D = 
dist . cdist gameFeatures shapeFeatures i = np . argmin 
D # 获取 最小 距离 的 下标 for j c 
in enumerate cnts if i = j box = cv2 
. minAreaRect c box = np . int0 cv2 . 
cv . BoxPoints box if imutils . is _ cv2 
else cv2 . boxPoints box cv2 . drawContours shapesImage box 
1 0 0 255 2 box = cv2 . minAreaRect 
cnts i box = np . int0 cv2 . cv 
. BoxPoints box if imutils . is _ cv2 else 
cv2 . boxPoints box cv2 . drawContours shapesImage box 1 
0 255 0 2 x y w h = cv2 
. boundingRect cnts i cv2 . putText shapesImage FOUND x 
y 10 cv2 . FONT _ HERSHEY _ SIMPLEX 0.9 
0 255 0 3 cv2 . imshow Input Image refImage 
cv2 . imshow Detected Shapes shapesImage cv2 . waitKey 0 
6 Haralick 纹理 功能 依据 数据 学习 分析 纹理 再将 
数据 图片 依据 纹理 分类 from sklearn . svm import 
LinearSVC import argparse import glob import mahotas import cv2 ap 
= argparse . ArgumentParser ap . add _ argument d 
training required = True help = Path to the dataset 
of textures ap . add _ argument t test required 
= True help = Path to the test images args 
= vars ap . parse _ args print INFO extracting 
features . . . data = labels = for imagePath 
in glob . glob args training + / * . 
jpg image = cv2 . imread imagePath image = cv2 
. cvtColor image cv2 . COLOR _ BGR2GRAY texture = 
imagePath imagePath . rfind / + 1 . split _ 
0 features = mahotas . features . haralick image . 
mean axis = 0 data . append features labels . 
append texture print INFO training model . . . model 
= LinearSVC C = 10.0 random _ state = 42 
model . fit data labels print INFO classifying . . 
. for imagePath in glob . glob args test + 
/ * . jpg image = cv2 . imread imagePath 
gray = cv2 . cvtColor image cv2 . COLOR _ 
BGR2GRAY features = mahotas . features . haralick gray . 
mean axis = 0 print features pred = model . 
predict features . reshape 1 1 0 print pred cv2 
. putText image pred 20 30 cv2 . FONT _ 
HERSHEY _ SIMPLEX 1.0 0 255 0 3 cv2 . 
imshow Image image cv2 . waitKey 0 7 本地 二进制 
模式 原理 LBP   在 本地 处理 像素     
而 不是 使用 灰度 共生 矩阵 通过 量化 小区 域特征 
分析 图片 的 特征向量 再 对 图片 进行 分类 注意 
点 记住 半径 r     和 点数 p 的 
影响 也 很重要 积分 越多 p     你 品尝 
更多 的 模式 你 可以 编码 但 在 同一 时间 
你 增加 你 的 计算 成本 另一方面 如果 增加 半径大小 
r     则 可以 在 图像 中 捕捉 较大 
的 纹理 细节 但是 如果 增加 r     而不 
增加 p     那么 您 将 失去 LBP 描述符 
的 局部 区分 能力 例 时尚 索引 文件 结构 | 
pyimagesearch | | _ _ init _ _ . py 
| | descriptors | | | _ _ init _ 
_ . py | | | l o c a 
l b i n a r y p a t 
t e r n s . py | search _ 
shirts . py 作用 创建 二进制 描述符 l o c 
a l b i n a r y p a 
t t e r n s . pyfrom skimage import 
feature import numpy as np class L o c a 
l B i n a r y P a t 
t e r n s def _ _ init _ 
_ self numPoints radius # 围绕 中心 像素 的 图案 
半径 半径 外围 点数 决定 计算 量 self . numPoints 
= numPoints self . radius = radius def describe self 
image eps = 1e 7 lbp = feature . local 
_ binary _ pattern image self . numPoints self . 
radius method = uniform hist _ = np . histogram 
lbp . ravel bins = range 0 self . numPoints 
+ 3 range = 0 self . numPoints + 2 
# normalize the histogram hist = hist . astype float 
hist / = hist . sum + eps # return 
the histogram of Local Binary Patterns return hist 作用 测试 
二进制 描述符 的 纹理 特征 效果 运行 命令 python search 
_ shirts . py dataset shirts query queries / query 
_ 01 . jpgsearch _ shirts . py from _ 
_ future _ _ import print _ function from pyimagesearch 
import L o c a l B i n a 
r y P a t t e r n s 
from imutils import paths import numpy as np import argparse 
import cv2 ap = argparse . ArgumentParser ap . add 
_ argument d dataset required = True help = path 
to the dataset of shirt images ap . add _ 
argument q query required = True help = path to 
the query image args = vars ap . parse _ 
args desc = L o c a l B i 
n a r y P a t t e r 
n s 24 8 index = { } for imagePath 
in paths . list _ images args dataset image = 
cv2 . imread imagePath gray = cv2 . cvtColor image 
cv2 . COLOR _ BGR2GRAY hist = desc . describe 
gray filename = imagePath imagePath . rfind / + 1 
index filename = hist query = cv2 . imread args 
query queryFeatures = desc . describe cv2 . cvtColor query 
cv2 . COLOR _ BGR2GRAY cv2 . imshow Query query 
results = { } for k features in index . 
items d = 0.5 * np . sum features queryFeatures 
* * 2 / features + queryFeatures + 1e 10 
results k = d results = sorted v k for 
k v in results . items 3 # 选取 前 
较小 距离 相似性 高的/nr 前 3个 结果 for i score 
filename in enumerate results # 将 前 3个 结果 显示 
出来 print # % d . % s % . 
4f % i + 1 filename score image = cv2 
. imread args dataset + / + filename cv2 . 
imshow Result # { } . format i + 1 
image cv2 . waitKey 0 8 定向 梯度 直方图 原理 
运用 HOG 描述符 他 主要 用于 描述 图像 中 物体 
的 结构 形状 和 外观 使其 成为 物体 分类 的 
优秀 描述符 但是 由于 HOG 捕获 局部 强度 梯度 和 
边缘 方向 因此 它 也 会 产生 良好 的 纹理 
描述符 知识点 pixels _ per _ cell 中的 像素   
  越多 我们 的 表示 越 粗糙 类 似地 pixels 
_ per _ cell 的 较小 值 将 产生 更 
细粒度 轮廓 更 明显 疑问 1 from sklearn . neighbors 
import K N e i g h b o r 
s C l a s s i f i e 
r 解释 http / / scikit learn . org / 
stable / modules / generated / sklearn . neighbors . 
K N e i g h b o r s 
C l a s s i f i e r 
. html 运行 命令 python recognize _ car _ logos 
. py training car _ logos test test _ imagesrecognize 
_ car _ logs . pyfrom sklearn . neighbors import 
K N e i g h b o r s 
C l a s s i f i e r 
from skimage import exposure from skimage import feature from imutils 
import paths import argparse import imutils import cv2 ap = 
argparse . ArgumentParser ap . add _ argument d training 
required = True help = Path to the logos training 
dataset ap . add _ argument t test required = 
True help = Path to the test dataset args = 
vars ap . parse _ args print INFO extracting features 
. . . data = labels = for imagePath in 
paths . list _ images args training # 提取 每个 
标志 的 hog 特征向量 make = imagePath . split / 
2 image = cv2 . imread imagePath gray = cv2 
. cvtColor image cv2 . COLOR _ BGR2GRAY edged = 
imutils . auto _ canny gray cnts = cv2 . 
findContours edged . copy cv2 . RETR _ EXTERNAL cv2 
. CHAIN _ APPROX _ SIMPLE cnts = cnts 0 
if imutils . is _ cv2 else cnts 1 c 
= max cnts key = cv2 . contourArea x y 
w h = cv2 . boundingRect c logo = gray 
y y + h x x + w logo = 
cv2 . resize logo 200 100 H = feature . 
hog logo orientations = 9 pixels _ per _ cell 
= 10 10 cells _ per _ block = 2 
2 transform _ sqrt = True block _ norm = 
L1 data . append H labels . append make print 
INFO training classifier . . . model = K N 
e i g h b o r s C l 
a s s i f i e r n _ 
neighbors = 1 # 对 特征 数据 进行 K 值 
分类 model . fit data labels print INFO evaluating . 
. . for i imagePath in enumerate paths . list 
_ images args test image = cv2 . imread imagePath 
gray = cv2 . cvtColor image cv2 . COLOR _ 
BGR2GRAY logo = cv2 . resize gray 200 100 H 
hogImage = feature . hog logo orientations = 9 pixels 
_ per _ cell = 10 10 cells _ per 
_ block = 2 2 transform _ sqrt = True 
block _ norm = L1 visualise = True pred = 
model . predict H . reshape 1 1 0 hogImage 
= exposure . rescale _ intensity hogImage out _ range 
= 0 255 hogImage = hogImage . astype uint8 cv2 
. imshow HOG Image # { } . format i 
+ 1 hogImage cv2 . putText image pred . title 
10 35 cv2 . FONT _ HERSHEY _ SIMPLEX 1.0 
0 255 0 3 cv2 . imshow Test Image # 
{ } . format i + 1 image cv2 . 
waitKey 0 9 关键点 检测 9.1 FAST 关键点 检测 原理 
必须 有 至少 Ñ 沿着 连续 像素 圆形 周边 具有 
半径 R 是 所有 或者 亮 或 更暗 比 中心 
像素 由 阈值 t 疑问 是否 可以 修改 参数 半径 
R 和N值/nr 运行 命令 python fast _ keypoint . pyfast 
_ keypoint . pyfrom _ _ future _ _ import 
print _ function import numpy as np import cv2 import 
imutils image = cv2 . imread next . png orig 
= image . copy gray = cv2 . cvtColor image 
cv2 . COLOR _ BGR2GRAY if imutils . is _ 
cv2 detector = cv2 . FeatureDetector _ create FAST kps 
= detector . detect gray else detector = cv2 . 
F a s t F e a t u r 
e D e t e c t o r _ 
create kps = detector . detect gray None print # 
of keypoints { } . format len kps for kp 
in kps r = int 0.5 * kp . size 
x y = np . int0 kp . pt cv2 
. circle image x y r 0 255 255 2 
cv2 . imshow Images np . hstack orig image cv2 
. waitKey 0 9 . 2Harris 关键点 检测 原理 将 
分别 在 x 和y/nr 方向 上 对 该区 域中 的 
梯度 值 求和 和/c 如果/c 这/r 两个/m 值/n 都/d 足够/v 
大 那么 我们 可以 将 该 区域 定义 为 角落 
该 过程 针对 输入 图像 中 的 每个 像素 完成 
这种 方法 是 有效 的 因为/c 红色/n 圆/n 圈内/n 的/uj 
区域/n 会/v 有/v 大量/n 的/uj 水平/n 和/c 垂直/v 梯度/n 当 
发生 这种 情况 时 我们 知道 我们 找到 了 一个 
角落 . 疑问 1 harris 函数 的 参数 的 作用 
• img 数据类型 为 float32 的 输入 图像 • blockSize 
角 点 检测 中 要 考虑 的 领域 大小 • 
ksize Sobel 求导 中 使用 的 窗口 大小 • k 
Harris 角 点 检测 方程 中的 自由 参数 取值 参数 
为 0 04 0.06 . 2 harris 什么 时候 被 
调用 harris _ keypoint . pyfrom _ _ future _ 
_ import print _ function import numpy as np import 
cv2 import imutils def harris gray blockSize = 2 apetureSize 
= 3 k = 0.1 T = 0.02 gray = 
np . float32 gray H = cv2 . cornerHarris gray 
blockSize apetureSize k kps = np . argwhere H T 
* H . max kps = cv2 . KeyPoint pt 
1 pt 0 3 for pt in kps return kps 
image = cv2 . imread next . png orig = 
image . copy gray = cv2 . cvtColor image cv2 
. COLOR _ BGR2GRAY if imutils . is _ cv2 
detector = cv2 . FeatureDetector _ create HARRIS kps = 
detector . detect gray else kps = harris gray print 
# of keypoints { } . format len kps for 
kp in kps r = int 0.5 * kp . 
size x y = np . int0 kp . pt 
cv2 . circle image x y r 0 255 255 
2 # show the image cv2 . imshow Images np 
. hstack orig image cv2 . waitKey 0 9.3 GFTT 
关键点 检测 原理 提出 了 以下 R 的 计算 来 
表明 一个 地区 是否 是 一个 角落 在 这种 情况 
下 我们 只是 取 特征值 分解 分量 的 最小值 如果 
这个 值 R 大于 我们 的 阈值 T     
即 那么 我们 可以 将 该 区域 标记 为 拐角 
在 harris 基础上 改进 from _ _ future _ _ 
import print _ function import numpy as np import cv2 
import imutils def gftt gray maxCorners = 0 qualityLevel = 
0.01 minDistance = 1 mask = None blockSize = 3 
u s e H a r r i s D 
e t e c t o r = False k 
= 0.04 kps = cv2 . g o o d 
F e a t u r e s T o 
T r a c k gray maxCorners qualityLevel minDistance mask 
= mask blockSize = blockSize u s e H a 
r r i s D e t e c t 
o r = u s e H a r r 
i s D e t e c t o r 
k = k return cv2 . KeyPoint pt 0 0 
pt 0 1 3 for pt in kps image = 
cv2 . imread next . png orig = image . 
copy gray = cv2 . cvtColor image cv2 . COLOR 
_ BGR2GRAY if imutils . is _ cv2 detector = 
cv2 . FeatureDetector _ create GFTT kps = detector . 
detect gray else kps = gftt gray for kp in 
kps r = int 0.5 * kp . size x 
y = np . int0 kp . pt cv2 . 
circle image x y r 0 255 255 2 print 
# of keypoints { } . format len kps cv2 
. imshow Images np . hstack orig image cv2 . 
waitKey 0 9.4 DoG 关键点 检测器 通过 对 图像 缩放 
变化 寻找 角 点 获取 的 角 点 绘制 出来 
的 圆 有 大小 区别 from _ _ future _ 
_ import print _ function import numpy as np import 
cv2 import imutils image = cv2 . imread next . 
png orig = image . copy gray = cv2 . 
cvtColor image cv2 . COLOR _ BGR2GRAY if imutils . 
is _ cv2 detector = cv2 . FeatureDetector _ create 
SIFT kps = detector . detect gray else detector = 
cv2 . xfeatures2d . SIFT _ create kps _ = 
detector . detectAndCompute gray None print # of keypoints { 
} . format len kps for kp in kps r 
= int 0.5 * kp . size x y = 
np . int0 kp . pt cv2 . circle image 
x y r 0 255 255 2 cv2 . imshow 
Images np . hstack orig image cv2 . waitKey 0 
9.5 Fast _ Hessian 关键点 检测 作用 类似于 高斯 差分 
快速 Hessian 关键点 检测器 用于 定位 图像 中 可 重复 
的 斑点 状 区域 这些 区域 可能 是 边缘 角落 
或 两者 from _ _ future _ _ import print 
_ function import numpy as np import cv2 import imutils 
image = cv2 . imread next . png orig = 
image . copy gray = cv2 . cvtColor image cv2 
. COLOR _ BGR2GRAY if imutils . is _ cv2 
detector = cv2 . FeatureDetector _ create SURF kps = 
detector . detect gray else detector = cv2 . xfeatures2d 
. SURF _ create kps _ = detector . detectAndCompute 
gray None print # of keypoints { } . format 
len kps for kp in kps r = int 0.5 
* kp . size x y = np . int0 
kp . pt cv2 . circle image x y r 
0 255 255 2 cv2 . imshow Images np . 
hstack orig image cv2 . waitKey 0 9.6 STAR 关键点 
检测 运用 情况 用于 检测 图像 中的 斑点 状 区域 
from _ _ future _ _ import print _ function 
import numpy as np import cv2 import imutils image = 
cv2 . imread next . png orig = image . 
copy gray = cv2 . cvtColor image cv2 . COLOR 
_ BGR2GRAY if imutils . is _ cv2 detector = 
cv2 . FeatureDetector _ create STAR kps = detector . 
detect gray else detector = cv2 . xfeatures2d . StarDetector 
_ create kps = detector . detect gray print # 
of keypoints { } . format len kps for kp 
in kps r = int 0.5 * kp . size 
x y = np . int0 kp . pt cv2 
. circle image x y r 0 255 255 2 
cv2 . imshow Images np . hstack orig image cv2 
. waitKey 0 9.7 MSER 关键点 检测 作用 MSER 检测器 
用于 检测 图像 中的 斑点 状 结构 假设 这些 区域 
很小 具有 相对 相同 的 像素 强度 并且 被 对比 
像素 包围 from _ _ future _ _ import print 
_ function import numpy as np import cv2 import imutils 
image = cv2 . imread next . png orig = 
image . copy gray = cv2 . cvtColor image cv2 
. COLOR _ BGR2GRAY # detect MSER keypoints in the 
image if imutils . is _ cv2 detector = cv2 
. FeatureDetector _ create MSER kps = detector . detect 
gray else detector = cv2 . MSER _ create kps 
= detector . detect gray None print # of keypoints 
{ } . format len kps for kp in kps 
r = int 0.5 * kp . size x y 
= np . int0 kp . pt cv2 . circle 
image x y r 0 255 255 2 cv2 . 
imshow Images np . hstack orig image cv2 . waitKey 
0 9.8 密集 关键点 检测 作用 浓密 检测器   将 
图像 中 的 每个 k 像素 标记 为 关键 点 
from _ _ future _ _ import print _ function 
import numpy as np import argparse import cv2 import imutils 
def dense image step radius kps = for x in 
range 0 image . shape 1 step for y in 
range 0 image . shape 0 step kps . append 
cv2 . KeyPoint x y radius * 2 return kps 
ap = argparse . ArgumentParser ap . add _ argument 
s step type = int default = 28 help = 
step in pixels of the dense detector args = vars 
ap . parse _ args image = cv2 . imread 
next . png orig = image . copy gray = 
cv2 . cvtColor image cv2 . COLOR _ BGR2GRAY kps 
= radii = 4 8 12 if imutils . is 
_ cv2 detector = cv2 . FeatureDetector _ create Dense 
detector . setInt initXyStep args step rawKps = detector . 
detect gray else rawKps = dense gray args step 1 
for rawKp in rawKps for r in radii kp = 
cv2 . KeyPoint x = rawKp . pt 0 y 
= rawKp . pt 1 _ size = r * 
2 kps . append kp print # dense keypoints { 
} . format len rawKps print # dense + multi 
radii keypoints { } . format len kps for kp 
in kps r = int 0.5 * kp . size 
x y = np . int0 kp . pt cv2 
. circle image x y r 0 255 255 1 
cv2 . imshow Images np . hstack orig image cv2 
. waitKey 0 9.9 BRISK 关键点 检测器 运用 情况 多 
尺度 版本 from _ _ future _ _ import print 
_ function import numpy as np import cv2 import imutils 
image = cv2 . imread next . png orig = 
image . copy gray = cv2 . cvtColor image cv2 
. COLOR _ BGR2GRAY if imutils . is _ cv2 
detector = cv2 . FeatureDetector _ create BRISK kps = 
detector . detect gray else detector = cv2 . BRISK 
_ create kps = detector . detect gray None print 
# of keypoints { } . format len kps for 
kp in kps r = int 0.5 * kp . 
size x y = np . int0 kp . pt 
cv2 . circle image x y r 0 255 255 
2 cv2 . imshow Images np . hstack orig image 
cv2 . waitKey 0 9.10 ORB 关键点 检测器 的 运用 
作用 ORB 用于 检测 图像 中的 角 点 from _ 
_ future _ _ import print _ function import numpy 
as np import cv2 import imutils image = cv2 . 
imread next . png orig = image . copy gray 
= cv2 . cvtColor image cv2 . COLOR _ BGR2GRAY 
if imutils . is _ cv2 detector = cv2 . 
FeatureDetector _ create ORB kps = detector . detect gray 
else detector = cv2 . ORB _ create kps = 
detector . detect gray None print # of keypoints { 
} . format len kps for kp in kps r 
= int 0.5 * kp . size x y = 
np . int0 kp . pt cv2 . circle image 
x y r 0 255 255 2 cv2 . imshow 
Images np . hstack orig image cv2 . waitKey 0 
10 局部 不变 描述符 10.1 SIFT 作用 检测 关键点 并从 
图像 中 提取 SIFT 特征向量 from _ _ future _ 
_ import print _ function import argparse import cv2 import 
imutils ap = argparse . ArgumentParser ap . add _ 
argument i image required = True help = Path to 
the image args = vars ap . parse _ args 
image = cv2 . imread args image gray = cv2 
. cvtColor image cv2 . COLOR _ BGR2GRAY if imutils 
. is _ cv2 detector = cv2 . FeatureDetector _ 
create SIFT extractor = cv2 . D e s c 
r i p t o r E x t r 
a c t o r _ create SIFT kps = 
detector . detect gray kps descs = extractor . compute 
gray kps else detector = cv2 . xfeatures2d . SIFT 
_ create kps descs = detector . detectAndCompute gray None 
print INFO # of keypoints detected { } . format 
len kps print INFO feature vector shape { } . 
format descs . shape 10.2 RootSIFT 作用 定义 RootSIFT 检测器 
获取 关键点 特征 rootsift . pyimport numpy as np import 
cv2 import imutils class RootSIFT def _ _ init _ 
_ self if imutils . is _ cv2 self . 
extractor = cv2 . D e s c r i 
p t o r E x t r a c 
t o r _ create SIFT else self . extractor 
= cv2 . xfeatures2d . SIFT _ create def compute 
self image kps eps = 1e 7 if imutils . 
is _ cv2 kps descs = self . extractor . 
compute image kps else kps descs = self . extractor 
. detectAndCompute image None if len kps = = 0 
return None descs / = descs . sum axis = 
1 keepdims = True + eps descs = np . 
sqrt descs return kps descs 作用 从 图像 中 提取 
RootSIFT 描述符 extract _ rpptsift . pyfrom _ _ future 
_ _ import print _ function from pyimagesearch . descriptors 
import RootSIFT import argparse import cv2 import imutils ap = 
argparse . ArgumentParser ap . add _ argument i image 
required = True help = Path to the image args 
= vars ap . parse _ args image = cv2 
. imread args image gray = cv2 . cvtColor image 
cv2 . COLOR _ BGR2GRAY if imutils . is _ 
cv2 detector = cv2 . FeatureDetector _ create SIFT extractor 
= RootSIFT kps = detector . detect gray else detector 
= cv2 . xfeatures2d . SIFT _ create extractor = 
RootSIFT kps _ = detector . detectAndCompute gray None kps 
descs = extractor . compute gray kps print INFO # 
of keypoints detected { } . format len kps print 
INFO feature vector shape { } . format descs . 
shape 10.3 SURF 作用 SURF 的 第一步 是 选择 围绕 
关键点 的 图像 的 矩形 区域 在 关键 点 检测 
阶段 确定 区域 的 确切 大小 extract _ surf . 
pyfrom _ _ future _ _ import print _ function 
import argparse import cv2 import imutils ap = argparse . 
ArgumentParser ap . add _ argument i image required = 
True help = Path to the image args = vars 
ap . parse _ args image = cv2 . imread 
args image gray = cv2 . cvtColor image cv2 . 
COLOR _ BGR2GRAY if imutils . is _ cv2 detector 
= cv2 . FeatureDetector _ create SURF extractor = cv2 
. D e s c r i p t o 
r E x t r a c t o r 
_ create SURF kps = detector . detect gray kps 
descs = extractor . compute gray kps else detector = 
cv2 . xfeatures2d . SURF _ create kps descs = 
detector . detectAndCompute gray None print INFO # of keypoints 
detected { } . format len kps print INFO feature 
vector shape { } . format descs . shape 10.4 
实值 特征 匹配 知识点 提取 关键点 的 图像 坐标 例 
ksp 0 . pt 运行 命令 1 python draw _ 
matches . py first jp _ 01 . png second 
jp _ 02 . png detector SURF extractor SIFT2 python 
draw _ matches . py first jp _ 01 . 
png second jp _ 02 . png detector SURF extractor 
RootSIFT3 python draw _ matches . py first jp _ 
01 . png second jp _ 02 . png detector 
SURF extractor SURF # coding = utf 8 from _ 
_ future _ _ import print _ function import numpy 
as np import argparse import cv2 from imutils . feature 
. factories import FeatureDetector _ create D e s c 
r i p t o r E x t r 
a c t o r _ create D e s 
c r i p t o r M a t 
c h e r _ create ap = argparse . 
ArgumentParser ap . add _ argument f first required = 
True help = Path to first image # 提取 关键点 
和 特征向量 的 第一 幅 图像 的 路经 ap . 
add _ argument s second required = True help = 
Path to second image # 提取 关键点 和 特征向量 的 
第二 幅 图像 的 路经 ap . add _ argument 
d detector type = str default = SURF help = 
Kepyoint detector to use . Options BRISK DENSE DOG SIFT 
FAST FASTHESSIAN SURF GFTT HARRIS MSER ORB STAR # 用于 
在 俩个 图像 执行 关键点 检测 的 关键 点 的 
检测器 ap . add _ argument e extractor type = 
str default = SIFT help = Keypoint detector to use 
. Options RootSIFT SIFT SURF # 关键 点 区域 提取 
局部 不变 描述符 ap . add _ argument m matcher 
type = str default = BruteForce help = Feature matcher 
to use . Options BruteForce BruteForce SL2 BruteForce L1 FlannBased 
# 寻找 没对 描述符 最小 距离 方法 # ap . 
add _ argument v visualize type = str default = 
Yes help = Whether the visualiz image should be shown 
. Options Yes No Each ap . add _ argument 
v visualize type = str default = Yes help = 
Whether the visualiztion image should be shown . Options Yes 
No Each # 绘制 对 关键 点 和 描述符 之间 
的 匹配 args = vars ap . parse _ args 
if args detector = = DOG detector = FeatureDetector _ 
create SIFT elif args detector = = FASTHESSIAN detector = 
FeatureDetector _ create SURF else detector = FeatureDetector _ create 
args detector extractor = D e s c r i 
p t o r E x t r a c 
t o r _ create args extractor # 提取 关键 
点 区域 的 特征 描述符 matcher = D e s 
c r i p t o r M a t 
c h e r _ create args matcher imageA = 
cv2 . imread args first imageB = cv2 . imread 
args second grayA = cv2 . cvtColor imageA cv2 . 
COLOR _ BGR2GRAY grayB = cv2 . cvtColor imageB cv2 
. COLOR _ BGR2GRAY # 提取 关键点 kpsA = detector 
. detect grayA kpsB = detector . detect grayB # 
提取 关键 的 局部 特征 描述符 kpsA featuresA = extractor 
. compute grayA kpsA kpsB featuresB = extractor . compute 
grayB kpsB rawMatches = matcher . knnMatch featuresA featuresB 2 
matches = if rawMatches is not None for m in 
rawMatches # 筛选 符合 条件 的 关键 点 if len 
m = = 2 and m 0 . distance m 
1 . distance * 0.8 matches . append m 0 
. trainIdx m 0 . queryIdx print # of keypoints 
from first image { } . format len kpsA 11 
二进制 描述符 11.1 ORBfrom _ _ future _ _ import 
print _ function import argparse import cv2 import imutils ap 
= argparse . ArgumentParser ap . add _ argument i 
image required = True help = Path to the image 
args = vars ap . parse _ args image = 
cv2 . imread args image gray = cv2 . cvtColor 
image cv2 . COLOR _ BGR2GRAY if imutils . is 
_ cv2 detector = cv2 . FeatureDetector _ create ORB 
extractor = cv2 . D e s c r i 
p t o r E x t r a c 
t o r _ create ORB kps = detector . 
detect gray kps descs = extractor . compute gray kps 
else detector = cv2 . ORB _ create kps descs 
= detector . detectAndCompute gray None # show the shape 
of the keypoints and local invariant descriptors array print INFO 
# of keypoints detected { } . format len kps 
print INFO feature vector shape { } . format descs 
. shape 11.2 BRISKfrom _ _ future _ _ import 
print _ function import argparse import cv2 import imutils ap 
= argparse . ArgumentParser ap . add _ argument i 
image required = True help = Path to the image 
args = vars ap . parse _ args image = 
cv2 . imread args image gray = cv2 . cvtColor 
image cv2 . COLOR _ BGR2GRAY if imutils . is 
_ cv2 detector = cv2 . FeatureDetector _ create BRISK 
extractor = cv2 . D e s c r i 
p t o r E x t r a c 
t o r _ create BRISK kps = detector . 
detect gray kps descs = extractor . compute gray kps 
else detector = cv2 . BRISK _ create kps descs 
= detector . detectAndCompute gray None print INFO # of 
keypoints detected { } . format len kps print INFO 
feature vector shape { } . format descs . shape 
11.3 BRIEFfrom _ _ future _ _ import print _ 
function import argparse import cv2 import imutils ap = argparse 
. ArgumentParser ap . add _ argument i image required 
= True help = Path to the image args = 
vars ap . parse _ args image = cv2 . 
imread args image gray = cv2 . cvtColor image cv2 
. COLOR _ BGR2GRAY if imutils . is _ cv2 
detector = cv2 . FeatureDetector _ create FAST extractor = 
cv2 . D e s c r i p t 
o r E x t r a c t o 
r _ create BRIEF else detector = cv2 . F 
a s t F e a t u r e 
D e t e c t o r _ create 
extractor = cv2 . xfeatures2d . B r i e 
f D e s c r i p t o 
r E x t r a c t o r 
_ create kps = detector . detect gray kps descs 
= extractor . compute gray kps print INFO # of 
keypoints detected { } . format len kps print INFO 
feature vector shape { } . format descs . shape 
from _ _ future _ _ import print _ function 
import argparse import cv2 import imutils # construct the argument 
parser and parse the arguments ap = argparse . ArgumentParser 
ap . add _ argument i image required = True 
help = Path to the image args = vars ap 
. parse _ args image = cv2 . imread args 
image gray = cv2 . cvtColor image cv2 . COLOR 
_ BGR2GRAY if imutils . is _ cv2 detector = 
cv2 . FeatureDetector _ create FAST extractor = cv2 . 
D e s c r i p t o r 
E x t r a c t o r _ 
create FREAK kps = detector . detect gray kps descs 
= extractor . compute gray kps else detector = cv2 
. F a s t F e a t u 
r e D e t e c t o r 
_ create extractor = cv2 . xfeatures2d . FREAK _ 
create kps = detector . detect gray None kps descs 
= extractor . compute gray kps print INFO # of 
keypoints detected { } . format len kps print INFO 
feature vector shape { } . format descs . shape 
