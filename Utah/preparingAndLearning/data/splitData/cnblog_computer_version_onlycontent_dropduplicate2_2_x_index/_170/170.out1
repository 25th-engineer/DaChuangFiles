一 使用 OpenCV 处理 图像 1 . 不同颜色 空间 的 
转换 OpenCV 中有 数百种 关于 在 不同 色彩 空间 之间 
转换 的 方法 当前 在 计算机 视觉 中 有三种 常用 
的 色彩 空间 灰度 BGR 以及 HSV Hue Saturation Value 
灰度 色彩 空间 是 通过 去除 彩色 信息 来 将其 
转换 为 灰阶 灰度 色彩 空间 对 中间 处理 特别 
有效 比如 人脸 检测 BGR 即 蓝 绿 红 色彩 
空间 每 一个 像素点 都由 一个 三元 数组 来 表示 
分别 代表 蓝 绿 红三/nr 种颜色 HSV H Hue 是 
色度 S Saturation 是 饱和度 V value 表示 黑暗 的 
程度 或 光谱 另一端 的 明亮 程度 BGR 的 简短 
说明 当 第一 次 处理 BGR 色彩 空 间时 可以 
不要 其中 的 一个 色彩 分量 比如 像素 值 0 
255 255 没有 蓝色 绿色 分量 取 最大值 红色 分量 
取 最大值 表示 黄色 2 . 傅里叶 变换 NumPy 有 
快速 傅里叶 变换 FFT 的 包 它 包含 了 fft2 
函数 该 函数 可以 计算 一幅 图像 的 离散 傅里叶 
变换 DFT 下面 通过 傅里叶 变换 来 介绍 图像 的 
幅度 谱 图像 的 幅度 谱 是 另一种 图像 幅度 
谱 图像 呈现 了 原始 图 像在 变换 方面 的 
一种 表示 把 一幅 图像 中 最 明亮 的 像素 
放到 图像 中央 然后 逐渐 变暗 在 边缘 上 的 
像素 最暗 这样/r 可以/c 发现/v 图像/n 中/f 有/v 多少/m 亮/v 
的/uj 像素/n 和暗的/nr 像素/n 以及 它们 分布 的 百分比 傅里叶 
变换 的 概念 是 边缘 检测 或 线段 和 形状 
检测 等 图像处理 操作 的 基础 2.1 高通 滤波器 高通 
滤波器 HPF 是 检测 图像 的 某个 区域 然后 根据 
像素 与 周围 像素 的 亮度 差值 来 提升 boost 
该 像素 的 亮度 的 滤波器 核 是 指 一组 
权重 的 集合 它 会 应用在 源 图像 的 一个 
区域 并 由此 生成 目标 图像 的 一个 像素 比如 
大小 为 7 的 核 意味着 每 49 7 x 
7 个 源 图像 的 像素 会 产生 目标 图像 
的 一个 像素 可把 核 看作 一块 覆盖 在 源 
图像 上 可移动 的 毛 玻璃片 玻璃片 覆盖 区域 的 
光线 会 按 某种 方式 进行 扩散 混合 后 透过去 
以 如下 的 核 kernal 为例 0 0.25 0 0.25 
1 0.25 0 0.25 0 在 计算 完 中央 像素 
与 周围 邻近 像素 的 亮度 差值 之和 以后 如果 
亮度 变化 很大 中央 像素 的 亮度 会 增加 反之 
则 不会 换句话说 如果 一个 像素 比 它 周围 的 
像素 更 突出 就会 提升 它 的 亮度 这在 边缘 
检测 上 尤其 有效 它 会 采用 一种 称为 高频 
提升 滤波器 high boost filter 的 高通 滤波器 高通/nr 和/c 
低通滤波器/n 都有/nr 一个/m 称为/v 半径/n radius 的 属性 它 决定 
了 多 大面积 的 邻近 像素 参与 滤波 计算 下面 
是 一个 高通 滤波器 的 例子 import cv2import numpy as 
npfrom scipy import ndimagekernal _ 3x3 = np . array 
1 1 1 1 8 1 1 1 1 kernal 
_ 5x5 = np . array 1 1 1 1 
1 1 1 2 1 1 1 2 4 2 
1 1 1 2 1 1 1 1 1 1 
1 # 使用 函数 cv2 . imread 读入 图像 这幅 
图像 应该 在此 程序 的 工作 路径 或者 给 函数 
提供 完整 路径 第二个 参数 是 要 告诉 函数 应该 
如何 读取 这幅 图片 #     • cv2 . 
IMREAD _ COLOR 读入 一副 彩色图像 图像 的 透明度 会被 
忽略 这是 默认 参数 #     • cv2 . 
IMREAD _ GRAYSCALE 以 灰度 模式 读入 图像 img = 
cv2 . imread LENA256 . bmp 0 # 注 此处 
后面 要 加上 0 表示 已 灰度 模式 读入 图像 
k3 = ndimage . convolve img kernal _ 3x3 # 
注 使用 ndimage . convolve 时 滤波 核 的 维度 
应与 原始 图像 的 维度 相同 故此 采用 灰度 图 
k5 = ndimage . convolve img kernal _ 5x5 blurred 
= cv2 . GaussianBlur img 11 11 0 g _ 
hpf = img blurredcv2 . imshow image img cv2 . 
imshow 3x3 k3 cv2 . imshow 5x5 k5 cv2 . 
imshow g _ hpf g _ hpf cv2 . waitKey 
cv2 . d e s t r o y A 
l l W i n d o w s 注 
这些 滤波器 中 的 所有 值 加 起来 为 0 
. 运行 结果 为 导入 模块 之后 我们 定义 一个 
3x3 和 一个 5x5 的 核 然后 将 读入 的 
图像 转换 为 灰度 格式 通常 大多数 的 图像 处理 
会用 NumPy 来 完成 但是 这里 的 情况 比较 特殊 
因为 需要 用 一个 给定 的 核 与 图像 进行 
卷积 convolve 但是 NumPy 碰巧 只 接受 一维 数组 ndimage 
的 convolve 函数 支持 经典 的 NumPy 数组 cv2 模块 
用 这种 数组 来 存储 图像 还有 一种 方法 可 
实现 高通 滤波器 通过 对 图像 应用 低通滤波器 之后 与 
原始 图像 计算 差值 2.2 低通滤波器 高通 滤波器 是 根据 
像素 与 邻近 像素 的 亮度 差值 来 提升 该 
像素 的 亮度 低通滤波器 Low Pass Filter LPF 则是 在 
像素 与 周围 像素 的 亮度 差值 小于 一个 特定 
值 时 平滑 该 像素 的 亮度 它 主要 用于 
去 噪 和 模糊 化 比如说 高斯 模糊 是 最 
常用 的 模糊 滤波器 平滑 滤波器 之一 它 是 一个 
削弱 高频信号 信息 强度 的 低通滤波器 3 . 边缘 检测 
OpenCV 提供 了 许多 边缘 检测 滤 波函数 包括 Laplacian 
Sobel 以及 Scharr 这些 滤 波函数 都会 将 非 边缘 
区域 转为 黑色 将 边缘 区域 转为 白色 或 其他 
饱和 的 颜色 但是 这些 函数 都 很容易 将 噪声 
错误 地 识别 为 边缘 缓解 这个 问题 的 方法 
是 在 找到 边缘 之前 对 图像 进行 模糊 处理 
OpenCV 也 提供 了 许多 模糊 滤 波函数 包括 blur 
简单 的 算术 平均 medianBlur 以及 GaussianBlur 边缘/n 检测/vn 滤/zg 
波函数/l 和/c 模糊/a 滤波/n 函数/n 的/uj 参数/n 有/v 很多/m 但 
总会 有 一个 ksize 参数 它 是 一个 奇数 表示 
滤波器 的 宽和 高 以 像素 为 单位 这里 使用 
medianBlur 作为 模糊 函数 它 对 去除 数字化 的 视频 
噪声 非常 有效 特别 是 去除 彩色图像 的 噪声 使用 
Laplacian 作为 边缘 检测 函数 它 会 产生 明显 的 
边缘 线条 灰度 图像 更是如此 在 使用 medianBlur 函数 之后 
将要 使用 Laplacian 函数 之前 需要 将 图像 从 BGR 
色彩 空间 转为 灰度 色彩 空间 在 得到 Laplacian 函数 
的 结果 之后 需要/v 将其/i 转换/v 成/n 黑色/n 边缘/n 和/c 
白色/n 背景/n 的/uj 图像/n 然后 将其 归一化 使 它 的 
像素 值 在 0 到 1 之间 并 乘以 源 
图像 以便 能将 边缘 变黑 注意 核 的 大小 可由 
strokeEdges 函数 的 参数 来 指定 blurKsize 参数 会 作为 
medianBlur 含糊 的 ksize 参数 edgeKsize 参数 会 作为 Laplacian 
函数 的 ksize 参数 对于 作者 的 摄像头 将 blurKsize 
值 设为 7 将 edgeKsize 值 设为 5 会 得到 
最好 的 效果 但 对于 较大 的 ksize 比如 7 
使用 medianBlur 的 代价 很高 如果 在 使用 strokeEdges 函数 
时 遇到 性能 问题 可 试着 减小 blurKsize 的 值 
要 关闭 模糊 效果 可以 将 blurKsize 的 值 设为 
3 以下 4 . 用 定制 内核 做 卷积 OpenCV 
预定义 的 许多 滤波器 滤 波函数 都会 使用 核 其实 
核 是 一组 权重 它 决定 如何 通过 邻近 像素点 
来 计算 新的 像素点 核 也 称为 卷积 矩阵 它 
对 一个 区域 的 像素 做 调和 mix up 或 
卷积 运算 通常 基于 核 的 滤波器 滤 波函数 被 
称为 卷积 滤波器 滤 波函数 OpenCV 提供 了 一个 非常 
通用 的 filter2D 函数 它 运用 由 用户 指定 的 
任意 核 或 卷积 矩阵 卷积 矩阵 是 一个 二维 
数组 有奇/nr 数行 奇 数列 中心 的 元素 对 应于 
感兴趣 的 像素 其他 的 元素 对应 于 这个 像素 
周围 的 邻近 像素 每个 元素 都 有一个 整数 或 
浮点数 的 值 这些 值 就是 应用在 像素 值 上 
的 权重 如 kernel = numpy . array 1 1 
1 1 9 1 1 1 1 其中 感兴趣 的 
像素 权 重为 9 其 邻近 像素 权 重为 1 
对 感兴趣 的 像素 来说 新的 像素 值 使用 当前 
像素 值 乘以 9 然后 减去 8个 邻近 像素 值 
如果 感兴趣 的 像素 已经 与其 邻近 像素 有一点 差别 
那么 这个 差别 会 增加 这样会 让 图像 锐化 因为 
该 像素 的 值 与 邻近 像素 值 之间 的 
差距 拉 大了 注意 权重 加 起来 为 1 如果 
不 想 改变 图像 的 亮度 就 应该 这样 如果 
稍微 修改 一下 锐化 核 使 它 的 权重 加 
起来 为 0 就会 得到 一个 边缘 检测 核 把 
边缘 转为 白色 把 非 边缘 区域 转为 黑色 在 
源 图像 和 目标 图像 上 分别 使用 卷积 矩阵 
cv2 . filter2D src 1 kernel dst . 第二个 参数 
指定 了 目标 图像 每个 通道 的 位 深度 比如 
位 深度 cv2 . CV _ 8U 表示 每个 通道 
为 8位 如果 为 负值 则/d 表示/v 目标/n 图像/n 和源/nr 
图像/n 有/v 同样/d 的/uj 位/q 深度/ns 注 对 彩色图像 来说 
filter2D 会对 每个 通道 都用/nr 同样 的 核 如果 要 
对 每个 通道 使用 不同 的 核 就 必须 用 
split 函数 和 merge 函数 对于 模糊 滤波器 为了 达到 
模糊 效果 通常 权重 和 应该 为 1 而且 邻近 
像素 的 权重 全为 正 锐化 边缘 检测 以及 模糊 
等 滤波器 都是 用了 高度 对称 的 核 但是 有时 
不 对称 的 核 也会 得到 一些 有趣 的 效果 
# V C o n v o l u t 
i o n F i l t e r 表示 
一般 的 滤波器 class V C o n v o 
l u t i o n F i l t 
e r object A filter that applies a convolution to 
V or all of BGR . def _ _ init 
_ _ self kernel self . _ kernel = kernel 
def apply self src dst Apply the filter with a 
BGR or gray source / destination . cv2 . filter2D 
src 1 self . _ kernel dst # SharpenFilter 表示 
特定 的 锐化 滤波器 class SharpenFilter V C o n 
v o l u t i o n F i 
l t e r A sharpen filter with a 1 
pixel radius . def _ _ init _ _ self 
kernel = numpy . array 1 1 1 1 9 
1 1 1 1 V C o n v o 
l u t i o n F i l t 
e r . _ _ init _ _ self kernel 
# 边缘 检测 滤波器 class FindEdgesFilter V C o n 
v o l u t i o n F i 
l t e r A edge finding filter with a 
1 pixel radius . def _ _ init _ _ 
self kernel = numpy . array 1 1 1 1 
8 1 1 1 1 V C o n v 
o l u t i o n F i l 
t e r . _ _ init _ _ self 
kernel # 邻近 平均 滤波器 class BlurFilter V C o 
n v o l u t i o n F 
i l t e r A edge finding filter with 
a 1 pixel radius . def _ _ init _ 
_ self kernel = numpy . array 0.04 0.04 0.04 
0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 
0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 
0.04 0.04 V C o n v o l u 
t i o n F i l t e r 
. _ _ init _ _ self kernel 下面 介绍 
一种 核 它 同时 具有 模糊 有正的/nr 权重 和 锐化 
有负的/nr 权重 的 作用 这 会 产生 一种 脊 状 
ridge 或者 浮雕 embossed 的 效果 class EmbossFilter V C 
o n v o l u t i o n 
F i l t e r A edge finding filter 
with a 1 pixel radius . def _ _ init 
_ _ self kernel = numpy . array 2 1 
0 1 1 1 0 1 2 V C o 
n v o l u t i o n F 
i l t e r . _ _ init _ 
_ self kernel 一 使用 OpenCV 处理 图像 1 . 不同颜色 空间 的 
转换 OpenCV 中有 数百种 关于 在 不同 色彩 空间 之间 
转换 的 方法 当前 在 计算机 视觉 中 有三种 常用 
的 色彩 空间 灰度 BGR 以及 HSV Hue Saturation Value 
灰度 色彩 空间 是 通过 去除 彩色 信息 来 将其 
转换 为 灰阶 灰度 色彩 空间 对 中间 处理 特别 
有效 比如 人脸 检测 BGR 即 蓝 绿 红 色彩 
空间 每 一个 像素点 都由 一个 三元 数组 来 表示 
分别 代表 蓝 绿 红三/nr 种颜色 HSV H Hue 是 
色度 S Saturation 是 饱和度 V value 表示 黑暗 的 
程度 或 光谱 另一端 的 明亮 程度 BGR 的 简短 
说明 当 第一 次 处理 BGR 色彩 空 间时 可以 
不要 其中 的 一个 色彩 分量 比如 像素 值 0 
255 255 没有 蓝色 绿色 分量 取 最大值 红色 分量 
取 最大值 表示 黄色 2 . 傅里叶 变换 NumPy 有 
快速 傅里叶 变换 FFT 的 包 它 包含 了 fft2 
函数 该 函数 可以 计算 一幅 图像 的 离散 傅里叶 
变换 DFT 下面 通过 傅里叶 变换 来 介绍 图像 的 
幅度 谱 图像 的 幅度 谱 是 另一种 图像 幅度 
谱 图像 呈现 了 原始 图 像在 变换 方面 的 
一种 表示 把 一幅 图像 中 最 明亮 的 像素 
放到 图像 中央 然后 逐渐 变暗 在 边缘 上 的 
像素 最暗 这样/r 可以/c 发现/v 图像/n 中/f 有/v 多少/m 亮/v 
的/uj 像素/n 和暗的/nr 像素/n 以及 它们 分布 的 百分比 傅里叶 
变换 的 概念 是 边缘 检测 或 线段 和 形状 
检测 等 图像处理 操作 的 基础 2.1 高通 滤波器 高通 
滤波器 HPF 是 检测 图像 的 某个 区域 然后 根据 
像素 与 周围 像素 的 亮度 差值 来 提升 boost 
该 像素 的 亮度 的 滤波器 核 是 指 一组 
权重 的 集合 它 会 应用在 源 图像 的 一个 
区域 并 由此 生成 目标 图像 的 一个 像素 比如 
大小 为 7 的 核 意味着 每 49 7 x 
7 个 源 图像 的 像素 会 产生 目标 图像 
的 一个 像素 可把 核 看作 一块 覆盖 在 源 
图像 上 可移动 的 毛 玻璃片 玻璃片 覆盖 区域 的 
光线 会 按 某种 方式 进行 扩散 混合 后 透过去 
以 如下 的 核 kernal 为例 0 0.25 0 0.25 
1 0.25 0 0.25 0 在 计算 完 中央 像素 
与 周围 邻近 像素 的 亮度 差值 之和 以后 如果 
亮度 变化 很大 中央 像素 的 亮度 会 增加 反之 
则 不会 换句话说 如果 一个 像素 比 它 周围 的 
像素 更 突出 就会 提升 它 的 亮度 这在 边缘 
检测 上 尤其 有效 它 会 采用 一种 称为 高频 
提升 滤波器 high boost filter 的 高通 滤波器 高通/nr 和/c 
低通滤波器/n 都有/nr 一个/m 称为/v 半径/n radius 的 属性 它 决定 
了 多 大面积 的 邻近 像素 参与 滤波 计算 下面 
是 一个 高通 滤波器 的 例子 import cv2import numpy as 
npfrom scipy import ndimagekernal _ 3x3 = np . array 
1 1 1 1 8 1 1 1 1 kernal 
_ 5x5 = np . array 1 1 1 1 
1 1 1 2 1 1 1 2 4 2 
1 1 1 2 1 1 1 1 1 1 
1 # 使用 函数 cv2 . imread 读入 图像 这幅 
图像 应该 在此 程序 的 工作 路径 或者 给 函数 
提供 完整 路径 第二个 参数 是 要 告诉 函数 应该 
如何 读取 这幅 图片 #     • cv2 . 
IMREAD _ COLOR 读入 一副 彩色图像 图像 的 透明度 会被 
忽略 这是 默认 参数 #     • cv2 . 
IMREAD _ GRAYSCALE 以 灰度 模式 读入 图像 img = 
cv2 . imread LENA256 . bmp 0 # 注 此处 
后面 要 加上 0 表示 已 灰度 模式 读入 图像 
k3 = ndimage . convolve img kernal _ 3x3 # 
注 使用 ndimage . convolve 时 滤波 核 的 维度 
应与 原始 图像 的 维度 相同 故此 采用 灰度 图 
k5 = ndimage . convolve img kernal _ 5x5 blurred 
= cv2 . GaussianBlur img 11 11 0 g _ 
hpf = img blurredcv2 . imshow image img cv2 . 
imshow 3x3 k3 cv2 . imshow 5x5 k5 cv2 . 
imshow g _ hpf g _ hpf cv2 . waitKey 
cv2 . d e s t r o y A 
l l W i n d o w s 注 
这些 滤波器 中 的 所有 值 加 起来 为 0 
. 运行 结果 为 导入 模块 之后 我们 定义 一个 
3x3 和 一个 5x5 的 核 然后 将 读入 的 
图像 转换 为 灰度 格式 通常 大多数 的 图像 处理 
会用 NumPy 来 完成 但是 这里 的 情况 比较 特殊 
因为 需要 用 一个 给定 的 核 与 图像 进行 
卷积 convolve 但是 NumPy 碰巧 只 接受 一维 数组 ndimage 
的 convolve 函数 支持 经典 的 NumPy 数组 cv2 模块 
用 这种 数组 来 存储 图像 还有 一种 方法 可 
实现 高通 滤波器 通过 对 图像 应用 低通滤波器 之后 与 
原始 图像 计算 差值 2.2 低通滤波器 高通 滤波器 是 根据 
像素 与 邻近 像素 的 亮度 差值 来 提升 该 
像素 的 亮度 低通滤波器 Low Pass Filter LPF 则是 在 
像素 与 周围 像素 的 亮度 差值 小于 一个 特定 
值 时 平滑 该 像素 的 亮度 它 主要 用于 
去 噪 和 模糊 化 比如说 高斯 模糊 是 最 
常用 的 模糊 滤波器 平滑 滤波器 之一 它 是 一个 
削弱 高频信号 信息 强度 的 低通滤波器 3 . 边缘 检测 
OpenCV 提供 了 许多 边缘 检测 滤 波函数 包括 Laplacian 
Sobel 以及 Scharr 这些 滤 波函数 都会 将 非 边缘 
区域 转为 黑色 将 边缘 区域 转为 白色 或 其他 
饱和 的 颜色 但是 这些 函数 都 很容易 将 噪声 
错误 地 识别 为 边缘 缓解 这个 问题 的 方法 
是 在 找到 边缘 之前 对 图像 进行 模糊 处理 
OpenCV 也 提供 了 许多 模糊 滤 波函数 包括 blur 
简单 的 算术 平均 medianBlur 以及 GaussianBlur 边缘/n 检测/vn 滤/zg 
波函数/l 和/c 模糊/a 滤波/n 函数/n 的/uj 参数/n 有/v 很多/m 但 
总会 有 一个 ksize 参数 它 是 一个 奇数 表示 
滤波器 的 宽和 高 以 像素 为 单位 这里 使用 
medianBlur 作为 模糊 函数 它 对 去除 数字化 的 视频 
噪声 非常 有效 特别 是 去除 彩色图像 的 噪声 使用 
Laplacian 作为 边缘 检测 函数 它 会 产生 明显 的 
边缘 线条 灰度 图像 更是如此 在 使用 medianBlur 函数 之后 
将要 使用 Laplacian 函数 之前 需要 将 图像 从 BGR 
色彩 空间 转为 灰度 色彩 空间 在 得到 Laplacian 函数 
的 结果 之后 需要/v 将其/i 转换/v 成/n 黑色/n 边缘/n 和/c 
白色/n 背景/n 的/uj 图像/n 然后 将其 归一化 使 它 的 
像素 值 在 0 到 1 之间 并 乘以 源 
图像 以便 能将 边缘 变黑 注意 核 的 大小 可由 
strokeEdges 函数 的 参数 来 指定 blurKsize 参数 会 作为 
medianBlur 含糊 的 ksize 参数 edgeKsize 参数 会 作为 Laplacian 
函数 的 ksize 参数 对于 作者 的 摄像头 将 blurKsize 
值 设为 7 将 edgeKsize 值 设为 5 会 得到 
最好 的 效果 但 对于 较大 的 ksize 比如 7 
使用 medianBlur 的 代价 很高 如果 在 使用 strokeEdges 函数 
时 遇到 性能 问题 可 试着 减小 blurKsize 的 值 
要 关闭 模糊 效果 可以 将 blurKsize 的 值 设为 
3 以下 4 . 用 定制 内核 做 卷积 OpenCV 
预定义 的 许多 滤波器 滤 波函数 都会 使用 核 其实 
核 是 一组 权重 它 决定 如何 通过 邻近 像素点 
来 计算 新的 像素点 核 也 称为 卷积 矩阵 它 
对 一个 区域 的 像素 做 调和 mix up 或 
卷积 运算 通常 基于 核 的 滤波器 滤 波函数 被 
称为 卷积 滤波器 滤 波函数 OpenCV 提供 了 一个 非常 
通用 的 filter2D 函数 它 运用 由 用户 指定 的 
任意 核 或 卷积 矩阵 卷积 矩阵 是 一个 二维 
数组 有奇/nr 数行 奇 数列 中心 的 元素 对 应于 
感兴趣 的 像素 其他 的 元素 对应 于 这个 像素 
周围 的 邻近 像素 每个 元素 都 有一个 整数 或 
浮点数 的 值 这些 值 就是 应用在 像素 值 上 
的 权重 如 kernel = numpy . array 1 1 
1 1 9 1 1 1 1 其中 感兴趣 的 
像素 权 重为 9 其 邻近 像素 权 重为 1 
对 感兴趣 的 像素 来说 新的 像素 值 使用 当前 
像素 值 乘以 9 然后 减去 8个 邻近 像素 值 
如果 感兴趣 的 像素 已经 与其 邻近 像素 有一点 差别 
那么 这个 差别 会 增加 这样会 让 图像 锐化 因为 
该 像素 的 值 与 邻近 像素 值 之间 的 
差距 拉 大了 注意 权重 加 起来 为 1 如果 
不 想 改变 图像 的 亮度 就 应该 这样 如果 
稍微 修改 一下 锐化 核 使 它 的 权重 加 
起来 为 0 就会 得到 一个 边缘 检测 核 把 
边缘 转为 白色 把 非 边缘 区域 转为 黑色 在 
源 图像 和 目标 图像 上 分别 使用 卷积 矩阵 
cv2 . filter2D src 1 kernel dst . 第二个 参数 
指定 了 目标 图像 每个 通道 的 位 深度 比如 
位 深度 cv2 . CV _ 8U 表示 每个 通道 
为 8位 如果 为 负值 则/d 表示/v 目标/n 图像/n 和源/nr 
图像/n 有/v 同样/d 的/uj 位/q 深度/ns 注 对 彩色图像 来说 
filter2D 会对 每个 通道 都用/nr 同样 的 核 如果 要 
对 每个 通道 使用 不同 的 核 就 必须 用 
split 函数 和 merge 函数 对于 模糊 滤波器 为了 达到 
模糊 效果 通常 权重 和 应该 为 1 而且 邻近 
像素 的 权重 全为 正 锐化 边缘 检测 以及 模糊 
等 滤波器 都是 用了 高度 对称 的 核 但是 有时 
不 对称 的 核 也会 得到 一些 有趣 的 效果 
# V C o n v o l u t 
i o n F i l t e r 表示 
一般 的 滤波器 class V C o n v o 
l u t i o n F i l t 
e r object A filter that applies a convolution to 
V or all of BGR . def _ _ init 
_ _ self kernel self . _ kernel = kernel 
def apply self src dst Apply the filter with a 
BGR or gray source / destination . cv2 . filter2D 
src 1 self . _ kernel dst # SharpenFilter 表示 
特定 的 锐化 滤波器 class SharpenFilter V C o n 
v o l u t i o n F i 
l t e r A sharpen filter with a 1 
pixel radius . def _ _ init _ _ self 
kernel = numpy . array 1 1 1 1 9 
1 1 1 1 V C o n v o 
l u t i o n F i l t 
e r . _ _ init _ _ self kernel 
# 边缘 检测 滤波器 class FindEdgesFilter V C o n 
v o l u t i o n F i 
l t e r A edge finding filter with a 
1 pixel radius . def _ _ init _ _ 
self kernel = numpy . array 1 1 1 1 
8 1 1 1 1 V C o n v 
o l u t i o n F i l 
t e r . _ _ init _ _ self 
kernel # 邻近 平均 滤波器 class BlurFilter V C o 
n v o l u t i o n F 
i l t e r A edge finding filter with 
a 1 pixel radius . def _ _ init _ 
_ self kernel = numpy . array 0.04 0.04 0.04 
0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 
0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 
0.04 0.04 V C o n v o l u 
t i o n F i l t e r 
. _ _ init _ _ self kernel 下面 介绍 
一种 核 它 同时 具有 模糊 有正的/nr 权重 和 锐化 
有负的/nr 权重 的 作用 这 会 产生 一种 脊 状 
ridge 或者 浮雕 embossed 的 效果 class EmbossFilter V C 
o n v o l u t i o n 
F i l t e r A edge finding filter 
with a 1 pixel radius . def _ _ init 
_ _ self kernel = numpy . array 2 1 
0 1 1 1 0 1 2 V C o 
n v o l u t i o n F 
i l t e r . _ _ init _ 
_ self kernel 一 使用 OpenCV 处理 图像 1 . 不同颜色 空间 的 
转换 OpenCV 中有 数百种 关于 在 不同 色彩 空间 之间 
转换 的 方法 当前 在 计算机 视觉 中 有三种 常用 
的 色彩 空间 灰度 BGR 以及 HSV Hue Saturation Value 
灰度 色彩 空间 是 通过 去除 彩色 信息 来 将其 
转换 为 灰阶 灰度 色彩 空间 对 中间 处理 特别 
有效 比如 人脸 检测 BGR 即 蓝 绿 红 色彩 
空间 每 一个 像素点 都由 一个 三元 数组 来 表示 
分别 代表 蓝 绿 红三/nr 种颜色 HSV H Hue 是 
色度 S Saturation 是 饱和度 V value 表示 黑暗 的 
程度 或 光谱 另一端 的 明亮 程度 BGR 的 简短 
说明 当 第一 次 处理 BGR 色彩 空 间时 可以 
不要 其中 的 一个 色彩 分量 比如 像素 值 0 
255 255 没有 蓝色 绿色 分量 取 最大值 红色 分量 
取 最大值 表示 黄色 2 . 傅里叶 变换 NumPy 有 
快速 傅里叶 变换 FFT 的 包 它 包含 了 fft2 
函数 该 函数 可以 计算 一幅 图像 的 离散 傅里叶 
变换 DFT 下面 通过 傅里叶 变换 来 介绍 图像 的 
幅度 谱 图像 的 幅度 谱 是 另一种 图像 幅度 
谱 图像 呈现 了 原始 图 像在 变换 方面 的 
一种 表示 把 一幅 图像 中 最 明亮 的 像素 
放到 图像 中央 然后 逐渐 变暗 在 边缘 上 的 
像素 最暗 这样/r 可以/c 发现/v 图像/n 中/f 有/v 多少/m 亮/v 
的/uj 像素/n 和暗的/nr 像素/n 以及 它们 分布 的 百分比 傅里叶 
变换 的 概念 是 边缘 检测 或 线段 和 形状 
检测 等 图像处理 操作 的 基础 2.1 高通 滤波器 高通 
滤波器 HPF 是 检测 图像 的 某个 区域 然后 根据 
像素 与 周围 像素 的 亮度 差值 来 提升 boost 
该 像素 的 亮度 的 滤波器 核 是 指 一组 
权重 的 集合 它 会 应用在 源 图像 的 一个 
区域 并 由此 生成 目标 图像 的 一个 像素 比如 
大小 为 7 的 核 意味着 每 49 7 x 
7 个 源 图像 的 像素 会 产生 目标 图像 
的 一个 像素 可把 核 看作 一块 覆盖 在 源 
图像 上 可移动 的 毛 玻璃片 玻璃片 覆盖 区域 的 
光线 会 按 某种 方式 进行 扩散 混合 后 透过去 
以 如下 的 核 kernal 为例 0 0.25 0 0.25 
1 0.25 0 0.25 0 在 计算 完 中央 像素 
与 周围 邻近 像素 的 亮度 差值 之和 以后 如果 
亮度 变化 很大 中央 像素 的 亮度 会 增加 反之 
则 不会 换句话说 如果 一个 像素 比 它 周围 的 
像素 更 突出 就会 提升 它 的 亮度 这在 边缘 
检测 上 尤其 有效 它 会 采用 一种 称为 高频 
提升 滤波器 high boost filter 的 高通 滤波器 高通/nr 和/c 
低通滤波器/n 都有/nr 一个/m 称为/v 半径/n radius 的 属性 它 决定 
了 多 大面积 的 邻近 像素 参与 滤波 计算 下面 
是 一个 高通 滤波器 的 例子 import cv2import numpy as 
npfrom scipy import ndimagekernal _ 3x3 = np . array 
1 1 1 1 8 1 1 1 1 kernal 
_ 5x5 = np . array 1 1 1 1 
1 1 1 2 1 1 1 2 4 2 
1 1 1 2 1 1 1 1 1 1 
1 # 使用 函数 cv2 . imread 读入 图像 这幅 
图像 应该 在此 程序 的 工作 路径 或者 给 函数 
提供 完整 路径 第二个 参数 是 要 告诉 函数 应该 
如何 读取 这幅 图片 #     • cv2 . 
IMREAD _ COLOR 读入 一副 彩色图像 图像 的 透明度 会被 
忽略 这是 默认 参数 #     • cv2 . 
IMREAD _ GRAYSCALE 以 灰度 模式 读入 图像 img = 
cv2 . imread LENA256 . bmp 0 # 注 此处 
后面 要 加上 0 表示 已 灰度 模式 读入 图像 
k3 = ndimage . convolve img kernal _ 3x3 # 
注 使用 ndimage . convolve 时 滤波 核 的 维度 
应与 原始 图像 的 维度 相同 故此 采用 灰度 图 
k5 = ndimage . convolve img kernal _ 5x5 blurred 
= cv2 . GaussianBlur img 11 11 0 g _ 
hpf = img blurredcv2 . imshow image img cv2 . 
imshow 3x3 k3 cv2 . imshow 5x5 k5 cv2 . 
imshow g _ hpf g _ hpf cv2 . waitKey 
cv2 . d e s t r o y A 
l l W i n d o w s 注 
这些 滤波器 中 的 所有 值 加 起来 为 0 
. 运行 结果 为 导入 模块 之后 我们 定义 一个 
3x3 和 一个 5x5 的 核 然后 将 读入 的 
图像 转换 为 灰度 格式 通常 大多数 的 图像 处理 
会用 NumPy 来 完成 但是 这里 的 情况 比较 特殊 
因为 需要 用 一个 给定 的 核 与 图像 进行 
卷积 convolve 但是 NumPy 碰巧 只 接受 一维 数组 ndimage 
的 convolve 函数 支持 经典 的 NumPy 数组 cv2 模块 
用 这种 数组 来 存储 图像 还有 一种 方法 可 
实现 高通 滤波器 通过 对 图像 应用 低通滤波器 之后 与 
原始 图像 计算 差值 2.2 低通滤波器 高通 滤波器 是 根据 
像素 与 邻近 像素 的 亮度 差值 来 提升 该 
像素 的 亮度 低通滤波器 Low Pass Filter LPF 则是 在 
像素 与 周围 像素 的 亮度 差值 小于 一个 特定 
值 时 平滑 该 像素 的 亮度 它 主要 用于 
去 噪 和 模糊 化 比如说 高斯 模糊 是 最 
常用 的 模糊 滤波器 平滑 滤波器 之一 它 是 一个 
削弱 高频信号 信息 强度 的 低通滤波器 3 . 边缘 检测 
OpenCV 提供 了 许多 边缘 检测 滤 波函数 包括 Laplacian 
Sobel 以及 Scharr 这些 滤 波函数 都会 将 非 边缘 
区域 转为 黑色 将 边缘 区域 转为 白色 或 其他 
饱和 的 颜色 但是 这些 函数 都 很容易 将 噪声 
错误 地 识别 为 边缘 缓解 这个 问题 的 方法 
是 在 找到 边缘 之前 对 图像 进行 模糊 处理 
OpenCV 也 提供 了 许多 模糊 滤 波函数 包括 blur 
简单 的 算术 平均 medianBlur 以及 GaussianBlur 边缘/n 检测/vn 滤/zg 
波函数/l 和/c 模糊/a 滤波/n 函数/n 的/uj 参数/n 有/v 很多/m 但 
总会 有 一个 ksize 参数 它 是 一个 奇数 表示 
滤波器 的 宽和 高 以 像素 为 单位 这里 使用 
medianBlur 作为 模糊 函数 它 对 去除 数字化 的 视频 
噪声 非常 有效 特别 是 去除 彩色图像 的 噪声 使用 
Laplacian 作为 边缘 检测 函数 它 会 产生 明显 的 
边缘 线条 灰度 图像 更是如此 在 使用 medianBlur 函数 之后 
将要 使用 Laplacian 函数 之前 需要 将 图像 从 BGR 
色彩 空间 转为 灰度 色彩 空间 在 得到 Laplacian 函数 
的 结果 之后 需要/v 将其/i 转换/v 成/n 黑色/n 边缘/n 和/c 
白色/n 背景/n 的/uj 图像/n 然后 将其 归一化 使 它 的 
像素 值 在 0 到 1 之间 并 乘以 源 
图像 以便 能将 边缘 变黑 注意 核 的 大小 可由 
strokeEdges 函数 的 参数 来 指定 blurKsize 参数 会 作为 
medianBlur 含糊 的 ksize 参数 edgeKsize 参数 会 作为 Laplacian 
函数 的 ksize 参数 对于 作者 的 摄像头 将 blurKsize 
值 设为 7 将 edgeKsize 值 设为 5 会 得到 
最好 的 效果 但 对于 较大 的 ksize 比如 7 
使用 medianBlur 的 代价 很高 如果 在 使用 strokeEdges 函数 
时 遇到 性能 问题 可 试着 减小 blurKsize 的 值 
要 关闭 模糊 效果 可以 将 blurKsize 的 值 设为 
3 以下 4 . 用 定制 内核 做 卷积 OpenCV 
预定义 的 许多 滤波器 滤 波函数 都会 使用 核 其实 
核 是 一组 权重 它 决定 如何 通过 邻近 像素点 
来 计算 新的 像素点 核 也 称为 卷积 矩阵 它 
对 一个 区域 的 像素 做 调和 mix up 或 
卷积 运算 通常 基于 核 的 滤波器 滤 波函数 被 
称为 卷积 滤波器 滤 波函数 OpenCV 提供 了 一个 非常 
通用 的 filter2D 函数 它 运用 由 用户 指定 的 
任意 核 或 卷积 矩阵 卷积 矩阵 是 一个 二维 
数组 有奇/nr 数行 奇 数列 中心 的 元素 对 应于 
感兴趣 的 像素 其他 的 元素 对应 于 这个 像素 
周围 的 邻近 像素 每个 元素 都 有一个 整数 或 
浮点数 的 值 这些 值 就是 应用在 像素 值 上 
的 权重 如 kernel = numpy . array 1 1 
1 1 9 1 1 1 1 其中 感兴趣 的 
像素 权 重为 9 其 邻近 像素 权 重为 1 
对 感兴趣 的 像素 来说 新的 像素 值 使用 当前 
像素 值 乘以 9 然后 减去 8个 邻近 像素 值 
如果 感兴趣 的 像素 已经 与其 邻近 像素 有一点 差别 
那么 这个 差别 会 增加 这样会 让 图像 锐化 因为 
该 像素 的 值 与 邻近 像素 值 之间 的 
差距 拉 大了 注意 权重 加 起来 为 1 如果 
不 想 改变 图像 的 亮度 就 应该 这样 如果 
稍微 修改 一下 锐化 核 使 它 的 权重 加 
起来 为 0 就会 得到 一个 边缘 检测 核 把 
边缘 转为 白色 把 非 边缘 区域 转为 黑色 在 
源 图像 和 目标 图像 上 分别 使用 卷积 矩阵 
cv2 . filter2D src 1 kernel dst . 第二个 参数 
指定 了 目标 图像 每个 通道 的 位 深度 比如 
位 深度 cv2 . CV _ 8U 表示 每个 通道 
为 8位 如果 为 负值 则/d 表示/v 目标/n 图像/n 和源/nr 
图像/n 有/v 同样/d 的/uj 位/q 深度/ns 注 对 彩色图像 来说 
filter2D 会对 每个 通道 都用/nr 同样 的 核 如果 要 
对 每个 通道 使用 不同 的 核 就 必须 用 
split 函数 和 merge 函数 对于 模糊 滤波器 为了 达到 
模糊 效果 通常 权重 和 应该 为 1 而且 邻近 
像素 的 权重 全为 正 锐化 边缘 检测 以及 模糊 
等 滤波器 都是 用了 高度 对称 的 核 但是 有时 
不 对称 的 核 也会 得到 一些 有趣 的 效果 
# V C o n v o l u t 
i o n F i l t e r 表示 
一般 的 滤波器 class V C o n v o 
l u t i o n F i l t 
e r object A filter that applies a convolution to 
V or all of BGR . def _ _ init 
_ _ self kernel self . _ kernel = kernel 
def apply self src dst Apply the filter with a 
BGR or gray source / destination . cv2 . filter2D 
src 1 self . _ kernel dst # SharpenFilter 表示 
特定 的 锐化 滤波器 class SharpenFilter V C o n 
v o l u t i o n F i 
l t e r A sharpen filter with a 1 
pixel radius . def _ _ init _ _ self 
kernel = numpy . array 1 1 1 1 9 
1 1 1 1 V C o n v o 
l u t i o n F i l t 
e r . _ _ init _ _ self kernel 
# 边缘 检测 滤波器 class FindEdgesFilter V C o n 
v o l u t i o n F i 
l t e r A edge finding filter with a 
1 pixel radius . def _ _ init _ _ 
self kernel = numpy . array 1 1 1 1 
8 1 1 1 1 V C o n v 
o l u t i o n F i l 
t e r . _ _ init _ _ self 
kernel # 邻近 平均 滤波器 class BlurFilter V C o 
n v o l u t i o n F 
i l t e r A edge finding filter with 
a 1 pixel radius . def _ _ init _ 
_ self kernel = numpy . array 0.04 0.04 0.04 
0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 
0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 
0.04 0.04 V C o n v o l u 
t i o n F i l t e r 
. _ _ init _ _ self kernel 下面 介绍 
一种 核 它 同时 具有 模糊 有正的/nr 权重 和 锐化 
有负的/nr 权重 的 作用 这 会 产生 一种 脊 状 
ridge 或者 浮雕 embossed 的 效果 class EmbossFilter V C 
o n v o l u t i o n 
F i l t e r A edge finding filter 
with a 1 pixel radius . def _ _ init 
_ _ self kernel = numpy . array 2 1 
0 1 1 1 0 1 2 V C o 
n v o l u t i o n F 
i l t e r . _ _ init _ 
_ self kernel 