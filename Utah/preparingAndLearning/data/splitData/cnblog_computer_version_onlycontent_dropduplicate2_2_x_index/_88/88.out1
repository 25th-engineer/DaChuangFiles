Github 地址 Mask _ RCNN 计算机 视觉 Mask RCNN _ 
论文 学习 计算机 视觉 Mask RCNN _ 项目 文档 翻译 
计算机 视觉 Mask RCNN _ 推断 网络 其一 总览 计算机 
视觉 Mask RCNN _ 推断 网络 其二 基于 ReNet101 的 
FPN 共享 网络 计算机 视觉 Mask RCNN _ 推断 网络 
其三 RPN 锚 框 处理 和 Proposal 生成 计算机 视觉 
Mask RCNN _ 推断 网络 其四 FPN 和 ROIAlign 的 
耦合 计算机 视觉 Mask RCNN _ 推断 网络 其五 目标 
检测 结果 精炼 计算机 视觉 Mask RCNN _ 推断 网络 
其 六 Mask 生成 计算机 视觉 Mask RCNN _ 推断 
网络 终篇 使用 detect 方法 进行 推断 计算机 视觉 Mask 
RCNN _ 锚 框 生成 计算机 视觉 Mask RCNN _ 
训练 网络 其一 数据集 与 Dataset 类 计算机 视觉 Mask 
RCNN _ 训练 网络 其二 train 网络结构 & 损失 函数 
计算机 视觉 Mask RCNN _ 训练 网络 其三 训练 Model 
本节 介绍 的 数据集 class 构建 为 官方 demo 对 
从零开始 构建 自己 的 数据集 训练 感兴趣 的 建议 了解 
了 本文 及 本文 对应 的 代码 文件 后 看一下 
计算机 视觉 Mask RCNN _ 关键点 检测 分支 介绍 了 
由 自己 的 数据 构建 Mask RCNN 可用 形式 的 
实践 代码 位置 在 脚本 train _ shapes . ipynb 
中 作者 演示 了 使用 合成 图片 进行 训练 Mask 
_ RCNN 的 小 demo 我们 将 以此 为例 从 
训练 数据 的 角度 重新 审视 Mask _ RCNN 在 
训练 过程 中 我们 最先 要做 的 根据 我们 自己 
的 数据集 集成 改写 基础 的 数据 读取 class util 
. py 中的 Dataset class 然后 根据 数据集 调整 网络 
配置文件 配置 config . py 中的 Config 类 使得 网络 
形状 配 适 数 然后再 去 考虑 训练 的 问题 
按照 逻辑 流程 本节 我们 以 train _ shapes . 
ipynb 中 的 数据 生成 为例 学习 Dataset class 的 
运作 机理 在 示例 程序 中 首先 创建 新的 Dataset 
的 子类 这里 贴出 整个 class 代码 后 面会 分节 
讲解 class ShapesDataset utils . Dataset Generates the shapes synthetic 
dataset . The dataset consists of simple shapes triangles squares 
circles placed randomly on a blank surface . The images 
are generated on the fly . No file access required 
. def load _ shapes self count height width Generate 
the requested number of synthetic images . count number of 
images to generate . height width the size of the 
generated images . # Add classes self . add _ 
class shapes 1 square self . add _ class shapes 
2 circle self . add _ class shapes 3 triangle 
# Add images # Generate random specifications of images i 
. e . color and # list of shapes sizes 
and locations . This is more compact than # actual 
images . Images are generated on the fly in load 
_ image . for i in range count bg _ 
color shapes = self . random _ image height width 
self . add _ image shapes image _ id = 
i path = None width = width height = height 
bg _ color = bg _ color shapes = shapes 
def load _ image self image _ id Generate an 
image from the specs of the given image ID . 
Typically this function loads the image from a file but 
in this case it generates the image on the fly 
from the specs in image _ info . info = 
self . image _ info image _ id bg _ 
color = np . array info bg _ color . 
reshape 1 1 3 image = np . ones info 
height info width 3 dtype = np . uint8 image 
= image * bg _ color . astype np . 
uint8 for shape color dims in info shapes image = 
self . draw _ shape image shape dims color return 
image def image _ reference self image _ id Return 
the shapes data of the image . info = self 
. image _ info image _ id if info source 
= = shapes return info shapes else super self . 
_ _ class _ _ . image _ reference self 
image _ id def load _ mask self image _ 
id Generate instance masks for shapes of the given image 
ID . info = self . image _ info image 
_ id shapes = info shapes count = len shapes 
mask = np . zeros info height info width count 
dtype = np . uint8 for i shape _ dims 
in enumerate info shapes mask i i + 1 = 
self . draw _ shape mask i i + 1 
. copy shape dims 1 # Handle occlusions occlusion = 
np . logical _ not mask 1 . astype np 
. uint8 for i in range count 2 1 1 
mask i = mask i * occlusion occlusion = np 
. logical _ and occlusion np . logical _ not 
mask i # Map class names to class IDs . 
class _ ids = np . array self . class 
_ names . index s 0 for s in shapes 
return mask . astype np . bool class _ ids 
. astype np . int32 def draw _ shape self 
image shape dims color Draws a shape from the given 
specs . # Get the center x y and the 
size s x y s = dims if shape = 
= square cv2 . rectangle image x s y s 
x + s y + s color 1 elif shape 
= = circle cv2 . circle image x y s 
color 1 elif shape = = triangle points = np 
. array x y s x s / math . 
sin math . radians 60 y + s x + 
s / math . sin math . radians 60 y 
+ s dtype = np . int32 cv2 . fillPoly 
image points color return image def random _ shape self 
height width Generates specifications of a random shape that lies 
within the given height and width boundaries . Returns a 
tuple of three valus * The shape name square circle 
. . . * Shape color a tuple of 3 
values RGB . * Shape dimensions A tuple of values 
that define the shape size and location . Differs per 
shape type . # Shape shape = random . choice 
square circle triangle # Color color = tuple random . 
randint 0 255 for _ in range 3 # Center 
x y buffer = 20 y = random . randint 
buffer height buffer 1 x = random . randint buffer 
width buffer 1 # Size s = random . randint 
buffer height / / 4 return shape color x y 
s def random _ image self height width Creates random 
specifications of an image with multiple shapes . Returns the 
background color of the image and a list of shape 
specifications that can be used to draw the image . 
# Pick random background color bg _ color = np 
. array random . randint 0 255 for _ in 
range 3 # Generate a few random shapes and record 
their # bounding boxes shapes = boxes = N = 
random . randint 1 4 for _ in range N 
shape color dims = self . random _ shape height 
width shapes . append shape color dims x y s 
= dims boxes . append y s x s y 
+ s x + s # Apply non max suppression 
wit 0.3 threshold to avoid # shapes covering each other 
keep _ ixs = utils . non _ max _ 
suppression np . array boxes np . arange N 0.3 
shapes = s for i s in enumerate shapes if 
i in keep _ ixs return bg _ color shapes 
一 原始数据 信息 录入 然后 调用 如下 方法 IMAGE _ 
SHAPE = 128 128 3 介绍 config 时会 提到 准备 
训练 用 数据 和 验证 集 数据 注意 此时 仅仅 
是 在 做准备 并未 真实 的 生成 或 读入 图片 
数据 # Training dataset dataset _ train = ShapesDataset dataset 
_ train . load _ shapes 500 config . IMAGE 
_ SHAPE 0 config . IMAGE _ SHAPE 1 dataset 
_ train . prepare # Validation dataset dataset _ val 
= ShapesDataset dataset _ val . load _ shapes 50 
config . IMAGE _ SHAPE 0 config . IMAGE _ 
SHAPE 1 dataset _ val . prepare 其 调用 的 
load _ shapes 方法 如下 def load _ shapes self 
count height width Generate the requested number of synthetic images 
. count number of images to generate . height width 
the size of the generated images . # Add classes 
self . add _ class shapes 1 square self . 
add _ class shapes 2 circle self . add _ 
class shapes 3 triangle # Add images # Generate random 
specifications of images i . e . color and # 
list of shapes sizes and locations . This is more 
compact than # actual images . Images are generated on 
the fly in load _ image . for i in 
range count bg _ color shapes = self . random 
_ image height width self . add _ image shapes 
image _ id = i path = None width = 
width height = height bg _ color = bg _ 
color shapes = shapes 这里 涉及 了 两个 父 类 
继承 来 的 方法 self . add _ class 和 
self . add _ image 我们 去 util . py 
中的 Dataset class 看一看 class Dataset object The base class 
for dataset classes . To use it create a new 
class that adds functions specific to the dataset you want 
to use . For example class C a t s 
A n d D o g s D a t 
a s e t Dataset def load _ cats _ 
and _ dogs self . . . def load _ 
mask self image _ id . . . def image 
_ reference self image _ id . . . See 
COCODataset and ShapesDataset as examples . def _ _ init 
_ _ self class _ map = None self . 
_ image _ ids = self . image _ info 
= # Background is always the first class self . 
class _ info = { source id 0 name BG 
} self . source _ class _ ids = { 
} def add _ class self source class _ id 
class _ name assert . not in source Source name 
cannot contain a dot # Does the class exist already 
for info in self . class _ info if info 
source = = source and info id = = class 
_ id # source . class _ id combination already 
available skip return # Add the class self . class 
_ info . append { source source id class _ 
id name class _ name } def add _ image 
self source image _ id path * * kwargs image 
_ info = { id image _ id source source 
path path } image _ info . update kwargs self 
. image _ info . append image _ info 也 
就是说 在 Dataset 中有 self . image _ info 和 
self . class _ info 两个 list 它们 的 元素 
都是/nr 固定 key 的 字典 source 对应 数据集 名称 id 
对应 本 数据集 内 当前 图片 / 类别 标号 path 
仅 image _ info 含有 对应 图像 路径 可为 None 
name 仅 class _ info 含有 对应 类别 描述 在 
后面 的 prepare 方法 中 我们 可以 进一步 了解 使用 
source . id 作 key 可以 索引 到 一个 内建 
的 新的 internal id 这也 像 我们 解释 了 为什么 
文档 中说 Mask _ RCNN 支持 多个 数据集 同时 训练 
的 由来 回到 load _ shapes 方法 self . random 
_ image 方法 为 新建 方法 这里 作者 使用 算法 
生成 图像 做 训练 该 方法 返回 生成 图像 函数 
所需 的 随机 参数 之后 调用 add _ image 时 
传入 path 为 None 也 是因为 数据 并非 从 磁盘 
读取 而是 自己 生成 并 传入 了 额外 的 self 
. random _ image 方法 返回 的 生成 参数 我们 
不必 关系 具体 参数 是 什么 作为 字典 参数 解读 
添 加进 self . image _ info 中 for i 
in range count bg _ color shapes = self . 
random _ image height width self . add _ image 
shapes image _ id = i path = None width 
= width height = height bg _ color = bg 
_ color shapes = shapes 从 这里 我们 进一步 了解 
了 self . image _ info 的 含义 记录 每 
一张 图片 的 id 信息 source 和 id 记录 每 
一张 图片 的 数据 信息 如何 获取 图像 矩阵 的 
线索 包含 path 或者 其他 的 字典 索引 只要 保证 
后面 能 实现 函数 根据 这个 信息 获取 图片 数据 
即可 二 数据 信息 整理 在 初始 化了 self . 
image _ info 和 self . class _ info 两个 
list 之后 Dataset 已经 记录 了 原始 的 类别 信息 
和 图像 信息 调用 prepare 方法 进行 规范化 def prepare 
self class _ map = None Prepares the Dataset class 
for use . TODO class map is not supported yet 
. When done it should handle mapping classes from different 
datasets to the same class ID . def clean _ 
name name Returns a shorter version of object names for 
cleaner display . return . join name . split 1 
# Build or rebuild everything else from the info dicts 
. self . num _ classes = len self . 
class _ info # 类别 数目 self . class _ 
ids = np . arange self . num _ classes 
# internal 类别 IDs self . class _ names = 
clean _ name c name for c in self . 
class _ info # 类 别名 简洁 版 self . 
num _ images = len self . image _ info 
# 图片 数目 self . _ image _ ids = 
np . arange self . num _ images # internal 
类别 IDs # Mapping from source class and image IDs 
to internal IDs self . class _ from _ source 
_ map = { { } . { } . 
format info source info id id for info id in 
zip self . class _ info self . class _ 
ids } self . image _ from _ source _ 
map = { { } . { } . format 
info source info id id for info id in zip 
self . image _ info self . image _ ids 
} # Map sources to class _ ids they support 
self . sources = list set i source for i 
in self . class _ info self . source _ 
class _ ids = { } # source 对应 的 
internal 类别 IDs # Loop over datasets for source in 
self . sources self . source _ class _ ids 
source = # Find classes that belong to this dataset 
for i info in enumerate self . class _ info 
# Include BG class in all datasets if i = 
= 0 or source = = info source self . 
source _ class _ ids source . append i 类别 
信息 记录 将 source . id 映射 为 唯一 的 
internal IDs 并将 全部 的 internal IDs 存储 在 self 
. class _ idssource _ class _ ids 记录 下 
每一个 source 对应 的 internal IDsclass _ from _ source 
_ map 记录 下 source . id internal IDs 的 
映射 关系 print dataset _ train . class _ info 
# 每个 类别 原始 信息 print dataset _ train . 
class _ ids # 记录 类别 internal IDs print dataset 
_ train . source _ class _ ids # 每个 
数据集 对应 的 internal IDs print dataset _ train . 
class _ from _ source _ map # 原始 信息 
和 internal ID 映射 关系 输出 如下 { source id 
0 name BG } { source shapes id 1 name 
square } { source shapes id 2 name circle } 
{ source shapes id 3 name triangle } 0 1 
2 3 { 0 shapes 0 1 2 3 } 
{ . 0 0 shapes . 1 1 shapes . 
2 2 shapes . 3 3/m }/i 有/v 固定/a 的/uj 
source/w 为/p 空的/nr 类别/n 0/m id 和 internal ID 都是 
标记 为 背景 会 添加 进 source _ class _ 
ids 中 全部 的 数据 集 对应 的 类别 中 
上面 shape 数据集 我们 仅 定义 了 3个 类 在 
映 射中 多 了 一个 0 变成 4个 类 图片 
信息 记录 图片 信息 不像 类别 一样 麻烦 我们 简单 
输出 三张 # Training dataset dataset _ train = ShapesDataset 
dataset _ train . load _ shapes 3 config . 
IMAGE _ SHAPE 0 config . IMAGE _ SHAPE 1 
dataset _ train . prepare print dataset _ train . 
image _ info # 记录 图像 原始 信息 print dataset 
_ train . image _ ids # 记录 图像 internal 
IDs print dataset _ train . image _ from _ 
source _ map # 原始 信息 和 internal ID 对应 
关系 结果 如下 { id 0 source shapes path None 
width 128 height 128 bg _ color array 163 143 
173 shapes circle 178 140 65 83 104 20 circle 
192 52 82 48 58 20 } { id 1 
source shapes path None width 128 height 128 bg _ 
color array 5 99 71 shapes triangle 90 32 55 
39 21 22 circle 214 49 173 39 78 21 
} { id 2 source shapes path None width 128 
height 128 bg _ color array 138 52 83 shapes 
circle 180 74 150 105 45 27 } 0 1 
2 { shapes . 0 0 shapes . 1 1 
shapes . 2 2 } 注 1 由于 这 是 
图像 检测 任务 而非 图像 分类 任务 故 每张 图片 
仅仅 和 归属 数据集 存在 映射 和 类别 信息 没有 
直接 映射 图像 上 的 目标 和 类别 才 存在 
映射 关系 不过 那 不在 本 部分 函数 涉及 范围 
内 注 2 internal IDs 实际上 就是 info 的 索引 
数组 使用 internal IDs 的 值 可以 直接 索引 对应 
图片 顺序 的 info 信息 总结 在 调用 self . 
prepare 之前 通过 自己 的 新建 方法 调用 self . 
add _ class 和 self . add _ image 将 
图片 和 分类 的 原始 信息 以 dict 的 形式 
添加到 class _ info 与 image _ info 两个 list 
中 即可 三 获取 图片 然后 我们 获取 一些 样例 
图片 进行 展示 # Load and display random samples image 
_ ids = np . random . choice dataset _ 
train . image _ ids 4 for image _ id 
in image _ ids image = dataset _ train . 
load _ image image _ id mask class _ ids 
= dataset _ train . load _ mask image _ 
id visualize . display _ top _ masks image mask 
class _ ids dataset _ train . class _ names 
print image . shape mask . shape class _ ids 
dataset _ train . class _ names 由 上面 代码 
我们 可以 获悉 如下 信息 使用 self . image . 
ids 即 internal IDs 进行 图片 选取 自行 实现 load 
_ image 方法 获取 图片 internal IDs 索引 图片 原始 
信息 info 利用 原始 信息 输出 图片 自行 实现 load 
_ mask 方法 获取 图片 internal IDs 索引 图片 原始 
信息 info 利用 原始 信息 输出 图片 的 masks 和 
对应 internal 类别 注意 一张 图片 可以 有 多个 mask 
并 分别 对应 自己 的 类别 上述 代码 输出 如下 
仅 展示 前 两张 下面 贴出 load _ image 和 
load _ mask 方法 详见 train _ shapes . ipynb 
具体 实现 不是 重点 毕竟 我们 也 不是 在 研究 
怎么 画 2D 图 重点 在于 上面 提到 的 它们 
的 功能 这 涉及 到 我们 迁移 到 自己 的 
数据 时 如何 实现 接口 load _ image 方法 返回 
一张 图片 load _ mask 方法 返回 h w c 
的 01 掩码 以及 c 的 class id 注意 c 
指 的 是 盖章 图片 中 instance 的 数目 def 
load _ image self image _ id Generate an image 
from the specs of the given image ID . Typically 
this function loads the image from a file but in 
this case it generates the image on the fly from 
the specs in image _ info . info = self 
. image _ info image _ id bg _ color 
= np . array info bg _ color . reshape 
1 1 3 image = np . ones info height 
info width 3 dtype = np . uint8 image = 
image * bg _ color . astype np . uint8 
for shape color dims in info shapes image = self 
. draw _ shape image shape dims color return image 
def load _ mask self image _ id Generate instance 
masks for shapes of the given image ID . info 
= self . image _ info image _ id shapes 
= info shapes count = len shapes mask = np 
. zeros info height info width count dtype = np 
. uint8 for i shape _ dims in enumerate info 
shapes mask i i + 1 = self . draw 
_ shape mask i i + 1 . copy shape 
dims 1 # Handle occlusions occlusion = np . logical 
_ not mask 1 . astype np . uint8 for 
i in range count 2 1 1 mask i = 
mask i * occlusion occlusion = np . logical _ 
and occlusion np . logical _ not mask i # 
Map class names to class IDs . class _ ids 
= np . array self . class _ names . 
index s 0 for s in shapes return mask . 
astype np . bool class _ ids . astype np 
. int32 小结 正如 Dataset 注释 所说 要想 运行 自己 
的 数据集 我们 首先 要 实现 一个 方法 load _ 
shapes 根据 数据集 取名 即可 收集 原始 图像 类别 信息 
然后 实现 两个 方法 load _ image load _ mask 
分别 实现 获取 单张 图片 数据 获取 单张 图片 对应 
的 objs 的 masks 和 classes 这样 基本 完成 了 
数据集 类 的 构建 The base class for dataset classes 
. To use it create a new class that adds 
functions specific to the datasetyou want to use . For 
example class C a t s A n d D 
o g s D a t a s e t 
Dataset def load _ cats _ and _ dogs self 
. . . def load _ mask self image _ 
id . . . def image _ reference self image 
_ id . . . See COCODataset and ShapesDataset as 
examples . Github 地址 Mask _ RCNN 计算机 视觉 Mask RCNN _ 
论文 学习 计算机 视觉 Mask RCNN _ 项目 文档 翻译 
计算机 视觉 Mask RCNN _ 推断 网络 其一 总览 计算机 
视觉 Mask RCNN _ 推断 网络 其二 基于 ReNet101 的 
FPN 共享 网络 计算机 视觉 Mask RCNN _ 推断 网络 
其三 RPN 锚 框 处理 和 Proposal 生成 计算机 视觉 
Mask RCNN _ 推断 网络 其四 FPN 和 ROIAlign 的 
耦合 计算机 视觉 Mask RCNN _ 推断 网络 其五 目标 
检测 结果 精炼 计算机 视觉 Mask RCNN _ 推断 网络 
其 六 Mask 生成 计算机 视觉 Mask RCNN _ 推断 
网络 终篇 使用 detect 方法 进行 推断 计算机 视觉 Mask 
RCNN _ 锚 框 生成 计算机 视觉 Mask RCNN _ 
训练 网络 其一 数据集 与 Dataset 类 计算机 视觉 Mask 
RCNN _ 训练 网络 其二 train 网络结构 & 损失 函数 
计算机 视觉 Mask RCNN _ 训练 网络 其三 训练 Model 
本节 介绍 的 数据集 class 构建 为 官方 demo 对 
从零开始 构建 自己 的 数据集 训练 感兴趣 的 建议 了解 
了 本文 及 本文 对应 的 代码 文件 后 看一下 
计算机 视觉 Mask RCNN _ 关键点 检测 分支 介绍 了 
由 自己 的 数据 构建 Mask RCNN 可用 形式 的 
实践 代码 位置 在 脚本 train _ shapes . ipynb 
中 作者 演示 了 使用 合成 图片 进行 训练 Mask 
_ RCNN 的 小 demo 我们 将 以此 为例 从 
训练 数据 的 角度 重新 审视 Mask _ RCNN 在 
训练 过程 中 我们 最先 要做 的 根据 我们 自己 
的 数据集 集成 改写 基础 的 数据 读取 class util 
. py 中的 Dataset class 然后 根据 数据集 调整 网络 
配置文件 配置 config . py 中的 Config 类 使得 网络 
形状 配 适 数 然后再 去 考虑 训练 的 问题 
按照 逻辑 流程 本节 我们 以 train _ shapes . 
ipynb 中 的 数据 生成 为例 学习 Dataset class 的 
运作 机理 在 示例 程序 中 首先 创建 新的 Dataset 
的 子类 这里 贴出 整个 class 代码 后 面会 分节 
讲解 class ShapesDataset utils . Dataset Generates the shapes synthetic 
dataset . The dataset consists of simple shapes triangles squares 
circles placed randomly on a blank surface . The images 
are generated on the fly . No file access required 
. def load _ shapes self count height width Generate 
the requested number of synthetic images . count number of 
images to generate . height width the size of the 
generated images . # Add classes self . add _ 
class shapes 1 square self . add _ class shapes 
2 circle self . add _ class shapes 3 triangle 
# Add images # Generate random specifications of images i 
. e . color and # list of shapes sizes 
and locations . This is more compact than # actual 
images . Images are generated on the fly in load 
_ image . for i in range count bg _ 
color shapes = self . random _ image height width 
self . add _ image shapes image _ id = 
i path = None width = width height = height 
bg _ color = bg _ color shapes = shapes 
def load _ image self image _ id Generate an 
image from the specs of the given image ID . 
Typically this function loads the image from a file but 
in this case it generates the image on the fly 
from the specs in image _ info . info = 
self . image _ info image _ id bg _ 
color = np . array info bg _ color . 
reshape 1 1 3 image = np . ones info 
height info width 3 dtype = np . uint8 image 
= image * bg _ color . astype np . 
uint8 for shape color dims in info shapes image = 
self . draw _ shape image shape dims color return 
image def image _ reference self image _ id Return 
the shapes data of the image . info = self 
. image _ info image _ id if info source 
= = shapes return info shapes else super self . 
_ _ class _ _ . image _ reference self 
image _ id def load _ mask self image _ 
id Generate instance masks for shapes of the given image 
ID . info = self . image _ info image 
_ id shapes = info shapes count = len shapes 
mask = np . zeros info height info width count 
dtype = np . uint8 for i shape _ dims 
in enumerate info shapes mask i i + 1 = 
self . draw _ shape mask i i + 1 
. copy shape dims 1 # Handle occlusions occlusion = 
np . logical _ not mask 1 . astype np 
. uint8 for i in range count 2 1 1 
mask i = mask i * occlusion occlusion = np 
. logical _ and occlusion np . logical _ not 
mask i # Map class names to class IDs . 
class _ ids = np . array self . class 
_ names . index s 0 for s in shapes 
return mask . astype np . bool class _ ids 
. astype np . int32 def draw _ shape self 
image shape dims color Draws a shape from the given 
specs . # Get the center x y and the 
size s x y s = dims if shape = 
= square cv2 . rectangle image x s y s 
x + s y + s color 1 elif shape 
= = circle cv2 . circle image x y s 
color 1 elif shape = = triangle points = np 
. array x y s x s / math . 
sin math . radians 60 y + s x + 
s / math . sin math . radians 60 y 
+ s dtype = np . int32 cv2 . fillPoly 
image points color return image def random _ shape self 
height width Generates specifications of a random shape that lies 
within the given height and width boundaries . Returns a 
tuple of three valus * The shape name square circle 
. . . * Shape color a tuple of 3 
values RGB . * Shape dimensions A tuple of values 
that define the shape size and location . Differs per 
shape type . # Shape shape = random . choice 
square circle triangle # Color color = tuple random . 
randint 0 255 for _ in range 3 # Center 
x y buffer = 20 y = random . randint 
buffer height buffer 1 x = random . randint buffer 
width buffer 1 # Size s = random . randint 
buffer height / / 4 return shape color x y 
s def random _ image self height width Creates random 
specifications of an image with multiple shapes . Returns the 
background color of the image and a list of shape 
specifications that can be used to draw the image . 
# Pick random background color bg _ color = np 
. array random . randint 0 255 for _ in 
range 3 # Generate a few random shapes and record 
their # bounding boxes shapes = boxes = N = 
random . randint 1 4 for _ in range N 
shape color dims = self . random _ shape height 
width shapes . append shape color dims x y s 
= dims boxes . append y s x s y 
+ s x + s # Apply non max suppression 
wit 0.3 threshold to avoid # shapes covering each other 
keep _ ixs = utils . non _ max _ 
suppression np . array boxes np . arange N 0.3 
shapes = s for i s in enumerate shapes if 
i in keep _ ixs return bg _ color shapes 
一 原始数据 信息 录入 然后 调用 如下 方法 IMAGE _ 
SHAPE = 128 128 3 介绍 config 时会 提到 准备 
训练 用 数据 和 验证 集 数据 注意 此时 仅仅 
是 在 做准备 并未 真实 的 生成 或 读入 图片 
数据 # Training dataset dataset _ train = ShapesDataset dataset 
_ train . load _ shapes 500 config . IMAGE 
_ SHAPE 0 config . IMAGE _ SHAPE 1 dataset 
_ train . prepare # Validation dataset dataset _ val 
= ShapesDataset dataset _ val . load _ shapes 50 
config . IMAGE _ SHAPE 0 config . IMAGE _ 
SHAPE 1 dataset _ val . prepare 其 调用 的 
load _ shapes 方法 如下 def load _ shapes self 
count height width Generate the requested number of synthetic images 
. count number of images to generate . height width 
the size of the generated images . # Add classes 
self . add _ class shapes 1 square self . 
add _ class shapes 2 circle self . add _ 
class shapes 3 triangle # Add images # Generate random 
specifications of images i . e . color and # 
list of shapes sizes and locations . This is more 
compact than # actual images . Images are generated on 
the fly in load _ image . for i in 
range count bg _ color shapes = self . random 
_ image height width self . add _ image shapes 
image _ id = i path = None width = 
width height = height bg _ color = bg _ 
color shapes = shapes 这里 涉及 了 两个 父 类 
继承 来 的 方法 self . add _ class 和 
self . add _ image 我们 去 util . py 
中的 Dataset class 看一看 class Dataset object The base class 
for dataset classes . To use it create a new 
class that adds functions specific to the dataset you want 
to use . For example class C a t s 
A n d D o g s D a t 
a s e t Dataset def load _ cats _ 
and _ dogs self . . . def load _ 
mask self image _ id . . . def image 
_ reference self image _ id . . . See 
COCODataset and ShapesDataset as examples . def _ _ init 
_ _ self class _ map = None self . 
_ image _ ids = self . image _ info 
= # Background is always the first class self . 
class _ info = { source id 0 name BG 
} self . source _ class _ ids = { 
} def add _ class self source class _ id 
class _ name assert . not in source Source name 
cannot contain a dot # Does the class exist already 
for info in self . class _ info if info 
source = = source and info id = = class 
_ id # source . class _ id combination already 
available skip return # Add the class self . class 
_ info . append { source source id class _ 
id name class _ name } def add _ image 
self source image _ id path * * kwargs image 
_ info = { id image _ id source source 
path path } image _ info . update kwargs self 
. image _ info . append image _ info 也 
就是说 在 Dataset 中有 self . image _ info 和 
self . class _ info 两个 list 它们 的 元素 
都是/nr 固定 key 的 字典 source 对应 数据集 名称 id 
对应 本 数据集 内 当前 图片 / 类别 标号 path 
仅 image _ info 含有 对应 图像 路径 可为 None 
name 仅 class _ info 含有 对应 类别 描述 在 
后面 的 prepare 方法 中 我们 可以 进一步 了解 使用 
source . id 作 key 可以 索引 到 一个 内建 
的 新的 internal id 这也 像 我们 解释 了 为什么 
文档 中说 Mask _ RCNN 支持 多个 数据集 同时 训练 
的 由来 回到 load _ shapes 方法 self . random 
_ image 方法 为 新建 方法 这里 作者 使用 算法 
生成 图像 做 训练 该 方法 返回 生成 图像 函数 
所需 的 随机 参数 之后 调用 add _ image 时 
传入 path 为 None 也 是因为 数据 并非 从 磁盘 
读取 而是 自己 生成 并 传入 了 额外 的 self 
. random _ image 方法 返回 的 生成 参数 我们 
不必 关系 具体 参数 是 什么 作为 字典 参数 解读 
添 加进 self . image _ info 中 for i 
in range count bg _ color shapes = self . 
random _ image height width self . add _ image 
shapes image _ id = i path = None width 
= width height = height bg _ color = bg 
_ color shapes = shapes 从 这里 我们 进一步 了解 
了 self . image _ info 的 含义 记录 每 
一张 图片 的 id 信息 source 和 id 记录 每 
一张 图片 的 数据 信息 如何 获取 图像 矩阵 的 
线索 包含 path 或者 其他 的 字典 索引 只要 保证 
后面 能 实现 函数 根据 这个 信息 获取 图片 数据 
即可 二 数据 信息 整理 在 初始 化了 self . 
image _ info 和 self . class _ info 两个 
list 之后 Dataset 已经 记录 了 原始 的 类别 信息 
和 图像 信息 调用 prepare 方法 进行 规范化 def prepare 
self class _ map = None Prepares the Dataset class 
for use . TODO class map is not supported yet 
. When done it should handle mapping classes from different 
datasets to the same class ID . def clean _ 
name name Returns a shorter version of object names for 
cleaner display . return . join name . split 1 
# Build or rebuild everything else from the info dicts 
. self . num _ classes = len self . 
class _ info # 类别 数目 self . class _ 
ids = np . arange self . num _ classes 
# internal 类别 IDs self . class _ names = 
clean _ name c name for c in self . 
class _ info # 类 别名 简洁 版 self . 
num _ images = len self . image _ info 
# 图片 数目 self . _ image _ ids = 
np . arange self . num _ images # internal 
类别 IDs # Mapping from source class and image IDs 
to internal IDs self . class _ from _ source 
_ map = { { } . { } . 
format info source info id id for info id in 
zip self . class _ info self . class _ 
ids } self . image _ from _ source _ 
map = { { } . { } . format 
info source info id id for info id in zip 
self . image _ info self . image _ ids 
} # Map sources to class _ ids they support 
self . sources = list set i source for i 
in self . class _ info self . source _ 
class _ ids = { } # source 对应 的 
internal 类别 IDs # Loop over datasets for source in 
self . sources self . source _ class _ ids 
source = # Find classes that belong to this dataset 
for i info in enumerate self . class _ info 
# Include BG class in all datasets if i = 
= 0 or source = = info source self . 
source _ class _ ids source . append i 类别 
信息 记录 将 source . id 映射 为 唯一 的 
internal IDs 并将 全部 的 internal IDs 存储 在 self 
. class _ idssource _ class _ ids 记录 下 
每一个 source 对应 的 internal IDsclass _ from _ source 
_ map 记录 下 source . id internal IDs 的 
映射 关系 print dataset _ train . class _ info 
# 每个 类别 原始 信息 print dataset _ train . 
class _ ids # 记录 类别 internal IDs print dataset 
_ train . source _ class _ ids # 每个 
数据集 对应 的 internal IDs print dataset _ train . 
class _ from _ source _ map # 原始 信息 
和 internal ID 映射 关系 输出 如下 { source id 
0 name BG } { source shapes id 1 name 
square } { source shapes id 2 name circle } 
{ source shapes id 3 name triangle } 0 1 
2 3 { 0 shapes 0 1 2 3 } 
{ . 0 0 shapes . 1 1 shapes . 
2 2 shapes . 3 3/m }/i 有/v 固定/a 的/uj 
source/w 为/p 空的/nr 类别/n 0/m id 和 internal ID 都是 
标记 为 背景 会 添加 进 source _ class _ 
ids 中 全部 的 数据 集 对应 的 类别 中 
上面 shape 数据集 我们 仅 定义 了 3个 类 在 
映 射中 多 了 一个 0 变成 4个 类 图片 
信息 记录 图片 信息 不像 类别 一样 麻烦 我们 简单 
输出 三张 # Training dataset dataset _ train = ShapesDataset 
dataset _ train . load _ shapes 3 config . 
IMAGE _ SHAPE 0 config . IMAGE _ SHAPE 1 
dataset _ train . prepare print dataset _ train . 
image _ info # 记录 图像 原始 信息 print dataset 
_ train . image _ ids # 记录 图像 internal 
IDs print dataset _ train . image _ from _ 
source _ map # 原始 信息 和 internal ID 对应 
关系 结果 如下 { id 0 source shapes path None 
width 128 height 128 bg _ color array 163 143 
173 shapes circle 178 140 65 83 104 20 circle 
192 52 82 48 58 20 } { id 1 
source shapes path None width 128 height 128 bg _ 
color array 5 99 71 shapes triangle 90 32 55 
39 21 22 circle 214 49 173 39 78 21 
} { id 2 source shapes path None width 128 
height 128 bg _ color array 138 52 83 shapes 
circle 180 74 150 105 45 27 } 0 1 
2 { shapes . 0 0 shapes . 1 1 
shapes . 2 2 } 注 1 由于 这 是 
图像 检测 任务 而非 图像 分类 任务 故 每张 图片 
仅仅 和 归属 数据集 存在 映射 和 类别 信息 没有 
直接 映射 图像 上 的 目标 和 类别 才 存在 
映射 关系 不过 那 不在 本 部分 函数 涉及 范围 
内 注 2 internal IDs 实际上 就是 info 的 索引 
数组 使用 internal IDs 的 值 可以 直接 索引 对应 
图片 顺序 的 info 信息 总结 在 调用 self . 
prepare 之前 通过 自己 的 新建 方法 调用 self . 
add _ class 和 self . add _ image 将 
图片 和 分类 的 原始 信息 以 dict 的 形式 
添加到 class _ info 与 image _ info 两个 list 
中 即可 三 获取 图片 然后 我们 获取 一些 样例 
图片 进行 展示 # Load and display random samples image 
_ ids = np . random . choice dataset _ 
train . image _ ids 4 for image _ id 
in image _ ids image = dataset _ train . 
load _ image image _ id mask class _ ids 
= dataset _ train . load _ mask image _ 
id visualize . display _ top _ masks image mask 
class _ ids dataset _ train . class _ names 
print image . shape mask . shape class _ ids 
dataset _ train . class _ names 由 上面 代码 
我们 可以 获悉 如下 信息 使用 self . image . 
ids 即 internal IDs 进行 图片 选取 自行 实现 load 
_ image 方法 获取 图片 internal IDs 索引 图片 原始 
信息 info 利用 原始 信息 输出 图片 自行 实现 load 
_ mask 方法 获取 图片 internal IDs 索引 图片 原始 
信息 info 利用 原始 信息 输出 图片 的 masks 和 
对应 internal 类别 注意 一张 图片 可以 有 多个 mask 
并 分别 对应 自己 的 类别 上述 代码 输出 如下 
仅 展示 前 两张 下面 贴出 load _ image 和 
load _ mask 方法 详见 train _ shapes . ipynb 
具体 实现 不是 重点 毕竟 我们 也 不是 在 研究 
怎么 画 2D 图 重点 在于 上面 提到 的 它们 
的 功能 这 涉及 到 我们 迁移 到 自己 的 
数据 时 如何 实现 接口 load _ image 方法 返回 
一张 图片 load _ mask 方法 返回 h w c 
的 01 掩码 以及 c 的 class id 注意 c 
指 的 是 盖章 图片 中 instance 的 数目 def 
load _ image self image _ id Generate an image 
from the specs of the given image ID . Typically 
this function loads the image from a file but in 
this case it generates the image on the fly from 
the specs in image _ info . info = self 
. image _ info image _ id bg _ color 
= np . array info bg _ color . reshape 
1 1 3 image = np . ones info height 
info width 3 dtype = np . uint8 image = 
image * bg _ color . astype np . uint8 
for shape color dims in info shapes image = self 
. draw _ shape image shape dims color return image 
def load _ mask self image _ id Generate instance 
masks for shapes of the given image ID . info 
= self . image _ info image _ id shapes 
= info shapes count = len shapes mask = np 
. zeros info height info width count dtype = np 
. uint8 for i shape _ dims in enumerate info 
shapes mask i i + 1 = self . draw 
_ shape mask i i + 1 . copy shape 
dims 1 # Handle occlusions occlusion = np . logical 
_ not mask 1 . astype np . uint8 for 
i in range count 2 1 1 mask i = 
mask i * occlusion occlusion = np . logical _ 
and occlusion np . logical _ not mask i # 
Map class names to class IDs . class _ ids 
= np . array self . class _ names . 
index s 0 for s in shapes return mask . 
astype np . bool class _ ids . astype np 
. int32 小结 正如 Dataset 注释 所说 要想 运行 自己 
的 数据集 我们 首先 要 实现 一个 方法 load _ 
shapes 根据 数据集 取名 即可 收集 原始 图像 类别 信息 
然后 实现 两个 方法 load _ image load _ mask 
分别 实现 获取 单张 图片 数据 获取 单张 图片 对应 
的 objs 的 masks 和 classes 这样 基本 完成 了 
数据集 类 的 构建 The base class for dataset classes 
. To use it create a new class that adds 
functions specific to the datasetyou want to use . For 
example class C a t s A n d D 
o g s D a t a s e t 
Dataset def load _ cats _ and _ dogs self 
. . . def load _ mask self image _ 
id . . . def image _ reference self image 
_ id . . . See COCODataset and ShapesDataset as 
examples . Github 地址 Mask _ RCNN 计算机 视觉 Mask RCNN _ 
论文 学习 计算机 视觉 Mask RCNN _ 项目 文档 翻译 
计算机 视觉 Mask RCNN _ 推断 网络 其一 总览 计算机 
视觉 Mask RCNN _ 推断 网络 其二 基于 ReNet101 的 
FPN 共享 网络 计算机 视觉 Mask RCNN _ 推断 网络 
其三 RPN 锚 框 处理 和 Proposal 生成 计算机 视觉 
Mask RCNN _ 推断 网络 其四 FPN 和 ROIAlign 的 
耦合 计算机 视觉 Mask RCNN _ 推断 网络 其五 目标 
检测 结果 精炼 计算机 视觉 Mask RCNN _ 推断 网络 
其 六 Mask 生成 计算机 视觉 Mask RCNN _ 推断 
网络 终篇 使用 detect 方法 进行 推断 计算机 视觉 Mask 
RCNN _ 锚 框 生成 计算机 视觉 Mask RCNN _ 
训练 网络 其一 数据集 与 Dataset 类 计算机 视觉 Mask 
RCNN _ 训练 网络 其二 train 网络结构 & 损失 函数 
计算机 视觉 Mask RCNN _ 训练 网络 其三 训练 Model 
本节 介绍 的 数据集 class 构建 为 官方 demo 对 
从零开始 构建 自己 的 数据集 训练 感兴趣 的 建议 了解 
了 本文 及 本文 对应 的 代码 文件 后 看一下 
计算机 视觉 Mask RCNN _ 关键点 检测 分支 介绍 了 
由 自己 的 数据 构建 Mask RCNN 可用 形式 的 
实践 代码 位置 在 脚本 train _ shapes . ipynb 
中 作者 演示 了 使用 合成 图片 进行 训练 Mask 
_ RCNN 的 小 demo 我们 将 以此 为例 从 
训练 数据 的 角度 重新 审视 Mask _ RCNN 在 
训练 过程 中 我们 最先 要做 的 根据 我们 自己 
的 数据集 集成 改写 基础 的 数据 读取 class util 
. py 中的 Dataset class 然后 根据 数据集 调整 网络 
配置文件 配置 config . py 中的 Config 类 使得 网络 
形状 配 适 数 然后再 去 考虑 训练 的 问题 
按照 逻辑 流程 本节 我们 以 train _ shapes . 
ipynb 中 的 数据 生成 为例 学习 Dataset class 的 
运作 机理 在 示例 程序 中 首先 创建 新的 Dataset 
的 子类 这里 贴出 整个 class 代码 后 面会 分节 
讲解 class ShapesDataset utils . Dataset Generates the shapes synthetic 
dataset . The dataset consists of simple shapes triangles squares 
circles placed randomly on a blank surface . The images 
are generated on the fly . No file access required 
. def load _ shapes self count height width Generate 
the requested number of synthetic images . count number of 
images to generate . height width the size of the 
generated images . # Add classes self . add _ 
class shapes 1 square self . add _ class shapes 
2 circle self . add _ class shapes 3 triangle 
# Add images # Generate random specifications of images i 
. e . color and # list of shapes sizes 
and locations . This is more compact than # actual 
images . Images are generated on the fly in load 
_ image . for i in range count bg _ 
color shapes = self . random _ image height width 
self . add _ image shapes image _ id = 
i path = None width = width height = height 
bg _ color = bg _ color shapes = shapes 
def load _ image self image _ id Generate an 
image from the specs of the given image ID . 
Typically this function loads the image from a file but 
in this case it generates the image on the fly 
from the specs in image _ info . info = 
self . image _ info image _ id bg _ 
color = np . array info bg _ color . 
reshape 1 1 3 image = np . ones info 
height info width 3 dtype = np . uint8 image 
= image * bg _ color . astype np . 
uint8 for shape color dims in info shapes image = 
self . draw _ shape image shape dims color return 
image def image _ reference self image _ id Return 
the shapes data of the image . info = self 
. image _ info image _ id if info source 
= = shapes return info shapes else super self . 
_ _ class _ _ . image _ reference self 
image _ id def load _ mask self image _ 
id Generate instance masks for shapes of the given image 
ID . info = self . image _ info image 
_ id shapes = info shapes count = len shapes 
mask = np . zeros info height info width count 
dtype = np . uint8 for i shape _ dims 
in enumerate info shapes mask i i + 1 = 
self . draw _ shape mask i i + 1 
. copy shape dims 1 # Handle occlusions occlusion = 
np . logical _ not mask 1 . astype np 
. uint8 for i in range count 2 1 1 
mask i = mask i * occlusion occlusion = np 
. logical _ and occlusion np . logical _ not 
mask i # Map class names to class IDs . 
class _ ids = np . array self . class 
_ names . index s 0 for s in shapes 
return mask . astype np . bool class _ ids 
. astype np . int32 def draw _ shape self 
image shape dims color Draws a shape from the given 
specs . # Get the center x y and the 
size s x y s = dims if shape = 
= square cv2 . rectangle image x s y s 
x + s y + s color 1 elif shape 
= = circle cv2 . circle image x y s 
color 1 elif shape = = triangle points = np 
. array x y s x s / math . 
sin math . radians 60 y + s x + 
s / math . sin math . radians 60 y 
+ s dtype = np . int32 cv2 . fillPoly 
image points color return image def random _ shape self 
height width Generates specifications of a random shape that lies 
within the given height and width boundaries . Returns a 
tuple of three valus * The shape name square circle 
. . . * Shape color a tuple of 3 
values RGB . * Shape dimensions A tuple of values 
that define the shape size and location . Differs per 
shape type . # Shape shape = random . choice 
square circle triangle # Color color = tuple random . 
randint 0 255 for _ in range 3 # Center 
x y buffer = 20 y = random . randint 
buffer height buffer 1 x = random . randint buffer 
width buffer 1 # Size s = random . randint 
buffer height / / 4 return shape color x y 
s def random _ image self height width Creates random 
specifications of an image with multiple shapes . Returns the 
background color of the image and a list of shape 
specifications that can be used to draw the image . 
# Pick random background color bg _ color = np 
. array random . randint 0 255 for _ in 
range 3 # Generate a few random shapes and record 
their # bounding boxes shapes = boxes = N = 
random . randint 1 4 for _ in range N 
shape color dims = self . random _ shape height 
width shapes . append shape color dims x y s 
= dims boxes . append y s x s y 
+ s x + s # Apply non max suppression 
wit 0.3 threshold to avoid # shapes covering each other 
keep _ ixs = utils . non _ max _ 
suppression np . array boxes np . arange N 0.3 
shapes = s for i s in enumerate shapes if 
i in keep _ ixs return bg _ color shapes 
一 原始数据 信息 录入 然后 调用 如下 方法 IMAGE _ 
SHAPE = 128 128 3 介绍 config 时会 提到 准备 
训练 用 数据 和 验证 集 数据 注意 此时 仅仅 
是 在 做准备 并未 真实 的 生成 或 读入 图片 
数据 # Training dataset dataset _ train = ShapesDataset dataset 
_ train . load _ shapes 500 config . IMAGE 
_ SHAPE 0 config . IMAGE _ SHAPE 1 dataset 
_ train . prepare # Validation dataset dataset _ val 
= ShapesDataset dataset _ val . load _ shapes 50 
config . IMAGE _ SHAPE 0 config . IMAGE _ 
SHAPE 1 dataset _ val . prepare 其 调用 的 
load _ shapes 方法 如下 def load _ shapes self 
count height width Generate the requested number of synthetic images 
. count number of images to generate . height width 
the size of the generated images . # Add classes 
self . add _ class shapes 1 square self . 
add _ class shapes 2 circle self . add _ 
class shapes 3 triangle # Add images # Generate random 
specifications of images i . e . color and # 
list of shapes sizes and locations . This is more 
compact than # actual images . Images are generated on 
the fly in load _ image . for i in 
range count bg _ color shapes = self . random 
_ image height width self . add _ image shapes 
image _ id = i path = None width = 
width height = height bg _ color = bg _ 
color shapes = shapes 这里 涉及 了 两个 父 类 
继承 来 的 方法 self . add _ class 和 
self . add _ image 我们 去 util . py 
中的 Dataset class 看一看 class Dataset object The base class 
for dataset classes . To use it create a new 
class that adds functions specific to the dataset you want 
to use . For example class C a t s 
A n d D o g s D a t 
a s e t Dataset def load _ cats _ 
and _ dogs self . . . def load _ 
mask self image _ id . . . def image 
_ reference self image _ id . . . See 
COCODataset and ShapesDataset as examples . def _ _ init 
_ _ self class _ map = None self . 
_ image _ ids = self . image _ info 
= # Background is always the first class self . 
class _ info = { source id 0 name BG 
} self . source _ class _ ids = { 
} def add _ class self source class _ id 
class _ name assert . not in source Source name 
cannot contain a dot # Does the class exist already 
for info in self . class _ info if info 
source = = source and info id = = class 
_ id # source . class _ id combination already 
available skip return # Add the class self . class 
_ info . append { source source id class _ 
id name class _ name } def add _ image 
self source image _ id path * * kwargs image 
_ info = { id image _ id source source 
path path } image _ info . update kwargs self 
. image _ info . append image _ info 也 
就是说 在 Dataset 中有 self . image _ info 和 
self . class _ info 两个 list 它们 的 元素 
都是/nr 固定 key 的 字典 source 对应 数据集 名称 id 
对应 本 数据集 内 当前 图片 / 类别 标号 path 
仅 image _ info 含有 对应 图像 路径 可为 None 
name 仅 class _ info 含有 对应 类别 描述 在 
后面 的 prepare 方法 中 我们 可以 进一步 了解 使用 
source . id 作 key 可以 索引 到 一个 内建 
的 新的 internal id 这也 像 我们 解释 了 为什么 
文档 中说 Mask _ RCNN 支持 多个 数据集 同时 训练 
的 由来 回到 load _ shapes 方法 self . random 
_ image 方法 为 新建 方法 这里 作者 使用 算法 
生成 图像 做 训练 该 方法 返回 生成 图像 函数 
所需 的 随机 参数 之后 调用 add _ image 时 
传入 path 为 None 也 是因为 数据 并非 从 磁盘 
读取 而是 自己 生成 并 传入 了 额外 的 self 
. random _ image 方法 返回 的 生成 参数 我们 
不必 关系 具体 参数 是 什么 作为 字典 参数 解读 
添 加进 self . image _ info 中 for i 
in range count bg _ color shapes = self . 
random _ image height width self . add _ image 
shapes image _ id = i path = None width 
= width height = height bg _ color = bg 
_ color shapes = shapes 从 这里 我们 进一步 了解 
了 self . image _ info 的 含义 记录 每 
一张 图片 的 id 信息 source 和 id 记录 每 
一张 图片 的 数据 信息 如何 获取 图像 矩阵 的 
线索 包含 path 或者 其他 的 字典 索引 只要 保证 
后面 能 实现 函数 根据 这个 信息 获取 图片 数据 
即可 二 数据 信息 整理 在 初始 化了 self . 
image _ info 和 self . class _ info 两个 
list 之后 Dataset 已经 记录 了 原始 的 类别 信息 
和 图像 信息 调用 prepare 方法 进行 规范化 def prepare 
self class _ map = None Prepares the Dataset class 
for use . TODO class map is not supported yet 
. When done it should handle mapping classes from different 
datasets to the same class ID . def clean _ 
name name Returns a shorter version of object names for 
cleaner display . return . join name . split 1 
# Build or rebuild everything else from the info dicts 
. self . num _ classes = len self . 
class _ info # 类别 数目 self . class _ 
ids = np . arange self . num _ classes 
# internal 类别 IDs self . class _ names = 
clean _ name c name for c in self . 
class _ info # 类 别名 简洁 版 self . 
num _ images = len self . image _ info 
# 图片 数目 self . _ image _ ids = 
np . arange self . num _ images # internal 
类别 IDs # Mapping from source class and image IDs 
to internal IDs self . class _ from _ source 
_ map = { { } . { } . 
format info source info id id for info id in 
zip self . class _ info self . class _ 
ids } self . image _ from _ source _ 
map = { { } . { } . format 
info source info id id for info id in zip 
self . image _ info self . image _ ids 
} # Map sources to class _ ids they support 
self . sources = list set i source for i 
in self . class _ info self . source _ 
class _ ids = { } # source 对应 的 
internal 类别 IDs # Loop over datasets for source in 
self . sources self . source _ class _ ids 
source = # Find classes that belong to this dataset 
for i info in enumerate self . class _ info 
# Include BG class in all datasets if i = 
= 0 or source = = info source self . 
source _ class _ ids source . append i 类别 
信息 记录 将 source . id 映射 为 唯一 的 
internal IDs 并将 全部 的 internal IDs 存储 在 self 
. class _ idssource _ class _ ids 记录 下 
每一个 source 对应 的 internal IDsclass _ from _ source 
_ map 记录 下 source . id internal IDs 的 
映射 关系 print dataset _ train . class _ info 
# 每个 类别 原始 信息 print dataset _ train . 
class _ ids # 记录 类别 internal IDs print dataset 
_ train . source _ class _ ids # 每个 
数据集 对应 的 internal IDs print dataset _ train . 
class _ from _ source _ map # 原始 信息 
和 internal ID 映射 关系 输出 如下 { source id 
0 name BG } { source shapes id 1 name 
square } { source shapes id 2 name circle } 
{ source shapes id 3 name triangle } 0 1 
2 3 { 0 shapes 0 1 2 3 } 
{ . 0 0 shapes . 1 1 shapes . 
2 2 shapes . 3 3/m }/i 有/v 固定/a 的/uj 
source/w 为/p 空的/nr 类别/n 0/m id 和 internal ID 都是 
标记 为 背景 会 添加 进 source _ class _ 
ids 中 全部 的 数据 集 对应 的 类别 中 
上面 shape 数据集 我们 仅 定义 了 3个 类 在 
映 射中 多 了 一个 0 变成 4个 类 图片 
信息 记录 图片 信息 不像 类别 一样 麻烦 我们 简单 
输出 三张 # Training dataset dataset _ train = ShapesDataset 
dataset _ train . load _ shapes 3 config . 
IMAGE _ SHAPE 0 config . IMAGE _ SHAPE 1 
dataset _ train . prepare print dataset _ train . 
image _ info # 记录 图像 原始 信息 print dataset 
_ train . image _ ids # 记录 图像 internal 
IDs print dataset _ train . image _ from _ 
source _ map # 原始 信息 和 internal ID 对应 
关系 结果 如下 { id 0 source shapes path None 
width 128 height 128 bg _ color array 163 143 
173 shapes circle 178 140 65 83 104 20 circle 
192 52 82 48 58 20 } { id 1 
source shapes path None width 128 height 128 bg _ 
color array 5 99 71 shapes triangle 90 32 55 
39 21 22 circle 214 49 173 39 78 21 
} { id 2 source shapes path None width 128 
height 128 bg _ color array 138 52 83 shapes 
circle 180 74 150 105 45 27 } 0 1 
2 { shapes . 0 0 shapes . 1 1 
shapes . 2 2 } 注 1 由于 这 是 
图像 检测 任务 而非 图像 分类 任务 故 每张 图片 
仅仅 和 归属 数据集 存在 映射 和 类别 信息 没有 
直接 映射 图像 上 的 目标 和 类别 才 存在 
映射 关系 不过 那 不在 本 部分 函数 涉及 范围 
内 注 2 internal IDs 实际上 就是 info 的 索引 
数组 使用 internal IDs 的 值 可以 直接 索引 对应 
图片 顺序 的 info 信息 总结 在 调用 self . 
prepare 之前 通过 自己 的 新建 方法 调用 self . 
add _ class 和 self . add _ image 将 
图片 和 分类 的 原始 信息 以 dict 的 形式 
添加到 class _ info 与 image _ info 两个 list 
中 即可 三 获取 图片 然后 我们 获取 一些 样例 
图片 进行 展示 # Load and display random samples image 
_ ids = np . random . choice dataset _ 
train . image _ ids 4 for image _ id 
in image _ ids image = dataset _ train . 
load _ image image _ id mask class _ ids 
= dataset _ train . load _ mask image _ 
id visualize . display _ top _ masks image mask 
class _ ids dataset _ train . class _ names 
print image . shape mask . shape class _ ids 
dataset _ train . class _ names 由 上面 代码 
我们 可以 获悉 如下 信息 使用 self . image . 
ids 即 internal IDs 进行 图片 选取 自行 实现 load 
_ image 方法 获取 图片 internal IDs 索引 图片 原始 
信息 info 利用 原始 信息 输出 图片 自行 实现 load 
_ mask 方法 获取 图片 internal IDs 索引 图片 原始 
信息 info 利用 原始 信息 输出 图片 的 masks 和 
对应 internal 类别 注意 一张 图片 可以 有 多个 mask 
并 分别 对应 自己 的 类别 上述 代码 输出 如下 
仅 展示 前 两张 下面 贴出 load _ image 和 
load _ mask 方法 详见 train _ shapes . ipynb 
具体 实现 不是 重点 毕竟 我们 也 不是 在 研究 
怎么 画 2D 图 重点 在于 上面 提到 的 它们 
的 功能 这 涉及 到 我们 迁移 到 自己 的 
数据 时 如何 实现 接口 load _ image 方法 返回 
一张 图片 load _ mask 方法 返回 h w c 
的 01 掩码 以及 c 的 class id 注意 c 
指 的 是 盖章 图片 中 instance 的 数目 def 
load _ image self image _ id Generate an image 
from the specs of the given image ID . Typically 
this function loads the image from a file but in 
this case it generates the image on the fly from 
the specs in image _ info . info = self 
. image _ info image _ id bg _ color 
= np . array info bg _ color . reshape 
1 1 3 image = np . ones info height 
info width 3 dtype = np . uint8 image = 
image * bg _ color . astype np . uint8 
for shape color dims in info shapes image = self 
. draw _ shape image shape dims color return image 
def load _ mask self image _ id Generate instance 
masks for shapes of the given image ID . info 
= self . image _ info image _ id shapes 
= info shapes count = len shapes mask = np 
. zeros info height info width count dtype = np 
. uint8 for i shape _ dims in enumerate info 
shapes mask i i + 1 = self . draw 
_ shape mask i i + 1 . copy shape 
dims 1 # Handle occlusions occlusion = np . logical 
_ not mask 1 . astype np . uint8 for 
i in range count 2 1 1 mask i = 
mask i * occlusion occlusion = np . logical _ 
and occlusion np . logical _ not mask i # 
Map class names to class IDs . class _ ids 
= np . array self . class _ names . 
index s 0 for s in shapes return mask . 
astype np . bool class _ ids . astype np 
. int32 小结 正如 Dataset 注释 所说 要想 运行 自己 
的 数据集 我们 首先 要 实现 一个 方法 load _ 
shapes 根据 数据集 取名 即可 收集 原始 图像 类别 信息 
然后 实现 两个 方法 load _ image load _ mask 
分别 实现 获取 单张 图片 数据 获取 单张 图片 对应 
的 objs 的 masks 和 classes 这样 基本 完成 了 
数据集 类 的 构建 The base class for dataset classes 
. To use it create a new class that adds 
functions specific to the datasetyou want to use . For 
example class C a t s A n d D 
o g s D a t a s e t 
Dataset def load _ cats _ and _ dogs self 
. . . def load _ mask self image _ 
id . . . def image _ reference self image 
_ id . . . See COCODataset and ShapesDataset as 
examples . 