深度 学习 与 计算机 视觉 11 _ 基于 deep learning 
的 快速 图像 检索系统 作者 寒 小阳 时间 2016年 3月 
出处 http / / blog . csdn . net / 
han _ xiaoyang / article / details / 50856583 声明 
版权所有 转载 请 联系 作者 并 注明 出处 1 . 
引言 本 系统 是 基于 CVPR2015 的 论文 Deep Learning 
of Binary Hash Codes for Fast Image Retrieval 实现 的 
海量 数据 下 的 基于 内容 图片 检索系统 250w 图片 
下 对于 给定 图片 检索 top 1000 相似 时间 约为 
1s 其/r 基本/n 背景/n 和/c 原理/n 会/v 在下/i 文/n 提到/v 
2 . 基本 问题 与 技术 大家 都 知道 基于 
内容 的 图像 检索系统 是 根据 图像 的 内容 在 
已有 图像 集中 找到 最 相近 的 图片 而 这类 
系统 的 效果 精准度 和 速度 和 两个 东西 直接 
相关 图片 特征 的 表达 能力 近似 最 近邻 的 
查找 根据 我们 这个 简单 系统 里 的 情况 粗浅 
地 谈谈 这 两个 点 首先 说 图像 特征 的 
表达 能力 这 一直 是 基于 内容 的 图像 检索 
最 核心 却又 困难 的 点 之一 计算机所 看到 的 
图片 像素 层面 表达 的 低层次 信息 与人 所 理解 
的 图像 多维度 高层次 信息 内容 之间 有 很大 的 
差距 因此 我们 需要 一个 尽可能 丰富 地 表达 图像 
层次 信息 的 特征 我们 前面 的 博客 也 提到 
了 deep learning 是 一个 对于 图像 这种 层次 信息 
非常 丰富 的 数据 有 更好 表达 能力 的 框架 
其中/r 每/zg 一层/m 的/uj 中间/f 数据/n 都能/nr 表达/v 图像/n 某些/r 
维度/ns 的/uj 信息/n 相对于 传统 的 Hist Sift 和 Gist 
表达 的 信息 可能 会 丰富 一下 因此 这里 我们 
用 deep learning 产出 的 特征 来 替代 传统 图像 
特征 希望/v 能对/nr 图像/n 有更/nr 精准/n 的/uj 描绘/v 程度/n 再说 
近似 最 近邻 ANN Approximate Nearest Neighbor / 近似 最 
近邻 一直 是 一个 很热 的 研究 领域 因为 在 
海量 样本 的 情况 下 遍历 所有 样本 计算 距离 
精确 地 找出 最 接近 的 Top K 个 样本 
是 一个 非常 耗时 的 过程 尤其 有时候 样本 向量 
的 维度 也 相当 高 因此有 时候 我们 会 牺牲掉 
一小部分 精度 来 完成 在 很短 的 时间 内 找到 
近似 的 top K 个 最 近邻 也 就是 ANN 
最 常见 的 ANN 算法 包括 局部 敏感度 哈希 / 
locality sensitive hashing 最优 节点 优先 / best bin first 
和 Balanced box decomposition tree 等 我们 系统 中 将 
采用 LSH / 局部 敏感度 哈希 来 完成 这个 过程 
有 一些 非常 专业 的 ANN 库 比如 FLANN 有兴趣 
的 同学 可以 了解 一下 3 . 本 检索系统 原理 
图像 检索系统 和 关键 环节 如下 图 所示 图像 检索 
过程 简单 说 来 就是 对 图片 数据库 的 每张 
图片 抽取 特征 一般 形式 为 特征向量 存储 于 数据库 
中 对于 待 检索 图片 抽取 同样 的 特征 向量 
然后 并对 该 向量 和 数据库 中 向量 的 距离 
找出 最 接近 的 一些 特征向量 其 对应 的 图片 
即为 检索 结果 基于 内容 的 图像 检索系统 最大 的 
难点 在 上节 已经 说 过了 其一 为 大部分 神经网络 
产出 的 中间层 特征 维度 非常 高 比如 Krizhevsky 等 
的 在 2012 的 ImageNet 比赛 中 用到 的 AlexNet 
神经网 第 7层 的 输出 包含 丰富 的 图像 信息 
但是 维度 高达 4096 维 4096 维 的 浮点数 向量 
与 4096 维 的 浮点数 向量 之间 求 相似 度 
运算量 较大 因此 Babenko 等人 在 论文 Neural codes for 
image retrieval 中 提出 用 PCA 对 4096 维 的 
特征 进行 PCA 降 维 压缩 然后 用于 基于 内容 
的 图像 检索 此 场景 中 效果 优于 大 部分 
传统 图像 特征 同时 因为 高 维度 的 特征 之间 
相似 度 运算 会 消耗 一定 的 时间 因此 线 
性地 逐个 比对 数据库 中 特征向量 是 显然 不 可取 
的 大 部分 的 ANN 技术 都是 将 高维 特征向量 
压缩 到 低维 度空间 并且 以 01 二 值 的 
方式 表达 因为 在 低维 空间 中 计算 两个 二 
值 向量 的 汉明 距离 速度 非常 快 因此 可以 
在 一定 程度 上 缓解 时效 问题 ANN 的 这部分 
hash 映射 是 在 拿到 特征 之外 做 的 本系统 
框架 试图 让 卷积 神经网 在 训练 过程 中 学习 
出 对应 的 二 值 检索 向量 或者 我们 可以 
理解 成对/nr 全部 图 先 做 了 一个 分 桶 
操作 每次 检索 的 时候 只取 本 桶 和 临近 
桶 的 图片 作 比对 而 不是 在 全域 做 
比对 以 提高 检索 速度 论文 是 这样 实现 二 
值 检索 向量 的 在 Krizhevsky 等 2012年 用于 ImageNet 
中的 卷积 神经网络 结构 基础 上 在 第 7层 4096个 
神经元 和 output 层 之间 多加 了 一个 隐 层 
全 连接 层 隐 层 的 神经元 激励函数 可以 选用 
sigmoid 这样 输出 值 在 0 1 之间 值 可以 
设定 阈值 比如说 0.5 之后 将 这 一层 输出 变换 
为 01 二 值 向量 作为 二 值 检索 向量 
这样 在 使用 卷积 神经网 做 图像 分类 训练 的 
过程 中 会 学到 和 结果 类别 最 接近 的 
01 二 值 串 也 可以 理解 成 我们 把 
第 7层 4096 维 的 输出 特征向量 通过 神经元 关联 
压缩 成 一个 低 维度 的 01 向量 但 不同 
于 其他 的 降 维和 二 值 操作 这是 在 
一个 神经 网络 里 完成 的 每对 图片 做 一次 
完整 的 前 向 运算 拿到 类别 就 产出 了 
表征 图像 丰富 信息 的 第 7层 output 4096 维 
和 代表 图片 分 桶 的 第 8层 output 神经元 
个数 自己 指定 一般 都 不会 很多 因此 维度 不会 
很高 引用 论文 中的 图例 解释 就是 如下 的 结构 
上方 图为 ImageNet 比赛 中 使用 的 卷积 神经网络 中间 
图为 调整 后 在 第 7层 和 output 层 之间 
添加 隐 层 假设 为 128个 神经元 后的/nr 卷积 神经网络 
我们 将 复用 ImageNet 中 得到 最终 模型 的 前 
7层 权 重做 fine tuning 得到 第 7层 8层 和 
output 层 之间 的 权重 下方 图为 实际 检索 过程 
对于/p 所有/b 的/uj 图片/n 做/v 卷积/n 神经网络/n 前/f 向/p 运算/vn 
得到/v 第/m 7层/mq 4096/m 维/v 特征向量/n 和第/nr 8层/mq 128/m 维/v 
输出/v 设定 阈值 0.5 之后 可以 转成 01 二 值 
检索 向量 对于 待 检索 的 图片 同样 得到 4096 
维 特征向量 和 128 维 01 二 值 检索 向量 
在 数据库 中 查找 二 值 检索 向量 对应 桶 
内 图片 比对 4096 维 特征向量 之间 距离 做 重拍 
即 得到 最终 结果 图上 的 检索 例子 比较 直观 
对于 待 检索 的 鹰 图像 算得 二 值 检索 
向量 为 101010 取出 桶内 图片 可以 看到 基本 也 
都为 鹰 比对 4096 维 特征向量 之间 距离 重新 排序 
拿 得到 最后 的 检索 结果 4 . 预 训 
练好 的 模型 一般说来 在 自己 的 图片 训练 集上 
针对 特定 的 场景 进行 图像 类别 训练 得到 的 
神经 网络 中间层 特征 的 表达 能力 会 更 有针对性 
一些 具体 训练 的 过程 可以 第 3节 中的 说明 
对于 不想 自己 重新 费时 训练 或者 想 快速 搭建 
一个 基于 内容 的 图片 检索 系统 的 同学 这里 
也 提供 了 100w 图片 上 训练 得到 的 卷积 
神经网络 模型 供 大家 使用 这里 提供 了 2个 预先 
训 练好 的 模型 供 大家 提取 图像 特征 和 
二 值 检索 串 用 2个 模型 训练 的 数据集 
一致 卷积 神经网络 搭建 略有不同 对于 几万 到 十几万 级别 
的 小 量级 图片 建立 检索系统 请使用 模型 Image _ 
Retrieval _ 20 _ hash _ code . caffemodel 对于 
百万 以上 的 图片 建立 检索系统 请使用 模型 Image _ 
Retrieval _ 128 _ hash _ code . caffemodel 对于 
同一 张 图片 两者 产出 的 特征 均为 4096 维度 
但 用作 分 桶 的 二 值 检索 向量 长度 
前者 为 20 后者 为 128 模型 下载 地址 为 
云盘 地址 傻瓜式 环境 配置 手册 1 . 关于 系统 
这个 说明 是 关于 Linux 系统 的 最好 是 centOS 
7.0 以上 或者 ubuntu 14.04 以上 低版本 的 系统 可能 
会 出现 boost OpenCV 等 库 版 本不 兼容问题 2 
. centOS 配置 方法 2.1 配置 yum 源 配置 合适 
的 yum 源 是 一种 偷懒 的 办法 可以 简化 
很多 后续 操作 不/d 进行/v 这/r 一步/m 的话/u 很多/m 依赖/v 
库/n 都/d 需要/v 自己/r 手动/n 编译/v 和/c 指定/v caffe/w 编译/v 
路径/n 耗时 且 经常 编译 不成功 在 国内 的话 用 
sohu 或者 163 的 源 rpm Uvh http / / 
mirrors . sohu . com / fedora epel / 7 
/ x86 _ 64 / e / epel release 7 
2 . noarch . rpm 如果 身处 国外 的话 可以 
查 一下 fedora mirror list 找到 合适 的 yum 源 
添加 接着 我们 让 新的 源 生效 yum repolist2 . 
2 安装 依赖 的 库 该 图像 检索系统 依赖于 caffe 
深度 学习 框架 因此 需要 安装 caffe 依赖 的 部分 
库 比如 protobuf 是 caffe 中 定义 layers 的 配置文件 
解析 时 需要 的 leveldb 是 训练 时 存储 图片 
数据 的 数据库 opencv 是 图像 处理 库 boost 是 
通用 C + + 库 等等 我们 用 yum install 
一键 安装 sudo yum install protobuf devel leveldb devel snappy 
devel opencv devel boost devel hdf5 devel2 . 3 安装 
科学计算 库 这个 部分 大家 都懂 的 因为 要 训练 
和 识别 过程 涉及 到 大量 的 科学 计算 因此 
必要 的 科学计算 库 也 需要 安装 同时 Python 版本 
caffe 中会 依赖 一些 python 科学计算 库 pip/w 和/c easy/w 
_/i install/w 有时候/l 安装/v 起来/v 会/v 有/v 一些/m 问题/n 因此 
部分 库 这里 也用 yum install 直接 安装 了 yum 
install openblas devel . x86 _ 64 gcc c + 
+ . x86 _ 64 numpy . x86 _ 64 
scipy . x86 _ 64 python matplotlib . x86 _ 
64 lapack devel . x86 _ 64 python pillow . 
x86 _ 64 libjpeg turbo devel . x86 _ 64 
freetype devel . x86 _ 64 libpng devel . x86 
_ 64 openblas devel . x86 _ 642.4 其余 依赖 
包括 lmdb 等 sudo yum install gflags devel glog devel 
lmdb devel 若 此处 yum 源 中 找 不到 这些 
拓展 package 可是 手动 编译 要有 root 权限 # glog 
wget https / / google glog . googlecode . com 
/ files / glog 0 . 3.3 . tar . 
gz tar zxvf glog 0 . 3.3 . tar . 
gz cd glog 0 . 3.3 . / configure make 
& & make install # gflags wget https / / 
github . com / schuhschuh / gflags / archive / 
master . zip unzip master . zip cd gflags master 
mkdir build & & cd build export CXXFLAGS = fPIC 
& & cmake . . & & make VERBOSE = 
1 make & & make install # lmdb git clone 
https / / github . com / LMDB / lmdb 
cd lmdb / libraries / liblmdb make & & make 
i n s t a l l 1 2 3 
4 5 6 7 8 9 1 0 1 1 
1 2 1 3 1 4 1 5 1 6 
1 7 1 2 3 4 5 6 7 8 
9 1 0 1 1 1 2 1 3 1 
4 1 5 1 6 1 7 2 . 5 
python 版本 依赖 编译 pycaffe 的 时候 我们 需要 更多 
的 一些 python 的 依赖 库 这时候 我们 可以 用 
pip 或者 easy _ install 完成 pip 和 easy _ 
install 的 配置 方法 为 wget no check certificate https 
/ / bootstrap . pypa . io / ez _ 
setup . py python ez _ setup . py insecure 
wget https / / bootstrap . pypa . io / 
get pip . py python get pip . py12341234 在 
caffe / python / requirements . txt 中有 pycaffe 的 
python 依赖 包 如下 Cython = 0 . 19.2 numpy 
= 1 . 7.1 scipy = 0 . 13.2 scikit 
image = 0 . 9.3 matplotlib = 1 . 3.1 
ipython = 3 . 0.0 h5py = 2 . 2.0 
leveldb = 0.191 networkx = 1 . 8.1 nose = 
1 . 3.0 pandas = 0 . 12.0 python dateutil 
= 1.4 2 protobuf = 2 . 5.0 python gflags 
= 2.0 pyyaml = 3.10 Pillow = 2.3 . 0 
1 2 3 4 5 6 7 8 9 1 
0 1 1 1 2 1 3 1 4 1 
5 1 6 1 2 3 4 5 6 7 
8 9 1 0 1 1 1 2 1 3 
1 4 1 5 1 6 通过 以下 shell 命令 
可以 全部 安装 for req in $ cat requirements . 
txt do pip install $ req done113 . ubuntu 配置 
方法 基本 与 centOS 一致 这里 简单 列出 需要 执行 
的 shell 命令 sudo apt get install libprotobuf dev libleveldb 
dev libsnappy dev libopencv dev libhdf5 serial dev protobuf compiler 
sudo apt get install no install recommends libboost all dev 
sudo apt get install libgflags dev libgoogle glog dev liblmdb 
d e v 1 2 3 4 1 2 3 
4 p y t h o n 部分 的 依赖 
包 安装 方式 同上 4 . caffe 的 编译 与 
准备 保证 caffe 所需 依赖 都 安装 完成 后 在 
caffe 目录 下 执行 cp Makefile . config . example 
Makefile . config 根据 自己 的 实际 情况 修改 Makefile 
. config 的 内容 主要 修改 的 几个 如下 如果 
没有 GPU 只 打算 用 CPU 进行 实验 将 # 
CPU _ ONLY = 1 前 的 # 号 去掉 
如果 使用 GPU 且有 cuDNN 加速 将 # USE _ 
CUDNN = 1 前 的 # 号 去掉 如果 使用 
openBLAS 将 BLAS = atlas 改成 BLAS = open 并 
添加 BLAS _ INCLUDE = / usr / include / 
openblas Caffe 中 默认 的 矩阵 运算 库 为 ATLAS 
但是/c OpenBLAS/w 有/v 一些/m 性/n 能/v 优化/vn 因此 建议 换 
做 OpenBLAS 未完待续 深度 学习 与 计算机 视觉 11 _ 基于 deep learning 
的 快速 图像 检索系统 作者 寒 小阳 时间 2016年 3月 
出处 http / / blog . csdn . net / 
han _ xiaoyang / article / details / 50856583 声明 
版权所有 转载 请 联系 作者 并 注明 出处 1 . 
引言 本 系统 是 基于 CVPR2015 的 论文 Deep Learning 
of Binary Hash Codes for Fast Image Retrieval 实现 的 
海量 数据 下 的 基于 内容 图片 检索系统 250w 图片 
下 对于 给定 图片 检索 top 1000 相似 时间 约为 
1s 其/r 基本/n 背景/n 和/c 原理/n 会/v 在下/i 文/n 提到/v 
2 . 基本 问题 与 技术 大家 都 知道 基于 
内容 的 图像 检索系统 是 根据 图像 的 内容 在 
已有 图像 集中 找到 最 相近 的 图片 而 这类 
系统 的 效果 精准度 和 速度 和 两个 东西 直接 
相关 图片 特征 的 表达 能力 近似 最 近邻 的 
查找 根据 我们 这个 简单 系统 里 的 情况 粗浅 
地 谈谈 这 两个 点 首先 说 图像 特征 的 
表达 能力 这 一直 是 基于 内容 的 图像 检索 
最 核心 却又 困难 的 点 之一 计算机所 看到 的 
图片 像素 层面 表达 的 低层次 信息 与人 所 理解 
的 图像 多维度 高层次 信息 内容 之间 有 很大 的 
差距 因此 我们 需要 一个 尽可能 丰富 地 表达 图像 
层次 信息 的 特征 我们 前面 的 博客 也 提到 
了 deep learning 是 一个 对于 图像 这种 层次 信息 
非常 丰富 的 数据 有 更好 表达 能力 的 框架 
其中/r 每/zg 一层/m 的/uj 中间/f 数据/n 都能/nr 表达/v 图像/n 某些/r 
维度/ns 的/uj 信息/n 相对于 传统 的 Hist Sift 和 Gist 
表达 的 信息 可能 会 丰富 一下 因此 这里 我们 
用 deep learning 产出 的 特征 来 替代 传统 图像 
特征 希望/v 能对/nr 图像/n 有更/nr 精准/n 的/uj 描绘/v 程度/n 再说 
近似 最 近邻 ANN Approximate Nearest Neighbor / 近似 最 
近邻 一直 是 一个 很热 的 研究 领域 因为 在 
海量 样本 的 情况 下 遍历 所有 样本 计算 距离 
精确 地 找出 最 接近 的 Top K 个 样本 
是 一个 非常 耗时 的 过程 尤其 有时候 样本 向量 
的 维度 也 相当 高 因此有 时候 我们 会 牺牲掉 
一小部分 精度 来 完成 在 很短 的 时间 内 找到 
近似 的 top K 个 最 近邻 也 就是 ANN 
最 常见 的 ANN 算法 包括 局部 敏感度 哈希 / 
locality sensitive hashing 最优 节点 优先 / best bin first 
和 Balanced box decomposition tree 等 我们 系统 中 将 
采用 LSH / 局部 敏感度 哈希 来 完成 这个 过程 
有 一些 非常 专业 的 ANN 库 比如 FLANN 有兴趣 
的 同学 可以 了解 一下 3 . 本 检索系统 原理 
图像 检索系统 和 关键 环节 如下 图 所示 图像 检索 
过程 简单 说 来 就是 对 图片 数据库 的 每张 
图片 抽取 特征 一般 形式 为 特征向量 存储 于 数据库 
中 对于 待 检索 图片 抽取 同样 的 特征 向量 
然后 并对 该 向量 和 数据库 中 向量 的 距离 
找出 最 接近 的 一些 特征向量 其 对应 的 图片 
即为 检索 结果 基于 内容 的 图像 检索系统 最大 的 
难点 在 上节 已经 说 过了 其一 为 大部分 神经网络 
产出 的 中间层 特征 维度 非常 高 比如 Krizhevsky 等 
的 在 2012 的 ImageNet 比赛 中 用到 的 AlexNet 
神经网 第 7层 的 输出 包含 丰富 的 图像 信息 
但是 维度 高达 4096 维 4096 维 的 浮点数 向量 
与 4096 维 的 浮点数 向量 之间 求 相似 度 
运算量 较大 因此 Babenko 等人 在 论文 Neural codes for 
image retrieval 中 提出 用 PCA 对 4096 维 的 
特征 进行 PCA 降 维 压缩 然后 用于 基于 内容 
的 图像 检索 此 场景 中 效果 优于 大 部分 
传统 图像 特征 同时 因为 高 维度 的 特征 之间 
相似 度 运算 会 消耗 一定 的 时间 因此 线 
性地 逐个 比对 数据库 中 特征向量 是 显然 不 可取 
的 大 部分 的 ANN 技术 都是 将 高维 特征向量 
压缩 到 低维 度空间 并且 以 01 二 值 的 
方式 表达 因为 在 低维 空间 中 计算 两个 二 
值 向量 的 汉明 距离 速度 非常 快 因此 可以 
在 一定 程度 上 缓解 时效 问题 ANN 的 这部分 
hash 映射 是 在 拿到 特征 之外 做 的 本系统 
框架 试图 让 卷积 神经网 在 训练 过程 中 学习 
出 对应 的 二 值 检索 向量 或者 我们 可以 
理解 成对/nr 全部 图 先 做 了 一个 分 桶 
操作 每次 检索 的 时候 只取 本 桶 和 临近 
桶 的 图片 作 比对 而 不是 在 全域 做 
比对 以 提高 检索 速度 论文 是 这样 实现 二 
值 检索 向量 的 在 Krizhevsky 等 2012年 用于 ImageNet 
中的 卷积 神经网络 结构 基础 上 在 第 7层 4096个 
神经元 和 output 层 之间 多加 了 一个 隐 层 
全 连接 层 隐 层 的 神经元 激励函数 可以 选用 
sigmoid 这样 输出 值 在 0 1 之间 值 可以 
设定 阈值 比如说 0.5 之后 将 这 一层 输出 变换 
为 01 二 值 向量 作为 二 值 检索 向量 
这样 在 使用 卷积 神经网 做 图像 分类 训练 的 
过程 中 会 学到 和 结果 类别 最 接近 的 
01 二 值 串 也 可以 理解 成 我们 把 
第 7层 4096 维 的 输出 特征向量 通过 神经元 关联 
压缩 成 一个 低 维度 的 01 向量 但 不同 
于 其他 的 降 维和 二 值 操作 这是 在 
一个 神经 网络 里 完成 的 每对 图片 做 一次 
完整 的 前 向 运算 拿到 类别 就 产出 了 
表征 图像 丰富 信息 的 第 7层 output 4096 维 
和 代表 图片 分 桶 的 第 8层 output 神经元 
个数 自己 指定 一般 都 不会 很多 因此 维度 不会 
很高 引用 论文 中的 图例 解释 就是 如下 的 结构 
上方 图为 ImageNet 比赛 中 使用 的 卷积 神经网络 中间 
图为 调整 后 在 第 7层 和 output 层 之间 
添加 隐 层 假设 为 128个 神经元 后的/nr 卷积 神经网络 
我们 将 复用 ImageNet 中 得到 最终 模型 的 前 
7层 权 重做 fine tuning 得到 第 7层 8层 和 
output 层 之间 的 权重 下方 图为 实际 检索 过程 
对于/p 所有/b 的/uj 图片/n 做/v 卷积/n 神经网络/n 前/f 向/p 运算/vn 
得到/v 第/m 7层/mq 4096/m 维/v 特征向量/n 和第/nr 8层/mq 128/m 维/v 
输出/v 设定 阈值 0.5 之后 可以 转成 01 二 值 
检索 向量 对于 待 检索 的 图片 同样 得到 4096 
维 特征向量 和 128 维 01 二 值 检索 向量 
在 数据库 中 查找 二 值 检索 向量 对应 桶 
内 图片 比对 4096 维 特征向量 之间 距离 做 重拍 
即 得到 最终 结果 图上 的 检索 例子 比较 直观 
对于 待 检索 的 鹰 图像 算得 二 值 检索 
向量 为 101010 取出 桶内 图片 可以 看到 基本 也 
都为 鹰 比对 4096 维 特征向量 之间 距离 重新 排序 
拿 得到 最后 的 检索 结果 4 . 预 训 
练好 的 模型 一般说来 在 自己 的 图片 训练 集上 
针对 特定 的 场景 进行 图像 类别 训练 得到 的 
神经 网络 中间层 特征 的 表达 能力 会 更 有针对性 
一些 具体 训练 的 过程 可以 第 3节 中的 说明 
对于 不想 自己 重新 费时 训练 或者 想 快速 搭建 
一个 基于 内容 的 图片 检索 系统 的 同学 这里 
也 提供 了 100w 图片 上 训练 得到 的 卷积 
神经网络 模型 供 大家 使用 这里 提供 了 2个 预先 
训 练好 的 模型 供 大家 提取 图像 特征 和 
二 值 检索 串 用 2个 模型 训练 的 数据集 
一致 卷积 神经网络 搭建 略有不同 对于 几万 到 十几万 级别 
的 小 量级 图片 建立 检索系统 请使用 模型 Image _ 
Retrieval _ 20 _ hash _ code . caffemodel 对于 
百万 以上 的 图片 建立 检索系统 请使用 模型 Image _ 
Retrieval _ 128 _ hash _ code . caffemodel 对于 
同一 张 图片 两者 产出 的 特征 均为 4096 维度 
但 用作 分 桶 的 二 值 检索 向量 长度 
前者 为 20 后者 为 128 模型 下载 地址 为 
云盘 地址 傻瓜式 环境 配置 手册 1 . 关于 系统 
这个 说明 是 关于 Linux 系统 的 最好 是 centOS 
7.0 以上 或者 ubuntu 14.04 以上 低版本 的 系统 可能 
会 出现 boost OpenCV 等 库 版 本不 兼容问题 2 
. centOS 配置 方法 2.1 配置 yum 源 配置 合适 
的 yum 源 是 一种 偷懒 的 办法 可以 简化 
很多 后续 操作 不/d 进行/v 这/r 一步/m 的话/u 很多/m 依赖/v 
库/n 都/d 需要/v 自己/r 手动/n 编译/v 和/c 指定/v caffe/w 编译/v 
路径/n 耗时 且 经常 编译 不成功 在 国内 的话 用 
sohu 或者 163 的 源 rpm Uvh http / / 
mirrors . sohu . com / fedora epel / 7 
/ x86 _ 64 / e / epel release 7 
2 . noarch . rpm 如果 身处 国外 的话 可以 
查 一下 fedora mirror list 找到 合适 的 yum 源 
添加 接着 我们 让 新的 源 生效 yum repolist2 . 
2 安装 依赖 的 库 该 图像 检索系统 依赖于 caffe 
深度 学习 框架 因此 需要 安装 caffe 依赖 的 部分 
库 比如 protobuf 是 caffe 中 定义 layers 的 配置文件 
解析 时 需要 的 leveldb 是 训练 时 存储 图片 
数据 的 数据库 opencv 是 图像 处理 库 boost 是 
通用 C + + 库 等等 我们 用 yum install 
一键 安装 sudo yum install protobuf devel leveldb devel snappy 
devel opencv devel boost devel hdf5 devel2 . 3 安装 
科学计算 库 这个 部分 大家 都懂 的 因为 要 训练 
和 识别 过程 涉及 到 大量 的 科学 计算 因此 
必要 的 科学计算 库 也 需要 安装 同时 Python 版本 
caffe 中会 依赖 一些 python 科学计算 库 pip/w 和/c easy/w 
_/i install/w 有时候/l 安装/v 起来/v 会/v 有/v 一些/m 问题/n 因此 
部分 库 这里 也用 yum install 直接 安装 了 yum 
install openblas devel . x86 _ 64 gcc c + 
+ . x86 _ 64 numpy . x86 _ 64 
scipy . x86 _ 64 python matplotlib . x86 _ 
64 lapack devel . x86 _ 64 python pillow . 
x86 _ 64 libjpeg turbo devel . x86 _ 64 
freetype devel . x86 _ 64 libpng devel . x86 
_ 64 openblas devel . x86 _ 642.4 其余 依赖 
包括 lmdb 等 sudo yum install gflags devel glog devel 
lmdb devel 若 此处 yum 源 中 找 不到 这些 
拓展 package 可是 手动 编译 要有 root 权限 # glog 
wget https / / google glog . googlecode . com 
/ files / glog 0 . 3.3 . tar . 
gz tar zxvf glog 0 . 3.3 . tar . 
gz cd glog 0 . 3.3 . / configure make 
& & make install # gflags wget https / / 
github . com / schuhschuh / gflags / archive / 
master . zip unzip master . zip cd gflags master 
mkdir build & & cd build export CXXFLAGS = fPIC 
& & cmake . . & & make VERBOSE = 
1 make & & make install # lmdb git clone 
https / / github . com / LMDB / lmdb 
cd lmdb / libraries / liblmdb make & & make 
i n s t a l l 1 2 3 
4 5 6 7 8 9 1 0 1 1 
1 2 1 3 1 4 1 5 1 6 
1 7 1 2 3 4 5 6 7 8 
9 1 0 1 1 1 2 1 3 1 
4 1 5 1 6 1 7 2 . 5 
python 版本 依赖 编译 pycaffe 的 时候 我们 需要 更多 
的 一些 python 的 依赖 库 这时候 我们 可以 用 
pip 或者 easy _ install 完成 pip 和 easy _ 
install 的 配置 方法 为 wget no check certificate https 
/ / bootstrap . pypa . io / ez _ 
setup . py python ez _ setup . py insecure 
wget https / / bootstrap . pypa . io / 
get pip . py python get pip . py12341234 在 
caffe / python / requirements . txt 中有 pycaffe 的 
python 依赖 包 如下 Cython = 0 . 19.2 numpy 
= 1 . 7.1 scipy = 0 . 13.2 scikit 
image = 0 . 9.3 matplotlib = 1 . 3.1 
ipython = 3 . 0.0 h5py = 2 . 2.0 
leveldb = 0.191 networkx = 1 . 8.1 nose = 
1 . 3.0 pandas = 0 . 12.0 python dateutil 
= 1.4 2 protobuf = 2 . 5.0 python gflags 
= 2.0 pyyaml = 3.10 Pillow = 2.3 . 0 
1 2 3 4 5 6 7 8 9 1 
0 1 1 1 2 1 3 1 4 1 
5 1 6 1 2 3 4 5 6 7 
8 9 1 0 1 1 1 2 1 3 
1 4 1 5 1 6 通过 以下 shell 命令 
可以 全部 安装 for req in $ cat requirements . 
txt do pip install $ req done113 . ubuntu 配置 
方法 基本 与 centOS 一致 这里 简单 列出 需要 执行 
的 shell 命令 sudo apt get install libprotobuf dev libleveldb 
dev libsnappy dev libopencv dev libhdf5 serial dev protobuf compiler 
sudo apt get install no install recommends libboost all dev 
sudo apt get install libgflags dev libgoogle glog dev liblmdb 
d e v 1 2 3 4 1 2 3 
4 p y t h o n 部分 的 依赖 
包 安装 方式 同上 4 . caffe 的 编译 与 
准备 保证 caffe 所需 依赖 都 安装 完成 后 在 
caffe 目录 下 执行 cp Makefile . config . example 
Makefile . config 根据 自己 的 实际 情况 修改 Makefile 
. config 的 内容 主要 修改 的 几个 如下 如果 
没有 GPU 只 打算 用 CPU 进行 实验 将 # 
CPU _ ONLY = 1 前 的 # 号 去掉 
如果 使用 GPU 且有 cuDNN 加速 将 # USE _ 
CUDNN = 1 前 的 # 号 去掉 如果 使用 
openBLAS 将 BLAS = atlas 改成 BLAS = open 并 
添加 BLAS _ INCLUDE = / usr / include / 
openblas Caffe 中 默认 的 矩阵 运算 库 为 ATLAS 
但是/c OpenBLAS/w 有/v 一些/m 性/n 能/v 优化/vn 因此 建议 换 
做 OpenBLAS 未完待续 深度 学习 与 计算机 视觉 11 _ 基于 deep learning 
的 快速 图像 检索系统 作者 寒 小阳 时间 2016年 3月 
出处 http / / blog . csdn . net / 
han _ xiaoyang / article / details / 50856583 声明 
版权所有 转载 请 联系 作者 并 注明 出处 1 . 
引言 本 系统 是 基于 CVPR2015 的 论文 Deep Learning 
of Binary Hash Codes for Fast Image Retrieval 实现 的 
海量 数据 下 的 基于 内容 图片 检索系统 250w 图片 
下 对于 给定 图片 检索 top 1000 相似 时间 约为 
1s 其/r 基本/n 背景/n 和/c 原理/n 会/v 在下/i 文/n 提到/v 
2 . 基本 问题 与 技术 大家 都 知道 基于 
内容 的 图像 检索系统 是 根据 图像 的 内容 在 
已有 图像 集中 找到 最 相近 的 图片 而 这类 
系统 的 效果 精准度 和 速度 和 两个 东西 直接 
相关 图片 特征 的 表达 能力 近似 最 近邻 的 
查找 根据 我们 这个 简单 系统 里 的 情况 粗浅 
地 谈谈 这 两个 点 首先 说 图像 特征 的 
表达 能力 这 一直 是 基于 内容 的 图像 检索 
最 核心 却又 困难 的 点 之一 计算机所 看到 的 
图片 像素 层面 表达 的 低层次 信息 与人 所 理解 
的 图像 多维度 高层次 信息 内容 之间 有 很大 的 
差距 因此 我们 需要 一个 尽可能 丰富 地 表达 图像 
层次 信息 的 特征 我们 前面 的 博客 也 提到 
了 deep learning 是 一个 对于 图像 这种 层次 信息 
非常 丰富 的 数据 有 更好 表达 能力 的 框架 
其中/r 每/zg 一层/m 的/uj 中间/f 数据/n 都能/nr 表达/v 图像/n 某些/r 
维度/ns 的/uj 信息/n 相对于 传统 的 Hist Sift 和 Gist 
表达 的 信息 可能 会 丰富 一下 因此 这里 我们 
用 deep learning 产出 的 特征 来 替代 传统 图像 
特征 希望/v 能对/nr 图像/n 有更/nr 精准/n 的/uj 描绘/v 程度/n 再说 
近似 最 近邻 ANN Approximate Nearest Neighbor / 近似 最 
近邻 一直 是 一个 很热 的 研究 领域 因为 在 
海量 样本 的 情况 下 遍历 所有 样本 计算 距离 
精确 地 找出 最 接近 的 Top K 个 样本 
是 一个 非常 耗时 的 过程 尤其 有时候 样本 向量 
的 维度 也 相当 高 因此有 时候 我们 会 牺牲掉 
一小部分 精度 来 完成 在 很短 的 时间 内 找到 
近似 的 top K 个 最 近邻 也 就是 ANN 
最 常见 的 ANN 算法 包括 局部 敏感度 哈希 / 
locality sensitive hashing 最优 节点 优先 / best bin first 
和 Balanced box decomposition tree 等 我们 系统 中 将 
采用 LSH / 局部 敏感度 哈希 来 完成 这个 过程 
有 一些 非常 专业 的 ANN 库 比如 FLANN 有兴趣 
的 同学 可以 了解 一下 3 . 本 检索系统 原理 
图像 检索系统 和 关键 环节 如下 图 所示 图像 检索 
过程 简单 说 来 就是 对 图片 数据库 的 每张 
图片 抽取 特征 一般 形式 为 特征向量 存储 于 数据库 
中 对于 待 检索 图片 抽取 同样 的 特征 向量 
然后 并对 该 向量 和 数据库 中 向量 的 距离 
找出 最 接近 的 一些 特征向量 其 对应 的 图片 
即为 检索 结果 基于 内容 的 图像 检索系统 最大 的 
难点 在 上节 已经 说 过了 其一 为 大部分 神经网络 
产出 的 中间层 特征 维度 非常 高 比如 Krizhevsky 等 
的 在 2012 的 ImageNet 比赛 中 用到 的 AlexNet 
神经网 第 7层 的 输出 包含 丰富 的 图像 信息 
但是 维度 高达 4096 维 4096 维 的 浮点数 向量 
与 4096 维 的 浮点数 向量 之间 求 相似 度 
运算量 较大 因此 Babenko 等人 在 论文 Neural codes for 
image retrieval 中 提出 用 PCA 对 4096 维 的 
特征 进行 PCA 降 维 压缩 然后 用于 基于 内容 
的 图像 检索 此 场景 中 效果 优于 大 部分 
传统 图像 特征 同时 因为 高 维度 的 特征 之间 
相似 度 运算 会 消耗 一定 的 时间 因此 线 
性地 逐个 比对 数据库 中 特征向量 是 显然 不 可取 
的 大 部分 的 ANN 技术 都是 将 高维 特征向量 
压缩 到 低维 度空间 并且 以 01 二 值 的 
方式 表达 因为 在 低维 空间 中 计算 两个 二 
值 向量 的 汉明 距离 速度 非常 快 因此 可以 
在 一定 程度 上 缓解 时效 问题 ANN 的 这部分 
hash 映射 是 在 拿到 特征 之外 做 的 本系统 
框架 试图 让 卷积 神经网 在 训练 过程 中 学习 
出 对应 的 二 值 检索 向量 或者 我们 可以 
理解 成对/nr 全部 图 先 做 了 一个 分 桶 
操作 每次 检索 的 时候 只取 本 桶 和 临近 
桶 的 图片 作 比对 而 不是 在 全域 做 
比对 以 提高 检索 速度 论文 是 这样 实现 二 
值 检索 向量 的 在 Krizhevsky 等 2012年 用于 ImageNet 
中的 卷积 神经网络 结构 基础 上 在 第 7层 4096个 
神经元 和 output 层 之间 多加 了 一个 隐 层 
全 连接 层 隐 层 的 神经元 激励函数 可以 选用 
sigmoid 这样 输出 值 在 0 1 之间 值 可以 
设定 阈值 比如说 0.5 之后 将 这 一层 输出 变换 
为 01 二 值 向量 作为 二 值 检索 向量 
这样 在 使用 卷积 神经网 做 图像 分类 训练 的 
过程 中 会 学到 和 结果 类别 最 接近 的 
01 二 值 串 也 可以 理解 成 我们 把 
第 7层 4096 维 的 输出 特征向量 通过 神经元 关联 
压缩 成 一个 低 维度 的 01 向量 但 不同 
于 其他 的 降 维和 二 值 操作 这是 在 
一个 神经 网络 里 完成 的 每对 图片 做 一次 
完整 的 前 向 运算 拿到 类别 就 产出 了 
表征 图像 丰富 信息 的 第 7层 output 4096 维 
和 代表 图片 分 桶 的 第 8层 output 神经元 
个数 自己 指定 一般 都 不会 很多 因此 维度 不会 
很高 引用 论文 中的 图例 解释 就是 如下 的 结构 
上方 图为 ImageNet 比赛 中 使用 的 卷积 神经网络 中间 
图为 调整 后 在 第 7层 和 output 层 之间 
添加 隐 层 假设 为 128个 神经元 后的/nr 卷积 神经网络 
我们 将 复用 ImageNet 中 得到 最终 模型 的 前 
7层 权 重做 fine tuning 得到 第 7层 8层 和 
output 层 之间 的 权重 下方 图为 实际 检索 过程 
对于/p 所有/b 的/uj 图片/n 做/v 卷积/n 神经网络/n 前/f 向/p 运算/vn 
得到/v 第/m 7层/mq 4096/m 维/v 特征向量/n 和第/nr 8层/mq 128/m 维/v 
输出/v 设定 阈值 0.5 之后 可以 转成 01 二 值 
检索 向量 对于 待 检索 的 图片 同样 得到 4096 
维 特征向量 和 128 维 01 二 值 检索 向量 
在 数据库 中 查找 二 值 检索 向量 对应 桶 
内 图片 比对 4096 维 特征向量 之间 距离 做 重拍 
即 得到 最终 结果 图上 的 检索 例子 比较 直观 
对于 待 检索 的 鹰 图像 算得 二 值 检索 
向量 为 101010 取出 桶内 图片 可以 看到 基本 也 
都为 鹰 比对 4096 维 特征向量 之间 距离 重新 排序 
拿 得到 最后 的 检索 结果 4 . 预 训 
练好 的 模型 一般说来 在 自己 的 图片 训练 集上 
针对 特定 的 场景 进行 图像 类别 训练 得到 的 
神经 网络 中间层 特征 的 表达 能力 会 更 有针对性 
一些 具体 训练 的 过程 可以 第 3节 中的 说明 
对于 不想 自己 重新 费时 训练 或者 想 快速 搭建 
一个 基于 内容 的 图片 检索 系统 的 同学 这里 
也 提供 了 100w 图片 上 训练 得到 的 卷积 
神经网络 模型 供 大家 使用 这里 提供 了 2个 预先 
训 练好 的 模型 供 大家 提取 图像 特征 和 
二 值 检索 串 用 2个 模型 训练 的 数据集 
一致 卷积 神经网络 搭建 略有不同 对于 几万 到 十几万 级别 
的 小 量级 图片 建立 检索系统 请使用 模型 Image _ 
Retrieval _ 20 _ hash _ code . caffemodel 对于 
百万 以上 的 图片 建立 检索系统 请使用 模型 Image _ 
Retrieval _ 128 _ hash _ code . caffemodel 对于 
同一 张 图片 两者 产出 的 特征 均为 4096 维度 
但 用作 分 桶 的 二 值 检索 向量 长度 
前者 为 20 后者 为 128 模型 下载 地址 为 
云盘 地址 傻瓜式 环境 配置 手册 1 . 关于 系统 
这个 说明 是 关于 Linux 系统 的 最好 是 centOS 
7.0 以上 或者 ubuntu 14.04 以上 低版本 的 系统 可能 
会 出现 boost OpenCV 等 库 版 本不 兼容问题 2 
. centOS 配置 方法 2.1 配置 yum 源 配置 合适 
的 yum 源 是 一种 偷懒 的 办法 可以 简化 
很多 后续 操作 不/d 进行/v 这/r 一步/m 的话/u 很多/m 依赖/v 
库/n 都/d 需要/v 自己/r 手动/n 编译/v 和/c 指定/v caffe/w 编译/v 
路径/n 耗时 且 经常 编译 不成功 在 国内 的话 用 
sohu 或者 163 的 源 rpm Uvh http / / 
mirrors . sohu . com / fedora epel / 7 
/ x86 _ 64 / e / epel release 7 
2 . noarch . rpm 如果 身处 国外 的话 可以 
查 一下 fedora mirror list 找到 合适 的 yum 源 
添加 接着 我们 让 新的 源 生效 yum repolist2 . 
2 安装 依赖 的 库 该 图像 检索系统 依赖于 caffe 
深度 学习 框架 因此 需要 安装 caffe 依赖 的 部分 
库 比如 protobuf 是 caffe 中 定义 layers 的 配置文件 
解析 时 需要 的 leveldb 是 训练 时 存储 图片 
数据 的 数据库 opencv 是 图像 处理 库 boost 是 
通用 C + + 库 等等 我们 用 yum install 
一键 安装 sudo yum install protobuf devel leveldb devel snappy 
devel opencv devel boost devel hdf5 devel2 . 3 安装 
科学计算 库 这个 部分 大家 都懂 的 因为 要 训练 
和 识别 过程 涉及 到 大量 的 科学 计算 因此 
必要 的 科学计算 库 也 需要 安装 同时 Python 版本 
caffe 中会 依赖 一些 python 科学计算 库 pip/w 和/c easy/w 
_/i install/w 有时候/l 安装/v 起来/v 会/v 有/v 一些/m 问题/n 因此 
部分 库 这里 也用 yum install 直接 安装 了 yum 
install openblas devel . x86 _ 64 gcc c + 
+ . x86 _ 64 numpy . x86 _ 64 
scipy . x86 _ 64 python matplotlib . x86 _ 
64 lapack devel . x86 _ 64 python pillow . 
x86 _ 64 libjpeg turbo devel . x86 _ 64 
freetype devel . x86 _ 64 libpng devel . x86 
_ 64 openblas devel . x86 _ 642.4 其余 依赖 
包括 lmdb 等 sudo yum install gflags devel glog devel 
lmdb devel 若 此处 yum 源 中 找 不到 这些 
拓展 package 可是 手动 编译 要有 root 权限 # glog 
wget https / / google glog . googlecode . com 
/ files / glog 0 . 3.3 . tar . 
gz tar zxvf glog 0 . 3.3 . tar . 
gz cd glog 0 . 3.3 . / configure make 
& & make install # gflags wget https / / 
github . com / schuhschuh / gflags / archive / 
master . zip unzip master . zip cd gflags master 
mkdir build & & cd build export CXXFLAGS = fPIC 
& & cmake . . & & make VERBOSE = 
1 make & & make install # lmdb git clone 
https / / github . com / LMDB / lmdb 
cd lmdb / libraries / liblmdb make & & make 
i n s t a l l 1 2 3 
4 5 6 7 8 9 1 0 1 1 
1 2 1 3 1 4 1 5 1 6 
1 7 1 2 3 4 5 6 7 8 
9 1 0 1 1 1 2 1 3 1 
4 1 5 1 6 1 7 2 . 5 
python 版本 依赖 编译 pycaffe 的 时候 我们 需要 更多 
的 一些 python 的 依赖 库 这时候 我们 可以 用 
pip 或者 easy _ install 完成 pip 和 easy _ 
install 的 配置 方法 为 wget no check certificate https 
/ / bootstrap . pypa . io / ez _ 
setup . py python ez _ setup . py insecure 
wget https / / bootstrap . pypa . io / 
get pip . py python get pip . py12341234 在 
caffe / python / requirements . txt 中有 pycaffe 的 
python 依赖 包 如下 Cython = 0 . 19.2 numpy 
= 1 . 7.1 scipy = 0 . 13.2 scikit 
image = 0 . 9.3 matplotlib = 1 . 3.1 
ipython = 3 . 0.0 h5py = 2 . 2.0 
leveldb = 0.191 networkx = 1 . 8.1 nose = 
1 . 3.0 pandas = 0 . 12.0 python dateutil 
= 1.4 2 protobuf = 2 . 5.0 python gflags 
= 2.0 pyyaml = 3.10 Pillow = 2.3 . 0 
1 2 3 4 5 6 7 8 9 1 
0 1 1 1 2 1 3 1 4 1 
5 1 6 1 2 3 4 5 6 7 
8 9 1 0 1 1 1 2 1 3 
1 4 1 5 1 6 通过 以下 shell 命令 
可以 全部 安装 for req in $ cat requirements . 
txt do pip install $ req done113 . ubuntu 配置 
方法 基本 与 centOS 一致 这里 简单 列出 需要 执行 
的 shell 命令 sudo apt get install libprotobuf dev libleveldb 
dev libsnappy dev libopencv dev libhdf5 serial dev protobuf compiler 
sudo apt get install no install recommends libboost all dev 
sudo apt get install libgflags dev libgoogle glog dev liblmdb 
d e v 1 2 3 4 1 2 3 
4 p y t h o n 部分 的 依赖 
包 安装 方式 同上 4 . caffe 的 编译 与 
准备 保证 caffe 所需 依赖 都 安装 完成 后 在 
caffe 目录 下 执行 cp Makefile . config . example 
Makefile . config 根据 自己 的 实际 情况 修改 Makefile 
. config 的 内容 主要 修改 的 几个 如下 如果 
没有 GPU 只 打算 用 CPU 进行 实验 将 # 
CPU _ ONLY = 1 前 的 # 号 去掉 
如果 使用 GPU 且有 cuDNN 加速 将 # USE _ 
CUDNN = 1 前 的 # 号 去掉 如果 使用 
openBLAS 将 BLAS = atlas 改成 BLAS = open 并 
添加 BLAS _ INCLUDE = / usr / include / 
openblas Caffe 中 默认 的 矩阵 运算 库 为 ATLAS 
但是/c OpenBLAS/w 有/v 一些/m 性/n 能/v 优化/vn 因此 建议 换 
做 OpenBLAS 未完待续 