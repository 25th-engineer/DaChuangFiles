Github 地址 Mask _ RCNN 计算机 视觉 Mask RCNN _ 
论文 学习 计算机 视觉 Mask RCNN _ 项目 文档 翻译 
计算机 视觉 Mask RCNN _ 推断 网络 其一 总览 计算机 
视觉 Mask RCNN _ 推断 网络 其二 基于 ReNet101 的 
FPN 共享 网络 计算机 视觉 Mask RCNN _ 推断 网络 
其三 RPN 锚 框 处理 和 Proposal 生成 计算机 视觉 
Mask RCNN _ 推断 网络 其四 FPN 和 ROIAlign 的 
耦合 计算机 视觉 Mask RCNN _ 推断 网络 其五 目标 
检测 结果 精炼 计算机 视觉 Mask RCNN _ 推断 网络 
其 六 Mask 生成 计算机 视觉 Mask RCNN _ 推断 
网络 终篇 使用 detect 方法 进行 推断 计算机 视觉 Mask 
RCNN _ 锚 框 生成 计算机 视觉 Mask RCNN _ 
训练 网络 其一 数据集 与 Dataset 类 计算机 视觉 Mask 
RCNN _ 训练 网络 其二 train 网络结构 & 损失 函数 
计算机 视觉 Mask RCNN _ 训练 网络 其三 训练 Model 
一 和/c SSD/w 锚/n 框/v 对比/v Mask/w _/i RCNN/w 的/uj 
锚/n 框/v 本质/n 上/f 来说/u 和/c SSD/w 的/uj 是/v 一样/r 
的/uj TensorFlow SSD 源码 学习 _ 其三 锚 框 生成 
中心点 的 个数 等于 特征 层 像素数 框体 生成 是 
围绕 中心点 的 最终 的 框体 坐标 需要 归一化 到 
01 之间 都是 对于 输入 图片 的 相对 大小 RCNN 
系列 一般 都是/nr 一个 共享 特征 但在 Mask _ RCNN 
结构 引入 了 FPN 结构 后 和 SSD 一样 使用 
了 多层 特征 这样 两者 的 锚 框 生成 算法 
可以 说 是 如出一辙 了 只不过是 生成 策略 有所 微调 
SSD 中 不同 特征 层 对应 着 不同 的 网格 
增强 比例 参数 Mask _ RCNN 不通 层 的 比例 
anchor _ ratios 则 完全 一致 SSD 每 一层 每一个 
中心点 生成 该 层 ratio + 2个 框 Mask _ 
RCNN 生成 固定 3个 框 SSD 中心点 为 feat 像素 
偏移 0.5 步长 Mask _ RCNN 中心点 直接 选为 feat 
像素 位置 而 基本 生成 方式 两者 完全一致 h 乘 
anchor _ ratios * * 0.5 w 除 anchor _ 
ratios * * 0.5 h w 初始值 为 给定 的 
参考 尺寸 即 感受 野 控制 实际 依赖 的 参数 
为 每 一层 的 anchor _ ratios 和 参考 尺寸 
对 SSD anchor _ sizes = 21 . 45 . 
45 . 99 . 99 . 153 . 153 . 
207 . 207 . 261 . 261 . 315 . 
anchor _ ratios = 2 . 5 2 . 5 
3 1 . / 3 2 . 5 3 1 
. / 3 2 . 5 3 1 . / 
3 2 . 5 2 . 5 对 Mask _ 
RCNN h w 参考 尺寸 大小 一致 self . config 
. BACKBONE _ STRIDES = 4 8 16 32 64 
# 特征 层 的 下 采样 倍数 中心点 计算 使用 
self . config . RPN _ ANCHOR _ RATIOS = 
0.5 1 2 # 特征 层 锚 框 生成 参数 
self . config . RPN _ ANCHOR _ SCALES = 
32 64 128 256 512 # 特征 层 锚 框 
感受 野 二 锚 框 生成 锚 框 生成 入口 
函数 位于 model . py 中的 get _ anchor 函数 
需要 参数 image _ shape 保证 含有 h w 即可 
也 可以 包含 h w c def get _ anchors 
self image _ shape Returns anchor pyramid for the given 
image size . # N height width backbone _ shapes 
= compute _ backbone _ shapes self . config image 
_ shape # Cache anchors and reuse if image shape 
is the same if not hasattr self _ anchor _ 
cache self . _ anchor _ cache = { } 
if not tuple image _ shape in self . _ 
anchor _ cache # Generate Anchors anchor _ count y1 
x1 y2 x2 a = utils . generate _ pyramid 
_ anchors self . config . RPN _ ANCHOR _ 
SCALES # 32 64 128 256 512 self . config 
. RPN _ ANCHOR _ RATIOS # 0.5 1 2 
backbone _ shapes # with shape N height width self 
. config . BACKBONE _ STRIDES # 4 8 16 
32 64 self . config . RPN _ ANCHOR _ 
STRIDE # 1 # Keep a copy of the latest 
anchors in pixel coordinates because # it s used in 
inspect _ model notebooks . # TODO Remove this after 
the notebook are refactored to not use it self . 
anchors = a # Normalize coordinates self . _ anchor 
_ cache tuple image _ shape = utils . norm 
_ boxes a image _ shape 2 return self . 
_ anchor _ cache tuple image _ shape 调用函数 compute 
_ backbone _ shapes 计算 各 个 特征 层 shape 
def compute _ backbone _ shapes config image _ shape 
Computes the width and height of each stage of the 
backbone network . Returns N height width . Where N 
is the number of stages if callable config . BACKBONE 
return config . COMPUTE _ BACKBONE _ SHAPE image _ 
shape # Currently supports ResNet only assert config . BACKBONE 
in resnet50 resnet101 return np . array int math . 
ceil image _ shape 0 / stride int math . 
ceil image _ shape 1 / stride for stride in 
config . BACKBONE _ STRIDES # 4 8 16 32 
64 调用函数 utils . generate _ pyramid _ anchors 生成 
全部 锚 框 def generate _ pyramid _ anchors scales 
ratios feature _ shapes feature _ strides anchor _ stride 
Generate anchors at different levels of a feature pyramid . 
Each scale is associated with a level of the pyramid 
but each ratio is used in all levels of the 
pyramid . Returns anchors N y1 x1 y2 x2 . 
All generated anchors in one array . Sorted with the 
same order of the given scales . So anchors of 
scale 0 come first then anchors of scale 1 and 
so on . # Anchors # anchor _ count y1 
x1 y2 x2 anchors = for i in range len 
scales anchors . append generate _ anchors scales i ratios 
feature _ shapes i feature _ strides i anchor _ 
stride # anchor _ count y1 x1 y2 x2 return 
np . concatenate anchors axis = 0 utils . generate 
_ pyramid _ anchors 会 调用 utils . generate _ 
anchors 来 生成 每 一层 的 锚 框 这一步 较多 
的 使用 了 函数 meshgrid 介绍 见 Numpy np . 
meshgrid def generate _ anchors scales ratios shape feature _ 
stride anchor _ stride scales 1D array of anchor sizes 
in pixels . Example 32 64 128 ratios 1D array 
of anchor ratios of width / height . Example 0.5 
1 2 shape height width spatial shape of the feature 
map over which to generate anchors . feature _ stride 
Stride of the feature map relative to the image in 
pixels . anchor _ stride Stride of anchors on the 
feature map . For example if the value is 2 
then generate anchors for every other feature map pixel . 
# Get all combinations of scales and ratios scales ratios 
= np . meshgrid np . array scales np . 
array ratios scales = scales . flatten ratios = ratios 
. flatten # Enumerate heights and widths from scales and 
ratios heights = scales / np . sqrt ratios widths 
= scales * np . sqrt ratios # Enumerate shifts 
in feature space shifts _ y = np . arange 
0 shape 0 anchor _ stride * feature _ stride 
shifts _ x = np . arange 0 shape 1 
anchor _ stride * feature _ stride shifts _ x 
shifts _ y = np . meshgrid shifts _ x 
shifts _ y # Enumerate combinations of shifts widths and 
heights box _ widths box _ centers _ x = 
np . meshgrid widths shifts _ x # n 3 
n 3 box _ heights box _ centers _ y 
= np . meshgrid heights shifts _ y # n 
3 n 3 # Reshape to get a list of 
y x and a list of h w # n 
3 2 3n 2 box _ centers = np . 
stack box _ centers _ y box _ centers _ 
x axis = 2 . reshape 1 2 box _ 
sizes = np . stack box _ heights box _ 
widths axis = 2 . reshape 1 2 # Convert 
to corner coordinates y1 x1 y2 x2 boxes = np 
. concatenate box _ centers 0.5 * box _ sizes 
box _ centers + 0.5 * box _ sizes axis 
= 1 # 框体 信息 是 相对于 原图 的 N 
y1 x1 y2 x2 return boxes 模拟 某 层 的 
中心 点 分布 最后 回到 get _ anchor 调用 utils 
. norm _ boxes 将 锚 框 坐标 化为 01 
之间 def norm _ boxes boxes shape Converts boxes from 
pixel coordinates to normalized coordinates . boxes N y1 x1 
y2 x2 in pixel coordinates shape . . . height 
width in pixels Note In pixel coordinates y2 x2 is 
outside the box . But in normalized coordinates it s 
inside the box . Returns N y1 x1 y2 x2 
in normalized coordinates h w = shape scale = np 
. array h 1 w 1 h 1 w 1 
shift = np . array 0 0 1 1 return 
np . divide boxes shift scale . astype np . 
float32 最终 返回 相 对坐 标下 的 锚 框 shape 
anchor _ count y1 x1 y2 x2 Github 地址 Mask _ RCNN 计算机 视觉 Mask RCNN _ 
论文 学习 计算机 视觉 Mask RCNN _ 项目 文档 翻译 
计算机 视觉 Mask RCNN _ 推断 网络 其一 总览 计算机 
视觉 Mask RCNN _ 推断 网络 其二 基于 ReNet101 的 
FPN 共享 网络 计算机 视觉 Mask RCNN _ 推断 网络 
其三 RPN 锚 框 处理 和 Proposal 生成 计算机 视觉 
Mask RCNN _ 推断 网络 其四 FPN 和 ROIAlign 的 
耦合 计算机 视觉 Mask RCNN _ 推断 网络 其五 目标 
检测 结果 精炼 计算机 视觉 Mask RCNN _ 推断 网络 
其 六 Mask 生成 计算机 视觉 Mask RCNN _ 推断 
网络 终篇 使用 detect 方法 进行 推断 计算机 视觉 Mask 
RCNN _ 锚 框 生成 计算机 视觉 Mask RCNN _ 
训练 网络 其一 数据集 与 Dataset 类 计算机 视觉 Mask 
RCNN _ 训练 网络 其二 train 网络结构 & 损失 函数 
计算机 视觉 Mask RCNN _ 训练 网络 其三 训练 Model 
一 和/c SSD/w 锚/n 框/v 对比/v Mask/w _/i RCNN/w 的/uj 
锚/n 框/v 本质/n 上/f 来说/u 和/c SSD/w 的/uj 是/v 一样/r 
的/uj TensorFlow SSD 源码 学习 _ 其三 锚 框 生成 
中心点 的 个数 等于 特征 层 像素数 框体 生成 是 
围绕 中心点 的 最终 的 框体 坐标 需要 归一化 到 
01 之间 都是 对于 输入 图片 的 相对 大小 RCNN 
系列 一般 都是/nr 一个 共享 特征 但在 Mask _ RCNN 
结构 引入 了 FPN 结构 后 和 SSD 一样 使用 
了 多层 特征 这样 两者 的 锚 框 生成 算法 
可以 说 是 如出一辙 了 只不过是 生成 策略 有所 微调 
SSD 中 不同 特征 层 对应 着 不同 的 网格 
增强 比例 参数 Mask _ RCNN 不通 层 的 比例 
anchor _ ratios 则 完全 一致 SSD 每 一层 每一个 
中心点 生成 该 层 ratio + 2个 框 Mask _ 
RCNN 生成 固定 3个 框 SSD 中心点 为 feat 像素 
偏移 0.5 步长 Mask _ RCNN 中心点 直接 选为 feat 
像素 位置 而 基本 生成 方式 两者 完全一致 h 乘 
anchor _ ratios * * 0.5 w 除 anchor _ 
ratios * * 0.5 h w 初始值 为 给定 的 
参考 尺寸 即 感受 野 控制 实际 依赖 的 参数 
为 每 一层 的 anchor _ ratios 和 参考 尺寸 
对 SSD anchor _ sizes = 21 . 45 . 
45 . 99 . 99 . 153 . 153 . 
207 . 207 . 261 . 261 . 315 . 
anchor _ ratios = 2 . 5 2 . 5 
3 1 . / 3 2 . 5 3 1 
. / 3 2 . 5 3 1 . / 
3 2 . 5 2 . 5 对 Mask _ 
RCNN h w 参考 尺寸 大小 一致 self . config 
. BACKBONE _ STRIDES = 4 8 16 32 64 
# 特征 层 的 下 采样 倍数 中心点 计算 使用 
self . config . RPN _ ANCHOR _ RATIOS = 
0.5 1 2 # 特征 层 锚 框 生成 参数 
self . config . RPN _ ANCHOR _ SCALES = 
32 64 128 256 512 # 特征 层 锚 框 
感受 野 二 锚 框 生成 锚 框 生成 入口 
函数 位于 model . py 中的 get _ anchor 函数 
需要 参数 image _ shape 保证 含有 h w 即可 
也 可以 包含 h w c def get _ anchors 
self image _ shape Returns anchor pyramid for the given 
image size . # N height width backbone _ shapes 
= compute _ backbone _ shapes self . config image 
_ shape # Cache anchors and reuse if image shape 
is the same if not hasattr self _ anchor _ 
cache self . _ anchor _ cache = { } 
if not tuple image _ shape in self . _ 
anchor _ cache # Generate Anchors anchor _ count y1 
x1 y2 x2 a = utils . generate _ pyramid 
_ anchors self . config . RPN _ ANCHOR _ 
SCALES # 32 64 128 256 512 self . config 
. RPN _ ANCHOR _ RATIOS # 0.5 1 2 
backbone _ shapes # with shape N height width self 
. config . BACKBONE _ STRIDES # 4 8 16 
32 64 self . config . RPN _ ANCHOR _ 
STRIDE # 1 # Keep a copy of the latest 
anchors in pixel coordinates because # it s used in 
inspect _ model notebooks . # TODO Remove this after 
the notebook are refactored to not use it self . 
anchors = a # Normalize coordinates self . _ anchor 
_ cache tuple image _ shape = utils . norm 
_ boxes a image _ shape 2 return self . 
_ anchor _ cache tuple image _ shape 调用函数 compute 
_ backbone _ shapes 计算 各 个 特征 层 shape 
def compute _ backbone _ shapes config image _ shape 
Computes the width and height of each stage of the 
backbone network . Returns N height width . Where N 
is the number of stages if callable config . BACKBONE 
return config . COMPUTE _ BACKBONE _ SHAPE image _ 
shape # Currently supports ResNet only assert config . BACKBONE 
in resnet50 resnet101 return np . array int math . 
ceil image _ shape 0 / stride int math . 
ceil image _ shape 1 / stride for stride in 
config . BACKBONE _ STRIDES # 4 8 16 32 
64 调用函数 utils . generate _ pyramid _ anchors 生成 
全部 锚 框 def generate _ pyramid _ anchors scales 
ratios feature _ shapes feature _ strides anchor _ stride 
Generate anchors at different levels of a feature pyramid . 
Each scale is associated with a level of the pyramid 
but each ratio is used in all levels of the 
pyramid . Returns anchors N y1 x1 y2 x2 . 
All generated anchors in one array . Sorted with the 
same order of the given scales . So anchors of 
scale 0 come first then anchors of scale 1 and 
so on . # Anchors # anchor _ count y1 
x1 y2 x2 anchors = for i in range len 
scales anchors . append generate _ anchors scales i ratios 
feature _ shapes i feature _ strides i anchor _ 
stride # anchor _ count y1 x1 y2 x2 return 
np . concatenate anchors axis = 0 utils . generate 
_ pyramid _ anchors 会 调用 utils . generate _ 
anchors 来 生成 每 一层 的 锚 框 这一步 较多 
的 使用 了 函数 meshgrid 介绍 见 Numpy np . 
meshgrid def generate _ anchors scales ratios shape feature _ 
stride anchor _ stride scales 1D array of anchor sizes 
in pixels . Example 32 64 128 ratios 1D array 
of anchor ratios of width / height . Example 0.5 
1 2 shape height width spatial shape of the feature 
map over which to generate anchors . feature _ stride 
Stride of the feature map relative to the image in 
pixels . anchor _ stride Stride of anchors on the 
feature map . For example if the value is 2 
then generate anchors for every other feature map pixel . 
# Get all combinations of scales and ratios scales ratios 
= np . meshgrid np . array scales np . 
array ratios scales = scales . flatten ratios = ratios 
. flatten # Enumerate heights and widths from scales and 
ratios heights = scales / np . sqrt ratios widths 
= scales * np . sqrt ratios # Enumerate shifts 
in feature space shifts _ y = np . arange 
0 shape 0 anchor _ stride * feature _ stride 
shifts _ x = np . arange 0 shape 1 
anchor _ stride * feature _ stride shifts _ x 
shifts _ y = np . meshgrid shifts _ x 
shifts _ y # Enumerate combinations of shifts widths and 
heights box _ widths box _ centers _ x = 
np . meshgrid widths shifts _ x # n 3 
n 3 box _ heights box _ centers _ y 
= np . meshgrid heights shifts _ y # n 
3 n 3 # Reshape to get a list of 
y x and a list of h w # n 
3 2 3n 2 box _ centers = np . 
stack box _ centers _ y box _ centers _ 
x axis = 2 . reshape 1 2 box _ 
sizes = np . stack box _ heights box _ 
widths axis = 2 . reshape 1 2 # Convert 
to corner coordinates y1 x1 y2 x2 boxes = np 
. concatenate box _ centers 0.5 * box _ sizes 
box _ centers + 0.5 * box _ sizes axis 
= 1 # 框体 信息 是 相对于 原图 的 N 
y1 x1 y2 x2 return boxes 模拟 某 层 的 
中心 点 分布 最后 回到 get _ anchor 调用 utils 
. norm _ boxes 将 锚 框 坐标 化为 01 
之间 def norm _ boxes boxes shape Converts boxes from 
pixel coordinates to normalized coordinates . boxes N y1 x1 
y2 x2 in pixel coordinates shape . . . height 
width in pixels Note In pixel coordinates y2 x2 is 
outside the box . But in normalized coordinates it s 
inside the box . Returns N y1 x1 y2 x2 
in normalized coordinates h w = shape scale = np 
. array h 1 w 1 h 1 w 1 
shift = np . array 0 0 1 1 return 
np . divide boxes shift scale . astype np . 
float32 最终 返回 相 对坐 标下 的 锚 框 shape 
anchor _ count y1 x1 y2 x2 Github 地址 Mask _ RCNN 计算机 视觉 Mask RCNN _ 
论文 学习 计算机 视觉 Mask RCNN _ 项目 文档 翻译 
计算机 视觉 Mask RCNN _ 推断 网络 其一 总览 计算机 
视觉 Mask RCNN _ 推断 网络 其二 基于 ReNet101 的 
FPN 共享 网络 计算机 视觉 Mask RCNN _ 推断 网络 
其三 RPN 锚 框 处理 和 Proposal 生成 计算机 视觉 
Mask RCNN _ 推断 网络 其四 FPN 和 ROIAlign 的 
耦合 计算机 视觉 Mask RCNN _ 推断 网络 其五 目标 
检测 结果 精炼 计算机 视觉 Mask RCNN _ 推断 网络 
其 六 Mask 生成 计算机 视觉 Mask RCNN _ 推断 
网络 终篇 使用 detect 方法 进行 推断 计算机 视觉 Mask 
RCNN _ 锚 框 生成 计算机 视觉 Mask RCNN _ 
训练 网络 其一 数据集 与 Dataset 类 计算机 视觉 Mask 
RCNN _ 训练 网络 其二 train 网络结构 & 损失 函数 
计算机 视觉 Mask RCNN _ 训练 网络 其三 训练 Model 
一 和/c SSD/w 锚/n 框/v 对比/v Mask/w _/i RCNN/w 的/uj 
锚/n 框/v 本质/n 上/f 来说/u 和/c SSD/w 的/uj 是/v 一样/r 
的/uj TensorFlow SSD 源码 学习 _ 其三 锚 框 生成 
中心点 的 个数 等于 特征 层 像素数 框体 生成 是 
围绕 中心点 的 最终 的 框体 坐标 需要 归一化 到 
01 之间 都是 对于 输入 图片 的 相对 大小 RCNN 
系列 一般 都是/nr 一个 共享 特征 但在 Mask _ RCNN 
结构 引入 了 FPN 结构 后 和 SSD 一样 使用 
了 多层 特征 这样 两者 的 锚 框 生成 算法 
可以 说 是 如出一辙 了 只不过是 生成 策略 有所 微调 
SSD 中 不同 特征 层 对应 着 不同 的 网格 
增强 比例 参数 Mask _ RCNN 不通 层 的 比例 
anchor _ ratios 则 完全 一致 SSD 每 一层 每一个 
中心点 生成 该 层 ratio + 2个 框 Mask _ 
RCNN 生成 固定 3个 框 SSD 中心点 为 feat 像素 
偏移 0.5 步长 Mask _ RCNN 中心点 直接 选为 feat 
像素 位置 而 基本 生成 方式 两者 完全一致 h 乘 
anchor _ ratios * * 0.5 w 除 anchor _ 
ratios * * 0.5 h w 初始值 为 给定 的 
参考 尺寸 即 感受 野 控制 实际 依赖 的 参数 
为 每 一层 的 anchor _ ratios 和 参考 尺寸 
对 SSD anchor _ sizes = 21 . 45 . 
45 . 99 . 99 . 153 . 153 . 
207 . 207 . 261 . 261 . 315 . 
anchor _ ratios = 2 . 5 2 . 5 
3 1 . / 3 2 . 5 3 1 
. / 3 2 . 5 3 1 . / 
3 2 . 5 2 . 5 对 Mask _ 
RCNN h w 参考 尺寸 大小 一致 self . config 
. BACKBONE _ STRIDES = 4 8 16 32 64 
# 特征 层 的 下 采样 倍数 中心点 计算 使用 
self . config . RPN _ ANCHOR _ RATIOS = 
0.5 1 2 # 特征 层 锚 框 生成 参数 
self . config . RPN _ ANCHOR _ SCALES = 
32 64 128 256 512 # 特征 层 锚 框 
感受 野 二 锚 框 生成 锚 框 生成 入口 
函数 位于 model . py 中的 get _ anchor 函数 
需要 参数 image _ shape 保证 含有 h w 即可 
也 可以 包含 h w c def get _ anchors 
self image _ shape Returns anchor pyramid for the given 
image size . # N height width backbone _ shapes 
= compute _ backbone _ shapes self . config image 
_ shape # Cache anchors and reuse if image shape 
is the same if not hasattr self _ anchor _ 
cache self . _ anchor _ cache = { } 
if not tuple image _ shape in self . _ 
anchor _ cache # Generate Anchors anchor _ count y1 
x1 y2 x2 a = utils . generate _ pyramid 
_ anchors self . config . RPN _ ANCHOR _ 
SCALES # 32 64 128 256 512 self . config 
. RPN _ ANCHOR _ RATIOS # 0.5 1 2 
backbone _ shapes # with shape N height width self 
. config . BACKBONE _ STRIDES # 4 8 16 
32 64 self . config . RPN _ ANCHOR _ 
STRIDE # 1 # Keep a copy of the latest 
anchors in pixel coordinates because # it s used in 
inspect _ model notebooks . # TODO Remove this after 
the notebook are refactored to not use it self . 
anchors = a # Normalize coordinates self . _ anchor 
_ cache tuple image _ shape = utils . norm 
_ boxes a image _ shape 2 return self . 
_ anchor _ cache tuple image _ shape 调用函数 compute 
_ backbone _ shapes 计算 各 个 特征 层 shape 
def compute _ backbone _ shapes config image _ shape 
Computes the width and height of each stage of the 
backbone network . Returns N height width . Where N 
is the number of stages if callable config . BACKBONE 
return config . COMPUTE _ BACKBONE _ SHAPE image _ 
shape # Currently supports ResNet only assert config . BACKBONE 
in resnet50 resnet101 return np . array int math . 
ceil image _ shape 0 / stride int math . 
ceil image _ shape 1 / stride for stride in 
config . BACKBONE _ STRIDES # 4 8 16 32 
64 调用函数 utils . generate _ pyramid _ anchors 生成 
全部 锚 框 def generate _ pyramid _ anchors scales 
ratios feature _ shapes feature _ strides anchor _ stride 
Generate anchors at different levels of a feature pyramid . 
Each scale is associated with a level of the pyramid 
but each ratio is used in all levels of the 
pyramid . Returns anchors N y1 x1 y2 x2 . 
All generated anchors in one array . Sorted with the 
same order of the given scales . So anchors of 
scale 0 come first then anchors of scale 1 and 
so on . # Anchors # anchor _ count y1 
x1 y2 x2 anchors = for i in range len 
scales anchors . append generate _ anchors scales i ratios 
feature _ shapes i feature _ strides i anchor _ 
stride # anchor _ count y1 x1 y2 x2 return 
np . concatenate anchors axis = 0 utils . generate 
_ pyramid _ anchors 会 调用 utils . generate _ 
anchors 来 生成 每 一层 的 锚 框 这一步 较多 
的 使用 了 函数 meshgrid 介绍 见 Numpy np . 
meshgrid def generate _ anchors scales ratios shape feature _ 
stride anchor _ stride scales 1D array of anchor sizes 
in pixels . Example 32 64 128 ratios 1D array 
of anchor ratios of width / height . Example 0.5 
1 2 shape height width spatial shape of the feature 
map over which to generate anchors . feature _ stride 
Stride of the feature map relative to the image in 
pixels . anchor _ stride Stride of anchors on the 
feature map . For example if the value is 2 
then generate anchors for every other feature map pixel . 
# Get all combinations of scales and ratios scales ratios 
= np . meshgrid np . array scales np . 
array ratios scales = scales . flatten ratios = ratios 
. flatten # Enumerate heights and widths from scales and 
ratios heights = scales / np . sqrt ratios widths 
= scales * np . sqrt ratios # Enumerate shifts 
in feature space shifts _ y = np . arange 
0 shape 0 anchor _ stride * feature _ stride 
shifts _ x = np . arange 0 shape 1 
anchor _ stride * feature _ stride shifts _ x 
shifts _ y = np . meshgrid shifts _ x 
shifts _ y # Enumerate combinations of shifts widths and 
heights box _ widths box _ centers _ x = 
np . meshgrid widths shifts _ x # n 3 
n 3 box _ heights box _ centers _ y 
= np . meshgrid heights shifts _ y # n 
3 n 3 # Reshape to get a list of 
y x and a list of h w # n 
3 2 3n 2 box _ centers = np . 
stack box _ centers _ y box _ centers _ 
x axis = 2 . reshape 1 2 box _ 
sizes = np . stack box _ heights box _ 
widths axis = 2 . reshape 1 2 # Convert 
to corner coordinates y1 x1 y2 x2 boxes = np 
. concatenate box _ centers 0.5 * box _ sizes 
box _ centers + 0.5 * box _ sizes axis 
= 1 # 框体 信息 是 相对于 原图 的 N 
y1 x1 y2 x2 return boxes 模拟 某 层 的 
中心 点 分布 最后 回到 get _ anchor 调用 utils 
. norm _ boxes 将 锚 框 坐标 化为 01 
之间 def norm _ boxes boxes shape Converts boxes from 
pixel coordinates to normalized coordinates . boxes N y1 x1 
y2 x2 in pixel coordinates shape . . . height 
width in pixels Note In pixel coordinates y2 x2 is 
outside the box . But in normalized coordinates it s 
inside the box . Returns N y1 x1 y2 x2 
in normalized coordinates h w = shape scale = np 
. array h 1 w 1 h 1 w 1 
shift = np . array 0 0 1 1 return 
np . divide boxes shift scale . astype np . 
float32 最终 返回 相 对坐 标下 的 锚 框 shape 
anchor _ count y1 x1 y2 x2 