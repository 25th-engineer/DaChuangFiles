深度 学习 与 计算机 视觉 系列 1 _ 基础 介绍 
作者 寒 小阳 时间 2015年 11月 出处 http / / 
blog . csdn . net / han _ xiaoyang / 
article / details / 49876119 声明 版权所有 转载 请 注明 
出处 谢谢 1 . 背景 计算机 视觉 / computer vision 
是 一个 火了 N 年的/nr topic 持续化 升温 的 原因 
也 非常 简单 在 搜索 / 影像 内容 理解 / 
医学 应用 / 地图 识别 等 等 领域 应用 太多 
大家 都 有一个 愿景 让 计算机 能够 像 人 一样 
去 看 一张 图片 甚至 读懂 一张 图片 有几个 比较 
重要 的 计算机 视觉 任务 比如 图片 的 分类 物体 
识别 物体 定位 于 检测 等等 而 近年来 的 神经 
网络 / 深度 学习 使得 上述 任务 的 准确度 有了 
非常大 的 提升 加之 最近 做了 几个 不大不小 的 计算机 
视觉上 的 项目 爱 凑热闹 的 博主 自然 不 打算 
放过 此 领域 也 边学边 做 点 笔记 总结 写点 
东西 写 的 不 正确 的 地方 欢迎 大家 提出 
和 指正 2 . 基础 知识 为 了 简单 易读 
易懂 这个 课程 笔记 系列 中 绝大多数 的 代码 都 
使用 Python 完成 这里 稍微 介绍 一下 python 和 Numpy 
/ Scipy python 中的 科学计算 包 的 一些 基础 2.1 
python 基础 python 是 一种 长得 像 伪代码 具备 高 
可读性 的 编程语言 优点 挺多 可读性 相当 好 写 起来 
也 简单 所想 立马 可以 转 为实现 代码 且 社区 
即为 活跃 可用 的 package 相当多 缺点 效率 一般 2 
. 1.1 基本 数据类型 最 常用 的 有 数值 型 
Numbers 布尔 型 Booleans 和 字符串 String 三种 数值 型 
Numbers 可 进行 简单 的 运算 如下 x = 5 
print type x # Prints type int print x # 
Prints 5 print x + 1 # 加 prints 6 
print x 1 # 减 prints 4 print x * 
2 # 乘 prints 10 print x * * 2 
# 幂 prints 25 x + = 1 # 自 
加 print x # Prints 6 x * = 2 
# 自乘 print x # Prints 12 y = 2.5 
print type y # Prints type float print y y 
+ 1 y * 2 y * * 2 # 
Prints 2.5 3.5 5.0 6.25 1 2 3 4 5 
6 7 8 9 1 0 1 1 1 2 
1 3 1 4 1 2 3 4 5 6 
7 8 9 1 0 1 1 1 2 1 
3 1 4 P python 中 没有 x + + 
和 x – 操作 布尔 型 Booleans 包含 True False 
和 常见 的 与 或非 操作 t = True f 
= False print type t # Prints type bool print 
t and f # 逻辑与 prints False print t or 
f # 逻辑或 prints True print not t # 逻辑非 
prints False print t = f # XOR prints True 
12345671234567 字符串 型 String 字符串 可以 用 单引号 / 双引号 
/ 三 引号 声明 hello = hello world = world 
print hello # Prints hello print len hello # 字符串 
长度 prints 5 hw = hello + + world # 
字符串 连接 print hw # prints hello world hw2015 = 
% s % s % d % hello world 2015 
# 格式化 字符串 print hw2015 # prints hello world 2015 
1234567812345678 字符串 对象 有 很有 有用 的 函数 s = 
hello print s . capitalize # 首字母 大写 prints Hello 
print s . upper # 全 大写 prints HELLO print 
s . rjust 7 # 以 7 为 长度 右对齐 
左边 补 空格 prints hello print s . center 7 
# 居中 补 空格 prints hello print s . replace 
l ell # 字串 替换 prints he ell ell o 
print world . strip # 去 首位 空格 prints world 
123456712345672 . 1.2 基本 容器 列表 / List 和 数组 
类似 的 一个 东东 不过 可以 包含 不同 类型 的 
元素 同时 大小 也 是 可以 调整 的 xs = 
3 1 2 # 创建 print xs xs 2 # 
Prints 3 1 2 2 print xs 1 # 第 
1个 元素 即 最后 一个 xs 2 = foo # 
下标 从0/nr 开始 这是 第 3个 元素 print xs # 
可以 有 不同 类型 Prints 3 1 foo xs . 
append bar # 尾部 添加 一个 元素 print xs # 
Prints x = xs . pop # 去掉 尾部 的 
元素 print x xs # Prints bar 3 1 foo 
1 2 3 4 5 6 7 8 9 1 
2 3 4 5 6 7 8 9 列表 最 
常用 的 操作 有 切片 / slicing 即 取 子 
序列 / 一部分 元素 如下 nums = range 5 # 
从1到/nr 5 的 序列 print nums # Prints 0 1 
2 3 4 print nums 2 4 # 下标 从2到/nr 
4 1 的 元素 prints 2 3 print nums 2 
# 下标 从2到/nr 结尾 的 元素 print nums 2 # 
从 开头 到 下标 为 2 1 的 元素 0 
1 print nums # 恩 就是 全取/nr 出来 了 print 
nums 1 # 从 开始 到 第 1个 元素 最后 
的 元素 nums 2 4 = 8 9 # 对子 
序列 赋值 print nums # Prints 0 1 8 8 
4 1 2 3 4 5 6 7 8 9 
1 2 3 4 5 6 7 8 9 循环 
/ loops 即 遍历 整个 list 做 一些 操作 如下 
animals = cat dog monkey for animal in animals print 
animal # 依次 输出 cat dog monkey 每个 一行 . 
12341234 可以用 enumerate 取出 元素 的 同时 带出 下标 animals 
= cat dog monkey for idx animal in enumerate animals 
print # % d % s % idx + 1 
animal # 输出 # 1 cat # 2 dog # 
3 monkey 一个 一行 12341234List comprehension 这个 相当 相当 相当 
有用 在 很长 的 list 生成 过程 中 效率 完胜 
for 循环 # for 循环 nums = 0 1 2 
3 4 squares = for x in nums squares . 
append x * * 2 print squares # Prints 0 
1 4 9 16 # list comprehension nums = 0 
1 2 3 4 squares = x * * 2 
for x in nums print squares # Prints 0 1 
4 9 16 1 2 3 4 5 6 7 
8 9 1 0 1 1 1 2 3 4 
5 6 7 8 9 1 0 1 1 你 
猜 怎么着 list comprehension 也 是 可以 加 多重 条件 
的 nums = 0 1 2 3 4 even _ 
squares = x * * 2 for x in nums 
if x % 2 = = 0 print even _ 
squares # Prints 0 4 16 123123 字典 / Dict 
和 Java 中的 Map 一样 的 东东 用于 存储 key 
value 对 d = { cat cute dog furry } 
# 创建 print d cat # 根据 key 取出 value 
print cat in d # 判断 是否 有 cat 这个 
key d fish = wet # 添加 元素 print d 
fish # Prints wet # print d monkey # KeyError 
monkey 非本 字典 的 key print d . get monkey 
N / A # 有 key 返回 value 无 key 
返回 N / A print d . get fish N 
/ A # prints wet del d fish # 删除 
某个 key 以及 对应 的 value print d . get 
fish N / A # prints N / A 1 
2 3 4 5 6 7 8 9 1 0 
1 2 3 4 5 6 7 8 9 1 
0 对应 list 的 那些 操作 你 在 dict 里面 
也能 找 得到 循环 / loops # for 循环 d 
= { person 2 cat 4 spider 8 } for 
animal in d legs = d animal print A % 
s has % d legs % animal legs # Prints 
A person has 2 legs A spider has 8 legs 
A cat has 4 legs # 通过 iteritems d = 
{ person 2 cat 4 spider 8 } for animal 
legs in d . iteritems print A % s has 
% d legs % animal legs # Prints A person 
has 2 legs A spider has 8 legs A cat 
has 4 legs 1 2 3 4 5 6 7 
8 9 1 0 1 1 1 2 1 2 
3 4 5 6 7 8 9 1 0 1 
1 1 2 # Dictionary comprehension nums = 0 1 
2 3 4 even _ num _ to _ square 
= { x x * * 2 for x in 
nums if x % 2 = = 0 } print 
even _ num _ to _ square # Prints { 
0 0 2 4 4 16 } 12341234 元组 / 
turple 本质上 说 还是 一个 list 只不过 里面 的 每个 
元素 都是/nr 一个 两 元组 对 d = { x 
x + 1 x for x in range 10 } 
# 创建 t = 5 6 # Create a tuple 
print type t # Prints type tuple print d t 
# Prints 5 print d 1 2 # Prints 1 
12345123452 . 1.3 函 数用 def 可以 定义 一个 函数 
def sign x if x 0 return positive elif x 
0 return negative else return zero for x in 1 
0 1 print sign x # Prints negative zero positive 
1 2 3 4 5 6 7 8 9 1 
0 1 1 1 2 3 4 5 6 7 
8 9 1 0 1 1 d e f hello 
name loud = False if loud print HELLO % s 
% name . upper else print Hello % s % 
name hello Bob # Prints Hello Bob hello Fred loud 
= True # Prints HELLO FRED 1234567812345678 类 / Classpython 
里面 的 类 定义 非常 的 直接 和 简洁 class 
Greeter # Constructor def _ _ init _ _ self 
name self . name = name # Create an instance 
variable # Instance method def greet self loud = False 
if loud print HELLO % s % self . name 
. upper else print Hello % s % self . 
name g = Greeter Fred # Construct an instance of 
the Greeter class g . greet # Call an instance 
method prints Hello Fred g . greet loud = True 
# Call an instance method prints HELLO FRED 1 2 
3 4 5 6 7 8 9 1 0 1 
1 1 2 1 3 1 4 1 5 1 
6 1 2 3 4 5 6 7 8 9 
1 0 1 1 1 2 1 3 1 4 
1 5 1 6 2 . 2 . NumPy 基础 
NumPy 是 Python 的 科学 计算 的 一个 核心 库 
它 提供 了 一个 高 性能 的 多维 数组 矩阵 
对象 可以 完成 在其 之上 的 很多 操作 很多 机器学习 
中的 计算 问题 把 数据 vectorize 之后 可以 进行 非常 
高效 的 运算 2 . 2.1 数组 一个 NumPy 数组 
是 一些 类型 相同 的 元素 组成 的 类 矩阵 
数据 用 list 或者 层叠 的 list 可以 初始化 import 
numpy as np a = np . array 1 2 
3 # 一维 Numpy 数组 print type a # Prints 
type numpy . ndarray print a . shape # Prints 
3 print a 0 a 1 a 2 # Prints 
1 2 3 a 0 = 5 # 重 赋值 
print a # Prints 5 2 3 b = np 
. array 1 2 3 4 5 6 # 二维 
Numpy 数组 print b . shape # Prints 2 3 
print b 0 0 b 0 1 b 1 0 
# Prints 1 2 4 1 2 3 4 5 
6 7 8 9 1 0 1 1 1 2 
1 2 3 4 5 6 7 8 9 1 
0 1 1 1 2 生成 一些 特殊 的 Numpy 
数组 矩阵 时 我们 有 特定 的 函数 可以 调用 
import numpy as np a = np . zeros 2 
2 # 全0的/nr 2 * 2 Numpy 数组 print a 
# Prints 0 . 0 . # 0 . 0 
. b = np . ones 1 2 # 全1/nr 
Numpy 数组 print b # Prints 1 . 1 . 
c = np . full 2 2 7 # 固定值 
Numpy 数组 print c # Prints 7 . 7 . 
# 7 . 7 . d = np . eye 
2 # 2 * 2 对角 Numpy 数组 print d 
# Prints 1 . 0 . # 0 . 1 
. e = np . random . random 2 2 
# 2 * 2 的 随机 Numpy 数组 print e 
# 随机 输出 1 2 3 4 5 6 7 
8 9 1 0 1 1 1 2 1 3 
1 4 1 5 1 6 1 7 1 8 
1 9 1 2 3 4 5 6 7 8 
9 1 0 1 1 1 2 1 3 1 
4 1 5 1 6 1 7 1 8 1 
9 2 . 2.2 Numpy 数组 索引 与 取值 可以 
通过 像 list 一样 的 分片 / slicing 操作 取出 
需要 的 数值 部分 import numpy as np # 创建 
如下 的 3 * 4 Numpy 数组 # 1 2 
3 4 # 5 6 7 8 # 9 10 
11 12 a = np . array 1 2 3 
4 5 6 7 8 9 10 11 12 # 
通过 slicing 取出 前 两行 的 2 到 3列 # 
2 3 # 6 7 b = a 2 1 
3 # 需要 注意 的 是 取出 的 b 中 
的 数据 实际上 和a的/nr 这 部分 数据 是 同 一份 
数据 . print a 0 1 # Prints 2 b 
0 0 = 77 # b 0 0 和 a 
0 1 是 同 一份 数据 print a 0 1 
# a 也被 修改 了 Prints 77 1 2 3 
4 5 6 7 8 9 1 0 1 1 
1 2 1 3 1 4 1 5 1 6 
1 7 1 2 3 4 5 6 7 8 
9 1 0 1 1 1 2 1 3 1 
4 1 5 1 6 1 7 i m p 
o r t numpy as np a = np . 
array 1 2 3 4 5 6 7 8 9 
10 11 12 row _ r1 = a 1 # 
a 的 第二 行 row _ r2 = a 1 
2 # 同上 print row _ r1 row _ r1 
. shape # Prints 5 6 7 8 4 print 
row _ r2 row _ r2 . shape # Prints 
5 6 7 8 1 4 col _ r1 = 
a 1 col _ r2 = a 1 2 print 
col _ r1 col _ r1 . shape # Prints 
2 6 10 3 print col _ r2 col _ 
r2 . shape # Prints 2 # 6 # 10 
3 1 1 2 3 4 5 6 7 8 
9 1 0 1 1 1 2 1 3 1 
4 1 5 1 2 3 4 5 6 7 
8 9 1 0 1 1 1 2 1 3 
1 4 1 5 还 可以 这么 着 取 import 
numpy as np a = np . array 1 2 
3 4 5 6 # 取出 0 0 1 1 
2 0 三个 位置 的 值 print a 0 1 
2 0 1 0 # Prints 1 4 5 # 
和 上面 一样 print np . array a 0 0 
a 1 1 a 2 0 # Prints 1 4 
5 # 取出 0 1 0 1 两个 位置 的 
值 print a 0 0 1 1 # Prints 2 
2 # 同上 print np . array a 0 1 
a 0 1 # Prints 2 2 1 2 3 
4 5 6 7 8 9 1 0 1 1 
1 2 1 3 1 4 1 5 1 2 
3 4 5 6 7 8 9 1 0 1 
1 1 2 1 3 1 4 1 5 我们 
还 可以 通过 条件 得到 bool 型 的 Numpy 数组 
结果 再 通过 这个 数组 取出 符合 条件 的 值 
如下 import numpy as np a = np . array 
1 2 3 4 5 6 bool _ idx = 
a 2 # 判定 a 大于 2 的 结果 矩阵 
print bool _ idx # Prints False False # True 
True # True True # 再通过 bool _ idx 取出 
我们 要 的 值 print a bool _ idx # 
Prints 3 4 5 6 # 放在 一起 我们 可以 
这么 写 print a a 2 # Prints 3 4 
5 6 1 2 3 4 5 6 7 8 
9 1 0 1 1 1 2 1 3 1 
4 1 5 1 2 3 4 5 6 7 
8 9 1 0 1 1 1 2 1 3 
1 4 1 5 N u m p y 数组 
的 类型 import numpy as np x = np . 
array 1 2 print x . dtype # Prints int64 
x = np . array 1.0 2.0 print x . 
dtype # Prints float64 x = np . array 1 
2 dtype = np . int64 # 强制 使用 某个 
type print x . dtype # Prints int64 1 2 
3 4 5 6 7 8 9 1 0 1 
2 3 4 5 6 7 8 9 1 0 
2 . 2.3 Numpy 数组 的 运算 矩阵 的 加减 
开方 和 元素 对 元素 乘除 如下 import numpy as 
np x = np . array 1 2 3 4 
dtype = np . float64 y = np . array 
5 6 7 8 dtype = np . float64 # 
6.0 8.0 # 10.0 12.0 print x + y print 
np . add x y # 4.0 4.0 # 4.0 
4.0 print x y print np . subtract x y 
# 元素 对 元素 点对点 的 乘积 # 5.0 12.0 
# 21.0 32.0 print x * y print np . 
multiply x y # 元素 对 元素 点对点 的 除法 
# 0.2 0.33333333 # 0.42857143 0.5 print x / y 
print np . divide x y # 开方 # 1 
. 1.41421356 # 1.73205081 2 . print np . sqrt 
x 1 2 3 4 5 6 7 8 9 
1 0 1 1 1 2 1 3 1 4 
1 5 1 6 1 7 1 8 1 9 
2 0 2 1 2 2 2 3 2 4 
2 5 2 6 2 7 2 8 2 9 
3 0 3 1 1 2 3 4 5 6 
7 8 9 1 0 1 1 1 2 1 
3 1 4 1 5 1 6 1 7 1 
8 1 9 2 0 2 1 2 2 2 
3 2 4 2 5 2 6 2 7 2 
8 2 9 3 0 3 1 矩阵 的 内积 
是 通过 下列 方法 计算 的 import numpy as np 
x = np . array 1 2 3 4 y 
= np . array 5 6 7 8 v = 
np . array 9 10 w = np . array 
11 12 # 向量 内积 得到 219 print v . 
dot w print np . dot v w # 矩阵 
乘法 得到 29 67 print x . dot v print 
np . dot x v # 矩阵 乘法 # 19 
22 # 43 50 print x . dot y print 
np . dot x y 1 2 3 4 5 
6 7 8 9 1 0 1 1 1 2 
1 3 1 4 1 5 1 6 1 7 
1 8 1 9 2 0 2 1 1 2 
3 4 5 6 7 8 9 1 0 1 
1 1 2 1 3 1 4 1 5 1 
6 1 7 1 8 1 9 2 0 2 
1 特别 特别 有用 的 一个 操作 是 sum / 
求和 对 某个 维度 import numpy as np x = 
np . array 1 2 3 4 print np . 
sum x # 整个 矩阵 的 和 得到 10 print 
np . sum x axis = 0 # 每 一列 
的 和 得到 4 6 print np . sum x 
axis = 1 # 每 一行 的 和 得到 3 
7 12345671234567 还有 一个 经常 会 用到 操作 是 矩阵 
的 转置 在 Numpy 数 组里 用 . T 实现 
import numpy as np x = np . array 1 
2 3 4 print x # Prints 1 2 # 
3 4 print x . T # Prints 1 3 
# 2 4 # 1 * n 的 Numpy 数组 
用 . T 之后 其实 啥 也 没做 v = 
np . array 1 2 3 print v # Prints 
1 2 3 print v . T # Prints 1 
2 3 1 2 3 4 5 6 7 8 
9 1 0 1 1 1 2 1 2 3 
4 5 6 7 8 9 1 0 1 1 
1 2 2 . 2.4 B r o a d 
c a s t i n g N u m 
p y 还有 一个 非常 牛逼 的 机制 你 想想 
如果 你 现在 有 一大 一小 俩 矩阵 你 想 
使用 小 矩阵 在 大 矩阵 上 做 多次 操作 
额 举个 例子 好了 假如 你 想将 一个 1 * 
n 的 矩阵 加到 m * n 的 矩阵 的 
每 一行 上 # 你 如果 要用 for 循环 实现 
是 酱紫 的 下面 用 y 的 原因 是 你 
不想 改变 原来 的 x import numpy as np x 
= np . array 1 2 3 4 5 6 
7 8 9 10 11 12 v = np . 
array 1 0 1 y = np . empty _ 
like x # 设置 一个 和x/nr 一样 维度 的 Numpy 
数组 y # 逐行 相加 for i in range 4 
y i = x i + v # 恩 y 
就是 你 想要 的 了 # 2 2 4 # 
5 5 7 # 8 8 10 # 11 11 
13 print y 1 2 3 4 5 6 7 
8 9 1 0 1 1 1 2 1 3 
1 4 1 5 1 6 1 7 1 2 
3 4 5 6 7 8 9 1 0 1 
1 1 2 1 3 1 4 1 5 1 
6 1 7 # 上 一种 方法 如果 for 的 
次数 非常多 会 很慢 于是 我们 改进 了 一下 import 
numpy as np x = np . array 1 2 
3 4 5 6 7 8 9 10 11 12 
v = np . array 1 0 1 vv = 
np . tile v 4 1 # 变形 重复 然后 
叠起来 print vv # Prints 1 0 1 # 1 
0 1 # 1 0 1 # 1 0 1 
y = x + vv # 相加 print y # 
Prints 2 2 4 # 5 5 7 # 8 
8 10 # 11 11 13 1 2 3 4 
5 6 7 8 9 1 0 1 1 1 
2 1 3 1 4 1 5 1 2 3 
4 5 6 7 8 9 1 0 1 1 
1 2 1 3 1 4 1 5 # 其实 
因为 Numpy 的 Broadcasting 你 可以 直接 酱紫 操作 import 
numpy as np x = np . array 1 2 
3 4 5 6 7 8 9 10 11 12 
v = np . array 1 0 1 y = 
x + v # 直接 加 print y # Prints 
2 2 4 # 5 5 7 # 8 8 
10 # 11 11 13 1 2 3 4 5 
6 7 8 9 1 0 1 2 3 4 
5 6 7 8 9 1 0 更多 Broadcasting 的 
例子 请看 下面 import numpy as np v = np 
. array 1 2 3 # v has shape 3 
w = np . array 4 5 # w has 
shape 2 # 首先 把 v 变成 一个 列 向量 
# v 现在 的 形状 是 3 1 # 作用 
在 w 上 得到 的 结果 形状 是 3 2 
如下 # 4 5 # 8 10 # 12 15 
print np . reshape v 3 1 * w # 
逐行 相加 x = np . array 1 2 3 
4 5 6 # 得到 如下 结果 # 2 4 
6 # 5 7 9 print x + v # 
先 逐行 相加 再 转置 得到 以下 结果 # 5 
6 7 # 9 10 11 print x . T 
+ w . T # 恩 也 可以 这么 做 
print x + np . reshape w 2 1 1 
2 3 4 5 6 7 8 9 1 0 
1 1 1 2 1 3 1 4 1 5 
1 6 1 7 1 8 1 9 2 0 
2 1 2 2 2 3 2 4 2 5 
1 2 3 4 5 6 7 8 9 1 
0 1 1 1 2 1 3 1 4 1 
5 1 6 1 7 1 8 1 9 2 
0 2 1 2 2 2 3 2 4 2 
5 2 . 3 SciPyNumpy 提供 了 一个 非常 方便 
操作 和 计算 的 高维 向量 对象 并 提供 基本 
的 操作 方法 而 Scipy 是 在 Numpy 的 基础 
上 提供 很多 很多 的 函数 和 方法 去 直接 
完成 你 需要 的 矩阵 操作 有兴趣 可以 浏览 Scipy 
方法 索引 查看 具体 的 方法 函数 略 多 要 
都 记下来 有点 困难 随 用 随 查吧/nr 向量 距离 
计算 需要 特别 拎 出来 说 一下 的 是 向量 
之间 的 距离 计算 这个 Scipy 提供 了 很好 的 
接口 scipy . spatial . distance . pdist import numpy 
as np from scipy . spatial . distance import pdist 
squareform # 0 1 # 1 0 # 2 0 
x = np . array 0 1 1 0 2 
0 print x # 计算 矩阵 每 一行 和每/nr 一行 
之间 的 欧氏距离 # d i j 是 x i 
和 x j 之间 的 距离 # 结果 如下 # 
0 . 1.41421356 2.23606798 # 1.41421356 0 . 1 . 
# 2.23606798 1 . 0 . d = squareform pdist 
x euclidean print d 1 2 3 4 5 6 
7 8 9 1 0 1 1 1 2 1 
3 1 4 1 5 1 6 1 7 1 
2 3 4 5 6 7 8 9 1 0 
1 1 1 2 1 3 1 4 1 5 
1 6 1 7 2 . 4 Matplotlib 这是 python 
中 的 一个 作图 工具包 如果 你 熟悉 matlab 的 
语法 的话 应该会 用得 挺 顺手 可以 通过 matplotlib . 
pyplot . plot 了解 更多 绘图 相关 的 设置 和 
参数 import numpy as np import matplotlib . pyplot as 
plt # 计算 x 和 对应 的 sin 值 作为 
y x = np . arange 0 3 * np 
. pi 0.1 y = np . sin x # 
用 matplotlib 绘 出点 的 变化 曲线 plt . plot 
x y plt . show # 只有 调用 plt . 
show 之后 才能 显示 1 2 3 4 5 6 
7 8 9 1 0 1 2 3 4 5 
6 7 8 9 1 0 结果 如下 # 在 
一个 图中 画出 2条 曲线 import numpy as np import 
matplotlib . pyplot as plt # 计算 x 对应 的 
sin 和 cos 值 x = np . arange 0 
3 * np . pi 0.1 y _ sin = 
np . sin x y _ cos = np . 
cos x # 用 matplotlib 作图 plt . plot x 
y _ sin plt . plot x y _ cos 
plt . xlabel x axis label plt . ylabel y 
axis label plt . title Sine and Cosine plt . 
legend Sine Cosine plt . show 1 2 3 4 
5 6 7 8 9 1 0 1 1 1 
2 1 3 1 4 1 5 1 6 1 
7 1 2 3 4 5 6 7 8 9 
1 0 1 1 1 2 1 3 1 4 
1 5 1 6 1 7 # 用 subplot 分到 
子 图里 import numpy as np import matplotlib . pyplot 
as plt # 得到 x 对应 的 sin 和 cos 
值 x = np . arange 0 3 * np 
. pi 0.1 y _ sin = np . sin 
x y _ cos = np . cos x # 
2 * 1个 子图 第一 个 位置 . plt . 
subplot 2 1 1 # 画 第一 个 子图 plt 
. plot x y _ sin plt . title Sine 
# 画 第 2个 子图 plt . subplot 2 1 
2 plt . plot x y _ cos plt . 
title Cosine plt . show 1 2 3 4 5 
6 7 8 9 1 0 1 1 1 2 
1 3 1 4 1 5 1 6 1 7 
1 8 1 9 2 0 2 1 2 2 
1 2 3 4 5 6 7 8 9 1 
0 1 1 1 2 1 3 1 4 1 
5 1 6 1 7 1 8 1 9 2 
0 2 1 2 2 2 . 5 简单 图片 
读写 可以 使用 imshow 来 显示 图片 import numpy as 
np from scipy . misc import imread imresize import matplotlib 
. pyplot as plt img = imread / Users / 
HanXiaoyang / Comuter _ vision / computer _ vision . 
jpg img _ tinted = img * 1 0.95 0.9 
# 显示 原始 图片 plt . subplot 1 2 1 
plt . imshow img # 显示 调色 后的/nr 图片 plt 
. subplot 1 2 2 plt . imshow np . 
uint8 img _ tinted plt . show 1 2 3 
4 5 6 7 8 9 1 0 1 1 
1 2 1 3 1 4 1 5 1 6 
1 2 3 4 5 6 7 8 9 1 
0 1 1 1 2 1 3 1 4 1 
5 1 6 参考 资料 与 原文 cs231n python / 
Numpy 指南 深度 学习 与 计算机 视觉 系列 1 _ 基础 介绍 
作者 寒 小阳 时间 2015年 11月 出处 http / / 
blog . csdn . net / han _ xiaoyang / 
article / details / 49876119 声明 版权所有 转载 请 注明 
出处 谢谢 1 . 背景 计算机 视觉 / computer vision 
是 一个 火了 N 年的/nr topic 持续化 升温 的 原因 
也 非常 简单 在 搜索 / 影像 内容 理解 / 
医学 应用 / 地图 识别 等 等 领域 应用 太多 
大家 都 有一个 愿景 让 计算机 能够 像 人 一样 
去 看 一张 图片 甚至 读懂 一张 图片 有几个 比较 
重要 的 计算机 视觉 任务 比如 图片 的 分类 物体 
识别 物体 定位 于 检测 等等 而 近年来 的 神经 
网络 / 深度 学习 使得 上述 任务 的 准确度 有了 
非常大 的 提升 加之 最近 做了 几个 不大不小 的 计算机 
视觉上 的 项目 爱 凑热闹 的 博主 自然 不 打算 
放过 此 领域 也 边学边 做 点 笔记 总结 写点 
东西 写 的 不 正确 的 地方 欢迎 大家 提出 
和 指正 2 . 基础 知识 为 了 简单 易读 
易懂 这个 课程 笔记 系列 中 绝大多数 的 代码 都 
使用 Python 完成 这里 稍微 介绍 一下 python 和 Numpy 
/ Scipy python 中的 科学计算 包 的 一些 基础 2.1 
python 基础 python 是 一种 长得 像 伪代码 具备 高 
可读性 的 编程语言 优点 挺多 可读性 相当 好 写 起来 
也 简单 所想 立马 可以 转 为实现 代码 且 社区 
即为 活跃 可用 的 package 相当多 缺点 效率 一般 2 
. 1.1 基本 数据类型 最 常用 的 有 数值 型 
Numbers 布尔 型 Booleans 和 字符串 String 三种 数值 型 
Numbers 可 进行 简单 的 运算 如下 x = 5 
print type x # Prints type int print x # 
Prints 5 print x + 1 # 加 prints 6 
print x 1 # 减 prints 4 print x * 
2 # 乘 prints 10 print x * * 2 
# 幂 prints 25 x + = 1 # 自 
加 print x # Prints 6 x * = 2 
# 自乘 print x # Prints 12 y = 2.5 
print type y # Prints type float print y y 
+ 1 y * 2 y * * 2 # 
Prints 2.5 3.5 5.0 6.25 1 2 3 4 5 
6 7 8 9 1 0 1 1 1 2 
1 3 1 4 1 2 3 4 5 6 
7 8 9 1 0 1 1 1 2 1 
3 1 4 P python 中 没有 x + + 
和 x – 操作 布尔 型 Booleans 包含 True False 
和 常见 的 与 或非 操作 t = True f 
= False print type t # Prints type bool print 
t and f # 逻辑与 prints False print t or 
f # 逻辑或 prints True print not t # 逻辑非 
prints False print t = f # XOR prints True 
12345671234567 字符串 型 String 字符串 可以 用 单引号 / 双引号 
/ 三 引号 声明 hello = hello world = world 
print hello # Prints hello print len hello # 字符串 
长度 prints 5 hw = hello + + world # 
字符串 连接 print hw # prints hello world hw2015 = 
% s % s % d % hello world 2015 
# 格式化 字符串 print hw2015 # prints hello world 2015 
1234567812345678 字符串 对象 有 很有 有用 的 函数 s = 
hello print s . capitalize # 首字母 大写 prints Hello 
print s . upper # 全 大写 prints HELLO print 
s . rjust 7 # 以 7 为 长度 右对齐 
左边 补 空格 prints hello print s . center 7 
# 居中 补 空格 prints hello print s . replace 
l ell # 字串 替换 prints he ell ell o 
print world . strip # 去 首位 空格 prints world 
123456712345672 . 1.2 基本 容器 列表 / List 和 数组 
类似 的 一个 东东 不过 可以 包含 不同 类型 的 
元素 同时 大小 也 是 可以 调整 的 xs = 
3 1 2 # 创建 print xs xs 2 # 
Prints 3 1 2 2 print xs 1 # 第 
1个 元素 即 最后 一个 xs 2 = foo # 
下标 从0/nr 开始 这是 第 3个 元素 print xs # 
可以 有 不同 类型 Prints 3 1 foo xs . 
append bar # 尾部 添加 一个 元素 print xs # 
Prints x = xs . pop # 去掉 尾部 的 
元素 print x xs # Prints bar 3 1 foo 
1 2 3 4 5 6 7 8 9 1 
2 3 4 5 6 7 8 9 列表 最 
常用 的 操作 有 切片 / slicing 即 取 子 
序列 / 一部分 元素 如下 nums = range 5 # 
从1到/nr 5 的 序列 print nums # Prints 0 1 
2 3 4 print nums 2 4 # 下标 从2到/nr 
4 1 的 元素 prints 2 3 print nums 2 
# 下标 从2到/nr 结尾 的 元素 print nums 2 # 
从 开头 到 下标 为 2 1 的 元素 0 
1 print nums # 恩 就是 全取/nr 出来 了 print 
nums 1 # 从 开始 到 第 1个 元素 最后 
的 元素 nums 2 4 = 8 9 # 对子 
序列 赋值 print nums # Prints 0 1 8 8 
4 1 2 3 4 5 6 7 8 9 
1 2 3 4 5 6 7 8 9 循环 
/ loops 即 遍历 整个 list 做 一些 操作 如下 
animals = cat dog monkey for animal in animals print 
animal # 依次 输出 cat dog monkey 每个 一行 . 
12341234 可以用 enumerate 取出 元素 的 同时 带出 下标 animals 
= cat dog monkey for idx animal in enumerate animals 
print # % d % s % idx + 1 
animal # 输出 # 1 cat # 2 dog # 
3 monkey 一个 一行 12341234List comprehension 这个 相当 相当 相当 
有用 在 很长 的 list 生成 过程 中 效率 完胜 
for 循环 # for 循环 nums = 0 1 2 
3 4 squares = for x in nums squares . 
append x * * 2 print squares # Prints 0 
1 4 9 16 # list comprehension nums = 0 
1 2 3 4 squares = x * * 2 
for x in nums print squares # Prints 0 1 
4 9 16 1 2 3 4 5 6 7 
8 9 1 0 1 1 1 2 3 4 
5 6 7 8 9 1 0 1 1 你 
猜 怎么着 list comprehension 也 是 可以 加 多重 条件 
的 nums = 0 1 2 3 4 even _ 
squares = x * * 2 for x in nums 
if x % 2 = = 0 print even _ 
squares # Prints 0 4 16 123123 字典 / Dict 
和 Java 中的 Map 一样 的 东东 用于 存储 key 
value 对 d = { cat cute dog furry } 
# 创建 print d cat # 根据 key 取出 value 
print cat in d # 判断 是否 有 cat 这个 
key d fish = wet # 添加 元素 print d 
fish # Prints wet # print d monkey # KeyError 
monkey 非本 字典 的 key print d . get monkey 
N / A # 有 key 返回 value 无 key 
返回 N / A print d . get fish N 
/ A # prints wet del d fish # 删除 
某个 key 以及 对应 的 value print d . get 
fish N / A # prints N / A 1 
2 3 4 5 6 7 8 9 1 0 
1 2 3 4 5 6 7 8 9 1 
0 对应 list 的 那些 操作 你 在 dict 里面 
也能 找 得到 循环 / loops # for 循环 d 
= { person 2 cat 4 spider 8 } for 
animal in d legs = d animal print A % 
s has % d legs % animal legs # Prints 
A person has 2 legs A spider has 8 legs 
A cat has 4 legs # 通过 iteritems d = 
{ person 2 cat 4 spider 8 } for animal 
legs in d . iteritems print A % s has 
% d legs % animal legs # Prints A person 
has 2 legs A spider has 8 legs A cat 
has 4 legs 1 2 3 4 5 6 7 
8 9 1 0 1 1 1 2 1 2 
3 4 5 6 7 8 9 1 0 1 
1 1 2 # Dictionary comprehension nums = 0 1 
2 3 4 even _ num _ to _ square 
= { x x * * 2 for x in 
nums if x % 2 = = 0 } print 
even _ num _ to _ square # Prints { 
0 0 2 4 4 16 } 12341234 元组 / 
turple 本质上 说 还是 一个 list 只不过 里面 的 每个 
元素 都是/nr 一个 两 元组 对 d = { x 
x + 1 x for x in range 10 } 
# 创建 t = 5 6 # Create a tuple 
print type t # Prints type tuple print d t 
# Prints 5 print d 1 2 # Prints 1 
12345123452 . 1.3 函 数用 def 可以 定义 一个 函数 
def sign x if x 0 return positive elif x 
0 return negative else return zero for x in 1 
0 1 print sign x # Prints negative zero positive 
1 2 3 4 5 6 7 8 9 1 
0 1 1 1 2 3 4 5 6 7 
8 9 1 0 1 1 d e f hello 
name loud = False if loud print HELLO % s 
% name . upper else print Hello % s % 
name hello Bob # Prints Hello Bob hello Fred loud 
= True # Prints HELLO FRED 1234567812345678 类 / Classpython 
里面 的 类 定义 非常 的 直接 和 简洁 class 
Greeter # Constructor def _ _ init _ _ self 
name self . name = name # Create an instance 
variable # Instance method def greet self loud = False 
if loud print HELLO % s % self . name 
. upper else print Hello % s % self . 
name g = Greeter Fred # Construct an instance of 
the Greeter class g . greet # Call an instance 
method prints Hello Fred g . greet loud = True 
# Call an instance method prints HELLO FRED 1 2 
3 4 5 6 7 8 9 1 0 1 
1 1 2 1 3 1 4 1 5 1 
6 1 2 3 4 5 6 7 8 9 
1 0 1 1 1 2 1 3 1 4 
1 5 1 6 2 . 2 . NumPy 基础 
NumPy 是 Python 的 科学 计算 的 一个 核心 库 
它 提供 了 一个 高 性能 的 多维 数组 矩阵 
对象 可以 完成 在其 之上 的 很多 操作 很多 机器学习 
中的 计算 问题 把 数据 vectorize 之后 可以 进行 非常 
高效 的 运算 2 . 2.1 数组 一个 NumPy 数组 
是 一些 类型 相同 的 元素 组成 的 类 矩阵 
数据 用 list 或者 层叠 的 list 可以 初始化 import 
numpy as np a = np . array 1 2 
3 # 一维 Numpy 数组 print type a # Prints 
type numpy . ndarray print a . shape # Prints 
3 print a 0 a 1 a 2 # Prints 
1 2 3 a 0 = 5 # 重 赋值 
print a # Prints 5 2 3 b = np 
. array 1 2 3 4 5 6 # 二维 
Numpy 数组 print b . shape # Prints 2 3 
print b 0 0 b 0 1 b 1 0 
# Prints 1 2 4 1 2 3 4 5 
6 7 8 9 1 0 1 1 1 2 
1 2 3 4 5 6 7 8 9 1 
0 1 1 1 2 生成 一些 特殊 的 Numpy 
数组 矩阵 时 我们 有 特定 的 函数 可以 调用 
import numpy as np a = np . zeros 2 
2 # 全0的/nr 2 * 2 Numpy 数组 print a 
# Prints 0 . 0 . # 0 . 0 
. b = np . ones 1 2 # 全1/nr 
Numpy 数组 print b # Prints 1 . 1 . 
c = np . full 2 2 7 # 固定值 
Numpy 数组 print c # Prints 7 . 7 . 
# 7 . 7 . d = np . eye 
2 # 2 * 2 对角 Numpy 数组 print d 
# Prints 1 . 0 . # 0 . 1 
. e = np . random . random 2 2 
# 2 * 2 的 随机 Numpy 数组 print e 
# 随机 输出 1 2 3 4 5 6 7 
8 9 1 0 1 1 1 2 1 3 
1 4 1 5 1 6 1 7 1 8 
1 9 1 2 3 4 5 6 7 8 
9 1 0 1 1 1 2 1 3 1 
4 1 5 1 6 1 7 1 8 1 
9 2 . 2.2 Numpy 数组 索引 与 取值 可以 
通过 像 list 一样 的 分片 / slicing 操作 取出 
需要 的 数值 部分 import numpy as np # 创建 
如下 的 3 * 4 Numpy 数组 # 1 2 
3 4 # 5 6 7 8 # 9 10 
11 12 a = np . array 1 2 3 
4 5 6 7 8 9 10 11 12 # 
通过 slicing 取出 前 两行 的 2 到 3列 # 
2 3 # 6 7 b = a 2 1 
3 # 需要 注意 的 是 取出 的 b 中 
的 数据 实际上 和a的/nr 这 部分 数据 是 同 一份 
数据 . print a 0 1 # Prints 2 b 
0 0 = 77 # b 0 0 和 a 
0 1 是 同 一份 数据 print a 0 1 
# a 也被 修改 了 Prints 77 1 2 3 
4 5 6 7 8 9 1 0 1 1 
1 2 1 3 1 4 1 5 1 6 
1 7 1 2 3 4 5 6 7 8 
9 1 0 1 1 1 2 1 3 1 
4 1 5 1 6 1 7 i m p 
o r t numpy as np a = np . 
array 1 2 3 4 5 6 7 8 9 
10 11 12 row _ r1 = a 1 # 
a 的 第二 行 row _ r2 = a 1 
2 # 同上 print row _ r1 row _ r1 
. shape # Prints 5 6 7 8 4 print 
row _ r2 row _ r2 . shape # Prints 
5 6 7 8 1 4 col _ r1 = 
a 1 col _ r2 = a 1 2 print 
col _ r1 col _ r1 . shape # Prints 
2 6 10 3 print col _ r2 col _ 
r2 . shape # Prints 2 # 6 # 10 
3 1 1 2 3 4 5 6 7 8 
9 1 0 1 1 1 2 1 3 1 
4 1 5 1 2 3 4 5 6 7 
8 9 1 0 1 1 1 2 1 3 
1 4 1 5 还 可以 这么 着 取 import 
numpy as np a = np . array 1 2 
3 4 5 6 # 取出 0 0 1 1 
2 0 三个 位置 的 值 print a 0 1 
2 0 1 0 # Prints 1 4 5 # 
和 上面 一样 print np . array a 0 0 
a 1 1 a 2 0 # Prints 1 4 
5 # 取出 0 1 0 1 两个 位置 的 
值 print a 0 0 1 1 # Prints 2 
2 # 同上 print np . array a 0 1 
a 0 1 # Prints 2 2 1 2 3 
4 5 6 7 8 9 1 0 1 1 
1 2 1 3 1 4 1 5 1 2 
3 4 5 6 7 8 9 1 0 1 
1 1 2 1 3 1 4 1 5 我们 
还 可以 通过 条件 得到 bool 型 的 Numpy 数组 
结果 再 通过 这个 数组 取出 符合 条件 的 值 
如下 import numpy as np a = np . array 
1 2 3 4 5 6 bool _ idx = 
a 2 # 判定 a 大于 2 的 结果 矩阵 
print bool _ idx # Prints False False # True 
True # True True # 再通过 bool _ idx 取出 
我们 要 的 值 print a bool _ idx # 
Prints 3 4 5 6 # 放在 一起 我们 可以 
这么 写 print a a 2 # Prints 3 4 
5 6 1 2 3 4 5 6 7 8 
9 1 0 1 1 1 2 1 3 1 
4 1 5 1 2 3 4 5 6 7 
8 9 1 0 1 1 1 2 1 3 
1 4 1 5 N u m p y 数组 
的 类型 import numpy as np x = np . 
array 1 2 print x . dtype # Prints int64 
x = np . array 1.0 2.0 print x . 
dtype # Prints float64 x = np . array 1 
2 dtype = np . int64 # 强制 使用 某个 
type print x . dtype # Prints int64 1 2 
3 4 5 6 7 8 9 1 0 1 
2 3 4 5 6 7 8 9 1 0 
2 . 2.3 Numpy 数组 的 运算 矩阵 的 加减 
开方 和 元素 对 元素 乘除 如下 import numpy as 
np x = np . array 1 2 3 4 
dtype = np . float64 y = np . array 
5 6 7 8 dtype = np . float64 # 
6.0 8.0 # 10.0 12.0 print x + y print 
np . add x y # 4.0 4.0 # 4.0 
4.0 print x y print np . subtract x y 
# 元素 对 元素 点对点 的 乘积 # 5.0 12.0 
# 21.0 32.0 print x * y print np . 
multiply x y # 元素 对 元素 点对点 的 除法 
# 0.2 0.33333333 # 0.42857143 0.5 print x / y 
print np . divide x y # 开方 # 1 
. 1.41421356 # 1.73205081 2 . print np . sqrt 
x 1 2 3 4 5 6 7 8 9 
1 0 1 1 1 2 1 3 1 4 
1 5 1 6 1 7 1 8 1 9 
2 0 2 1 2 2 2 3 2 4 
2 5 2 6 2 7 2 8 2 9 
3 0 3 1 1 2 3 4 5 6 
7 8 9 1 0 1 1 1 2 1 
3 1 4 1 5 1 6 1 7 1 
8 1 9 2 0 2 1 2 2 2 
3 2 4 2 5 2 6 2 7 2 
8 2 9 3 0 3 1 矩阵 的 内积 
是 通过 下列 方法 计算 的 import numpy as np 
x = np . array 1 2 3 4 y 
= np . array 5 6 7 8 v = 
np . array 9 10 w = np . array 
11 12 # 向量 内积 得到 219 print v . 
dot w print np . dot v w # 矩阵 
乘法 得到 29 67 print x . dot v print 
np . dot x v # 矩阵 乘法 # 19 
22 # 43 50 print x . dot y print 
np . dot x y 1 2 3 4 5 
6 7 8 9 1 0 1 1 1 2 
1 3 1 4 1 5 1 6 1 7 
1 8 1 9 2 0 2 1 1 2 
3 4 5 6 7 8 9 1 0 1 
1 1 2 1 3 1 4 1 5 1 
6 1 7 1 8 1 9 2 0 2 
1 特别 特别 有用 的 一个 操作 是 sum / 
求和 对 某个 维度 import numpy as np x = 
np . array 1 2 3 4 print np . 
sum x # 整个 矩阵 的 和 得到 10 print 
np . sum x axis = 0 # 每 一列 
的 和 得到 4 6 print np . sum x 
axis = 1 # 每 一行 的 和 得到 3 
7 12345671234567 还有 一个 经常 会 用到 操作 是 矩阵 
的 转置 在 Numpy 数 组里 用 . T 实现 
import numpy as np x = np . array 1 
2 3 4 print x # Prints 1 2 # 
3 4 print x . T # Prints 1 3 
# 2 4 # 1 * n 的 Numpy 数组 
用 . T 之后 其实 啥 也 没做 v = 
np . array 1 2 3 print v # Prints 
1 2 3 print v . T # Prints 1 
2 3 1 2 3 4 5 6 7 8 
9 1 0 1 1 1 2 1 2 3 
4 5 6 7 8 9 1 0 1 1 
1 2 2 . 2.4 B r o a d 
c a s t i n g N u m 
p y 还有 一个 非常 牛逼 的 机制 你 想想 
如果 你 现在 有 一大 一小 俩 矩阵 你 想 
使用 小 矩阵 在 大 矩阵 上 做 多次 操作 
额 举个 例子 好了 假如 你 想将 一个 1 * 
n 的 矩阵 加到 m * n 的 矩阵 的 
每 一行 上 # 你 如果 要用 for 循环 实现 
是 酱紫 的 下面 用 y 的 原因 是 你 
不想 改变 原来 的 x import numpy as np x 
= np . array 1 2 3 4 5 6 
7 8 9 10 11 12 v = np . 
array 1 0 1 y = np . empty _ 
like x # 设置 一个 和x/nr 一样 维度 的 Numpy 
数组 y # 逐行 相加 for i in range 4 
y i = x i + v # 恩 y 
就是 你 想要 的 了 # 2 2 4 # 
5 5 7 # 8 8 10 # 11 11 
13 print y 1 2 3 4 5 6 7 
8 9 1 0 1 1 1 2 1 3 
1 4 1 5 1 6 1 7 1 2 
3 4 5 6 7 8 9 1 0 1 
1 1 2 1 3 1 4 1 5 1 
6 1 7 # 上 一种 方法 如果 for 的 
次数 非常多 会 很慢 于是 我们 改进 了 一下 import 
numpy as np x = np . array 1 2 
3 4 5 6 7 8 9 10 11 12 
v = np . array 1 0 1 vv = 
np . tile v 4 1 # 变形 重复 然后 
叠起来 print vv # Prints 1 0 1 # 1 
0 1 # 1 0 1 # 1 0 1 
y = x + vv # 相加 print y # 
Prints 2 2 4 # 5 5 7 # 8 
8 10 # 11 11 13 1 2 3 4 
5 6 7 8 9 1 0 1 1 1 
2 1 3 1 4 1 5 1 2 3 
4 5 6 7 8 9 1 0 1 1 
1 2 1 3 1 4 1 5 # 其实 
因为 Numpy 的 Broadcasting 你 可以 直接 酱紫 操作 import 
numpy as np x = np . array 1 2 
3 4 5 6 7 8 9 10 11 12 
v = np . array 1 0 1 y = 
x + v # 直接 加 print y # Prints 
2 2 4 # 5 5 7 # 8 8 
10 # 11 11 13 1 2 3 4 5 
6 7 8 9 1 0 1 2 3 4 
5 6 7 8 9 1 0 更多 Broadcasting 的 
例子 请看 下面 import numpy as np v = np 
. array 1 2 3 # v has shape 3 
w = np . array 4 5 # w has 
shape 2 # 首先 把 v 变成 一个 列 向量 
# v 现在 的 形状 是 3 1 # 作用 
在 w 上 得到 的 结果 形状 是 3 2 
如下 # 4 5 # 8 10 # 12 15 
print np . reshape v 3 1 * w # 
逐行 相加 x = np . array 1 2 3 
4 5 6 # 得到 如下 结果 # 2 4 
6 # 5 7 9 print x + v # 
先 逐行 相加 再 转置 得到 以下 结果 # 5 
6 7 # 9 10 11 print x . T 
+ w . T # 恩 也 可以 这么 做 
print x + np . reshape w 2 1 1 
2 3 4 5 6 7 8 9 1 0 
1 1 1 2 1 3 1 4 1 5 
1 6 1 7 1 8 1 9 2 0 
2 1 2 2 2 3 2 4 2 5 
1 2 3 4 5 6 7 8 9 1 
0 1 1 1 2 1 3 1 4 1 
5 1 6 1 7 1 8 1 9 2 
0 2 1 2 2 2 3 2 4 2 
5 2 . 3 SciPyNumpy 提供 了 一个 非常 方便 
操作 和 计算 的 高维 向量 对象 并 提供 基本 
的 操作 方法 而 Scipy 是 在 Numpy 的 基础 
上 提供 很多 很多 的 函数 和 方法 去 直接 
完成 你 需要 的 矩阵 操作 有兴趣 可以 浏览 Scipy 
方法 索引 查看 具体 的 方法 函数 略 多 要 
都 记下来 有点 困难 随 用 随 查吧/nr 向量 距离 
计算 需要 特别 拎 出来 说 一下 的 是 向量 
之间 的 距离 计算 这个 Scipy 提供 了 很好 的 
接口 scipy . spatial . distance . pdist import numpy 
as np from scipy . spatial . distance import pdist 
squareform # 0 1 # 1 0 # 2 0 
x = np . array 0 1 1 0 2 
0 print x # 计算 矩阵 每 一行 和每/nr 一行 
之间 的 欧氏距离 # d i j 是 x i 
和 x j 之间 的 距离 # 结果 如下 # 
0 . 1.41421356 2.23606798 # 1.41421356 0 . 1 . 
# 2.23606798 1 . 0 . d = squareform pdist 
x euclidean print d 1 2 3 4 5 6 
7 8 9 1 0 1 1 1 2 1 
3 1 4 1 5 1 6 1 7 1 
2 3 4 5 6 7 8 9 1 0 
1 1 1 2 1 3 1 4 1 5 
1 6 1 7 2 . 4 Matplotlib 这是 python 
中 的 一个 作图 工具包 如果 你 熟悉 matlab 的 
语法 的话 应该会 用得 挺 顺手 可以 通过 matplotlib . 
pyplot . plot 了解 更多 绘图 相关 的 设置 和 
参数 import numpy as np import matplotlib . pyplot as 
plt # 计算 x 和 对应 的 sin 值 作为 
y x = np . arange 0 3 * np 
. pi 0.1 y = np . sin x # 
用 matplotlib 绘 出点 的 变化 曲线 plt . plot 
x y plt . show # 只有 调用 plt . 
show 之后 才能 显示 1 2 3 4 5 6 
7 8 9 1 0 1 2 3 4 5 
6 7 8 9 1 0 结果 如下 # 在 
一个 图中 画出 2条 曲线 import numpy as np import 
matplotlib . pyplot as plt # 计算 x 对应 的 
sin 和 cos 值 x = np . arange 0 
3 * np . pi 0.1 y _ sin = 
np . sin x y _ cos = np . 
cos x # 用 matplotlib 作图 plt . plot x 
y _ sin plt . plot x y _ cos 
plt . xlabel x axis label plt . ylabel y 
axis label plt . title Sine and Cosine plt . 
legend Sine Cosine plt . show 1 2 3 4 
5 6 7 8 9 1 0 1 1 1 
2 1 3 1 4 1 5 1 6 1 
7 1 2 3 4 5 6 7 8 9 
1 0 1 1 1 2 1 3 1 4 
1 5 1 6 1 7 # 用 subplot 分到 
子 图里 import numpy as np import matplotlib . pyplot 
as plt # 得到 x 对应 的 sin 和 cos 
值 x = np . arange 0 3 * np 
. pi 0.1 y _ sin = np . sin 
x y _ cos = np . cos x # 
2 * 1个 子图 第一 个 位置 . plt . 
subplot 2 1 1 # 画 第一 个 子图 plt 
. plot x y _ sin plt . title Sine 
# 画 第 2个 子图 plt . subplot 2 1 
2 plt . plot x y _ cos plt . 
title Cosine plt . show 1 2 3 4 5 
6 7 8 9 1 0 1 1 1 2 
1 3 1 4 1 5 1 6 1 7 
1 8 1 9 2 0 2 1 2 2 
1 2 3 4 5 6 7 8 9 1 
0 1 1 1 2 1 3 1 4 1 
5 1 6 1 7 1 8 1 9 2 
0 2 1 2 2 2 . 5 简单 图片 
读写 可以 使用 imshow 来 显示 图片 import numpy as 
np from scipy . misc import imread imresize import matplotlib 
. pyplot as plt img = imread / Users / 
HanXiaoyang / Comuter _ vision / computer _ vision . 
jpg img _ tinted = img * 1 0.95 0.9 
# 显示 原始 图片 plt . subplot 1 2 1 
plt . imshow img # 显示 调色 后的/nr 图片 plt 
. subplot 1 2 2 plt . imshow np . 
uint8 img _ tinted plt . show 1 2 3 
4 5 6 7 8 9 1 0 1 1 
1 2 1 3 1 4 1 5 1 6 
1 2 3 4 5 6 7 8 9 1 
0 1 1 1 2 1 3 1 4 1 
5 1 6 参考 资料 与 原文 cs231n python / 
Numpy 指南 深度 学习 与 计算机 视觉 系列 1 _ 基础 介绍 
作者 寒 小阳 时间 2015年 11月 出处 http / / 
blog . csdn . net / han _ xiaoyang / 
article / details / 49876119 声明 版权所有 转载 请 注明 
出处 谢谢 1 . 背景 计算机 视觉 / computer vision 
是 一个 火了 N 年的/nr topic 持续化 升温 的 原因 
也 非常 简单 在 搜索 / 影像 内容 理解 / 
医学 应用 / 地图 识别 等 等 领域 应用 太多 
大家 都 有一个 愿景 让 计算机 能够 像 人 一样 
去 看 一张 图片 甚至 读懂 一张 图片 有几个 比较 
重要 的 计算机 视觉 任务 比如 图片 的 分类 物体 
识别 物体 定位 于 检测 等等 而 近年来 的 神经 
网络 / 深度 学习 使得 上述 任务 的 准确度 有了 
非常大 的 提升 加之 最近 做了 几个 不大不小 的 计算机 
视觉上 的 项目 爱 凑热闹 的 博主 自然 不 打算 
放过 此 领域 也 边学边 做 点 笔记 总结 写点 
东西 写 的 不 正确 的 地方 欢迎 大家 提出 
和 指正 2 . 基础 知识 为 了 简单 易读 
易懂 这个 课程 笔记 系列 中 绝大多数 的 代码 都 
使用 Python 完成 这里 稍微 介绍 一下 python 和 Numpy 
/ Scipy python 中的 科学计算 包 的 一些 基础 2.1 
python 基础 python 是 一种 长得 像 伪代码 具备 高 
可读性 的 编程语言 优点 挺多 可读性 相当 好 写 起来 
也 简单 所想 立马 可以 转 为实现 代码 且 社区 
即为 活跃 可用 的 package 相当多 缺点 效率 一般 2 
. 1.1 基本 数据类型 最 常用 的 有 数值 型 
Numbers 布尔 型 Booleans 和 字符串 String 三种 数值 型 
Numbers 可 进行 简单 的 运算 如下 x = 5 
print type x # Prints type int print x # 
Prints 5 print x + 1 # 加 prints 6 
print x 1 # 减 prints 4 print x * 
2 # 乘 prints 10 print x * * 2 
# 幂 prints 25 x + = 1 # 自 
加 print x # Prints 6 x * = 2 
# 自乘 print x # Prints 12 y = 2.5 
print type y # Prints type float print y y 
+ 1 y * 2 y * * 2 # 
Prints 2.5 3.5 5.0 6.25 1 2 3 4 5 
6 7 8 9 1 0 1 1 1 2 
1 3 1 4 1 2 3 4 5 6 
7 8 9 1 0 1 1 1 2 1 
3 1 4 P python 中 没有 x + + 
和 x – 操作 布尔 型 Booleans 包含 True False 
和 常见 的 与 或非 操作 t = True f 
= False print type t # Prints type bool print 
t and f # 逻辑与 prints False print t or 
f # 逻辑或 prints True print not t # 逻辑非 
prints False print t = f # XOR prints True 
12345671234567 字符串 型 String 字符串 可以 用 单引号 / 双引号 
/ 三 引号 声明 hello = hello world = world 
print hello # Prints hello print len hello # 字符串 
长度 prints 5 hw = hello + + world # 
字符串 连接 print hw # prints hello world hw2015 = 
% s % s % d % hello world 2015 
# 格式化 字符串 print hw2015 # prints hello world 2015 
1234567812345678 字符串 对象 有 很有 有用 的 函数 s = 
hello print s . capitalize # 首字母 大写 prints Hello 
print s . upper # 全 大写 prints HELLO print 
s . rjust 7 # 以 7 为 长度 右对齐 
左边 补 空格 prints hello print s . center 7 
# 居中 补 空格 prints hello print s . replace 
l ell # 字串 替换 prints he ell ell o 
print world . strip # 去 首位 空格 prints world 
123456712345672 . 1.2 基本 容器 列表 / List 和 数组 
类似 的 一个 东东 不过 可以 包含 不同 类型 的 
元素 同时 大小 也 是 可以 调整 的 xs = 
3 1 2 # 创建 print xs xs 2 # 
Prints 3 1 2 2 print xs 1 # 第 
1个 元素 即 最后 一个 xs 2 = foo # 
下标 从0/nr 开始 这是 第 3个 元素 print xs # 
可以 有 不同 类型 Prints 3 1 foo xs . 
append bar # 尾部 添加 一个 元素 print xs # 
Prints x = xs . pop # 去掉 尾部 的 
元素 print x xs # Prints bar 3 1 foo 
1 2 3 4 5 6 7 8 9 1 
2 3 4 5 6 7 8 9 列表 最 
常用 的 操作 有 切片 / slicing 即 取 子 
序列 / 一部分 元素 如下 nums = range 5 # 
从1到/nr 5 的 序列 print nums # Prints 0 1 
2 3 4 print nums 2 4 # 下标 从2到/nr 
4 1 的 元素 prints 2 3 print nums 2 
# 下标 从2到/nr 结尾 的 元素 print nums 2 # 
从 开头 到 下标 为 2 1 的 元素 0 
1 print nums # 恩 就是 全取/nr 出来 了 print 
nums 1 # 从 开始 到 第 1个 元素 最后 
的 元素 nums 2 4 = 8 9 # 对子 
序列 赋值 print nums # Prints 0 1 8 8 
4 1 2 3 4 5 6 7 8 9 
1 2 3 4 5 6 7 8 9 循环 
/ loops 即 遍历 整个 list 做 一些 操作 如下 
animals = cat dog monkey for animal in animals print 
animal # 依次 输出 cat dog monkey 每个 一行 . 
12341234 可以用 enumerate 取出 元素 的 同时 带出 下标 animals 
= cat dog monkey for idx animal in enumerate animals 
print # % d % s % idx + 1 
animal # 输出 # 1 cat # 2 dog # 
3 monkey 一个 一行 12341234List comprehension 这个 相当 相当 相当 
有用 在 很长 的 list 生成 过程 中 效率 完胜 
for 循环 # for 循环 nums = 0 1 2 
3 4 squares = for x in nums squares . 
append x * * 2 print squares # Prints 0 
1 4 9 16 # list comprehension nums = 0 
1 2 3 4 squares = x * * 2 
for x in nums print squares # Prints 0 1 
4 9 16 1 2 3 4 5 6 7 
8 9 1 0 1 1 1 2 3 4 
5 6 7 8 9 1 0 1 1 你 
猜 怎么着 list comprehension 也 是 可以 加 多重 条件 
的 nums = 0 1 2 3 4 even _ 
squares = x * * 2 for x in nums 
if x % 2 = = 0 print even _ 
squares # Prints 0 4 16 123123 字典 / Dict 
和 Java 中的 Map 一样 的 东东 用于 存储 key 
value 对 d = { cat cute dog furry } 
# 创建 print d cat # 根据 key 取出 value 
print cat in d # 判断 是否 有 cat 这个 
key d fish = wet # 添加 元素 print d 
fish # Prints wet # print d monkey # KeyError 
monkey 非本 字典 的 key print d . get monkey 
N / A # 有 key 返回 value 无 key 
返回 N / A print d . get fish N 
/ A # prints wet del d fish # 删除 
某个 key 以及 对应 的 value print d . get 
fish N / A # prints N / A 1 
2 3 4 5 6 7 8 9 1 0 
1 2 3 4 5 6 7 8 9 1 
0 对应 list 的 那些 操作 你 在 dict 里面 
也能 找 得到 循环 / loops # for 循环 d 
= { person 2 cat 4 spider 8 } for 
animal in d legs = d animal print A % 
s has % d legs % animal legs # Prints 
A person has 2 legs A spider has 8 legs 
A cat has 4 legs # 通过 iteritems d = 
{ person 2 cat 4 spider 8 } for animal 
legs in d . iteritems print A % s has 
% d legs % animal legs # Prints A person 
has 2 legs A spider has 8 legs A cat 
has 4 legs 1 2 3 4 5 6 7 
8 9 1 0 1 1 1 2 1 2 
3 4 5 6 7 8 9 1 0 1 
1 1 2 # Dictionary comprehension nums = 0 1 
2 3 4 even _ num _ to _ square 
= { x x * * 2 for x in 
nums if x % 2 = = 0 } print 
even _ num _ to _ square # Prints { 
0 0 2 4 4 16 } 12341234 元组 / 
turple 本质上 说 还是 一个 list 只不过 里面 的 每个 
元素 都是/nr 一个 两 元组 对 d = { x 
x + 1 x for x in range 10 } 
# 创建 t = 5 6 # Create a tuple 
print type t # Prints type tuple print d t 
# Prints 5 print d 1 2 # Prints 1 
12345123452 . 1.3 函 数用 def 可以 定义 一个 函数 
def sign x if x 0 return positive elif x 
0 return negative else return zero for x in 1 
0 1 print sign x # Prints negative zero positive 
1 2 3 4 5 6 7 8 9 1 
0 1 1 1 2 3 4 5 6 7 
8 9 1 0 1 1 d e f hello 
name loud = False if loud print HELLO % s 
% name . upper else print Hello % s % 
name hello Bob # Prints Hello Bob hello Fred loud 
= True # Prints HELLO FRED 1234567812345678 类 / Classpython 
里面 的 类 定义 非常 的 直接 和 简洁 class 
Greeter # Constructor def _ _ init _ _ self 
name self . name = name # Create an instance 
variable # Instance method def greet self loud = False 
if loud print HELLO % s % self . name 
. upper else print Hello % s % self . 
name g = Greeter Fred # Construct an instance of 
the Greeter class g . greet # Call an instance 
method prints Hello Fred g . greet loud = True 
# Call an instance method prints HELLO FRED 1 2 
3 4 5 6 7 8 9 1 0 1 
1 1 2 1 3 1 4 1 5 1 
6 1 2 3 4 5 6 7 8 9 
1 0 1 1 1 2 1 3 1 4 
1 5 1 6 2 . 2 . NumPy 基础 
NumPy 是 Python 的 科学 计算 的 一个 核心 库 
它 提供 了 一个 高 性能 的 多维 数组 矩阵 
对象 可以 完成 在其 之上 的 很多 操作 很多 机器学习 
中的 计算 问题 把 数据 vectorize 之后 可以 进行 非常 
高效 的 运算 2 . 2.1 数组 一个 NumPy 数组 
是 一些 类型 相同 的 元素 组成 的 类 矩阵 
数据 用 list 或者 层叠 的 list 可以 初始化 import 
numpy as np a = np . array 1 2 
3 # 一维 Numpy 数组 print type a # Prints 
type numpy . ndarray print a . shape # Prints 
3 print a 0 a 1 a 2 # Prints 
1 2 3 a 0 = 5 # 重 赋值 
print a # Prints 5 2 3 b = np 
. array 1 2 3 4 5 6 # 二维 
Numpy 数组 print b . shape # Prints 2 3 
print b 0 0 b 0 1 b 1 0 
# Prints 1 2 4 1 2 3 4 5 
6 7 8 9 1 0 1 1 1 2 
1 2 3 4 5 6 7 8 9 1 
0 1 1 1 2 生成 一些 特殊 的 Numpy 
数组 矩阵 时 我们 有 特定 的 函数 可以 调用 
import numpy as np a = np . zeros 2 
2 # 全0的/nr 2 * 2 Numpy 数组 print a 
# Prints 0 . 0 . # 0 . 0 
. b = np . ones 1 2 # 全1/nr 
Numpy 数组 print b # Prints 1 . 1 . 
c = np . full 2 2 7 # 固定值 
Numpy 数组 print c # Prints 7 . 7 . 
# 7 . 7 . d = np . eye 
2 # 2 * 2 对角 Numpy 数组 print d 
# Prints 1 . 0 . # 0 . 1 
. e = np . random . random 2 2 
# 2 * 2 的 随机 Numpy 数组 print e 
# 随机 输出 1 2 3 4 5 6 7 
8 9 1 0 1 1 1 2 1 3 
1 4 1 5 1 6 1 7 1 8 
1 9 1 2 3 4 5 6 7 8 
9 1 0 1 1 1 2 1 3 1 
4 1 5 1 6 1 7 1 8 1 
9 2 . 2.2 Numpy 数组 索引 与 取值 可以 
通过 像 list 一样 的 分片 / slicing 操作 取出 
需要 的 数值 部分 import numpy as np # 创建 
如下 的 3 * 4 Numpy 数组 # 1 2 
3 4 # 5 6 7 8 # 9 10 
11 12 a = np . array 1 2 3 
4 5 6 7 8 9 10 11 12 # 
通过 slicing 取出 前 两行 的 2 到 3列 # 
2 3 # 6 7 b = a 2 1 
3 # 需要 注意 的 是 取出 的 b 中 
的 数据 实际上 和a的/nr 这 部分 数据 是 同 一份 
数据 . print a 0 1 # Prints 2 b 
0 0 = 77 # b 0 0 和 a 
0 1 是 同 一份 数据 print a 0 1 
# a 也被 修改 了 Prints 77 1 2 3 
4 5 6 7 8 9 1 0 1 1 
1 2 1 3 1 4 1 5 1 6 
1 7 1 2 3 4 5 6 7 8 
9 1 0 1 1 1 2 1 3 1 
4 1 5 1 6 1 7 i m p 
o r t numpy as np a = np . 
array 1 2 3 4 5 6 7 8 9 
10 11 12 row _ r1 = a 1 # 
a 的 第二 行 row _ r2 = a 1 
2 # 同上 print row _ r1 row _ r1 
. shape # Prints 5 6 7 8 4 print 
row _ r2 row _ r2 . shape # Prints 
5 6 7 8 1 4 col _ r1 = 
a 1 col _ r2 = a 1 2 print 
col _ r1 col _ r1 . shape # Prints 
2 6 10 3 print col _ r2 col _ 
r2 . shape # Prints 2 # 6 # 10 
3 1 1 2 3 4 5 6 7 8 
9 1 0 1 1 1 2 1 3 1 
4 1 5 1 2 3 4 5 6 7 
8 9 1 0 1 1 1 2 1 3 
1 4 1 5 还 可以 这么 着 取 import 
numpy as np a = np . array 1 2 
3 4 5 6 # 取出 0 0 1 1 
2 0 三个 位置 的 值 print a 0 1 
2 0 1 0 # Prints 1 4 5 # 
和 上面 一样 print np . array a 0 0 
a 1 1 a 2 0 # Prints 1 4 
5 # 取出 0 1 0 1 两个 位置 的 
值 print a 0 0 1 1 # Prints 2 
2 # 同上 print np . array a 0 1 
a 0 1 # Prints 2 2 1 2 3 
4 5 6 7 8 9 1 0 1 1 
1 2 1 3 1 4 1 5 1 2 
3 4 5 6 7 8 9 1 0 1 
1 1 2 1 3 1 4 1 5 我们 
还 可以 通过 条件 得到 bool 型 的 Numpy 数组 
结果 再 通过 这个 数组 取出 符合 条件 的 值 
如下 import numpy as np a = np . array 
1 2 3 4 5 6 bool _ idx = 
a 2 # 判定 a 大于 2 的 结果 矩阵 
print bool _ idx # Prints False False # True 
True # True True # 再通过 bool _ idx 取出 
我们 要 的 值 print a bool _ idx # 
Prints 3 4 5 6 # 放在 一起 我们 可以 
这么 写 print a a 2 # Prints 3 4 
5 6 1 2 3 4 5 6 7 8 
9 1 0 1 1 1 2 1 3 1 
4 1 5 1 2 3 4 5 6 7 
8 9 1 0 1 1 1 2 1 3 
1 4 1 5 N u m p y 数组 
的 类型 import numpy as np x = np . 
array 1 2 print x . dtype # Prints int64 
x = np . array 1.0 2.0 print x . 
dtype # Prints float64 x = np . array 1 
2 dtype = np . int64 # 强制 使用 某个 
type print x . dtype # Prints int64 1 2 
3 4 5 6 7 8 9 1 0 1 
2 3 4 5 6 7 8 9 1 0 
2 . 2.3 Numpy 数组 的 运算 矩阵 的 加减 
开方 和 元素 对 元素 乘除 如下 import numpy as 
np x = np . array 1 2 3 4 
dtype = np . float64 y = np . array 
5 6 7 8 dtype = np . float64 # 
6.0 8.0 # 10.0 12.0 print x + y print 
np . add x y # 4.0 4.0 # 4.0 
4.0 print x y print np . subtract x y 
# 元素 对 元素 点对点 的 乘积 # 5.0 12.0 
# 21.0 32.0 print x * y print np . 
multiply x y # 元素 对 元素 点对点 的 除法 
# 0.2 0.33333333 # 0.42857143 0.5 print x / y 
print np . divide x y # 开方 # 1 
. 1.41421356 # 1.73205081 2 . print np . sqrt 
x 1 2 3 4 5 6 7 8 9 
1 0 1 1 1 2 1 3 1 4 
1 5 1 6 1 7 1 8 1 9 
2 0 2 1 2 2 2 3 2 4 
2 5 2 6 2 7 2 8 2 9 
3 0 3 1 1 2 3 4 5 6 
7 8 9 1 0 1 1 1 2 1 
3 1 4 1 5 1 6 1 7 1 
8 1 9 2 0 2 1 2 2 2 
3 2 4 2 5 2 6 2 7 2 
8 2 9 3 0 3 1 矩阵 的 内积 
是 通过 下列 方法 计算 的 import numpy as np 
x = np . array 1 2 3 4 y 
= np . array 5 6 7 8 v = 
np . array 9 10 w = np . array 
11 12 # 向量 内积 得到 219 print v . 
dot w print np . dot v w # 矩阵 
乘法 得到 29 67 print x . dot v print 
np . dot x v # 矩阵 乘法 # 19 
22 # 43 50 print x . dot y print 
np . dot x y 1 2 3 4 5 
6 7 8 9 1 0 1 1 1 2 
1 3 1 4 1 5 1 6 1 7 
1 8 1 9 2 0 2 1 1 2 
3 4 5 6 7 8 9 1 0 1 
1 1 2 1 3 1 4 1 5 1 
6 1 7 1 8 1 9 2 0 2 
1 特别 特别 有用 的 一个 操作 是 sum / 
求和 对 某个 维度 import numpy as np x = 
np . array 1 2 3 4 print np . 
sum x # 整个 矩阵 的 和 得到 10 print 
np . sum x axis = 0 # 每 一列 
的 和 得到 4 6 print np . sum x 
axis = 1 # 每 一行 的 和 得到 3 
7 12345671234567 还有 一个 经常 会 用到 操作 是 矩阵 
的 转置 在 Numpy 数 组里 用 . T 实现 
import numpy as np x = np . array 1 
2 3 4 print x # Prints 1 2 # 
3 4 print x . T # Prints 1 3 
# 2 4 # 1 * n 的 Numpy 数组 
用 . T 之后 其实 啥 也 没做 v = 
np . array 1 2 3 print v # Prints 
1 2 3 print v . T # Prints 1 
2 3 1 2 3 4 5 6 7 8 
9 1 0 1 1 1 2 1 2 3 
4 5 6 7 8 9 1 0 1 1 
1 2 2 . 2.4 B r o a d 
c a s t i n g N u m 
p y 还有 一个 非常 牛逼 的 机制 你 想想 
如果 你 现在 有 一大 一小 俩 矩阵 你 想 
使用 小 矩阵 在 大 矩阵 上 做 多次 操作 
额 举个 例子 好了 假如 你 想将 一个 1 * 
n 的 矩阵 加到 m * n 的 矩阵 的 
每 一行 上 # 你 如果 要用 for 循环 实现 
是 酱紫 的 下面 用 y 的 原因 是 你 
不想 改变 原来 的 x import numpy as np x 
= np . array 1 2 3 4 5 6 
7 8 9 10 11 12 v = np . 
array 1 0 1 y = np . empty _ 
like x # 设置 一个 和x/nr 一样 维度 的 Numpy 
数组 y # 逐行 相加 for i in range 4 
y i = x i + v # 恩 y 
就是 你 想要 的 了 # 2 2 4 # 
5 5 7 # 8 8 10 # 11 11 
13 print y 1 2 3 4 5 6 7 
8 9 1 0 1 1 1 2 1 3 
1 4 1 5 1 6 1 7 1 2 
3 4 5 6 7 8 9 1 0 1 
1 1 2 1 3 1 4 1 5 1 
6 1 7 # 上 一种 方法 如果 for 的 
次数 非常多 会 很慢 于是 我们 改进 了 一下 import 
numpy as np x = np . array 1 2 
3 4 5 6 7 8 9 10 11 12 
v = np . array 1 0 1 vv = 
np . tile v 4 1 # 变形 重复 然后 
叠起来 print vv # Prints 1 0 1 # 1 
0 1 # 1 0 1 # 1 0 1 
y = x + vv # 相加 print y # 
Prints 2 2 4 # 5 5 7 # 8 
8 10 # 11 11 13 1 2 3 4 
5 6 7 8 9 1 0 1 1 1 
2 1 3 1 4 1 5 1 2 3 
4 5 6 7 8 9 1 0 1 1 
1 2 1 3 1 4 1 5 # 其实 
因为 Numpy 的 Broadcasting 你 可以 直接 酱紫 操作 import 
numpy as np x = np . array 1 2 
3 4 5 6 7 8 9 10 11 12 
v = np . array 1 0 1 y = 
x + v # 直接 加 print y # Prints 
2 2 4 # 5 5 7 # 8 8 
10 # 11 11 13 1 2 3 4 5 
6 7 8 9 1 0 1 2 3 4 
5 6 7 8 9 1 0 更多 Broadcasting 的 
例子 请看 下面 import numpy as np v = np 
. array 1 2 3 # v has shape 3 
w = np . array 4 5 # w has 
shape 2 # 首先 把 v 变成 一个 列 向量 
# v 现在 的 形状 是 3 1 # 作用 
在 w 上 得到 的 结果 形状 是 3 2 
如下 # 4 5 # 8 10 # 12 15 
print np . reshape v 3 1 * w # 
逐行 相加 x = np . array 1 2 3 
4 5 6 # 得到 如下 结果 # 2 4 
6 # 5 7 9 print x + v # 
先 逐行 相加 再 转置 得到 以下 结果 # 5 
6 7 # 9 10 11 print x . T 
+ w . T # 恩 也 可以 这么 做 
print x + np . reshape w 2 1 1 
2 3 4 5 6 7 8 9 1 0 
1 1 1 2 1 3 1 4 1 5 
1 6 1 7 1 8 1 9 2 0 
2 1 2 2 2 3 2 4 2 5 
1 2 3 4 5 6 7 8 9 1 
0 1 1 1 2 1 3 1 4 1 
5 1 6 1 7 1 8 1 9 2 
0 2 1 2 2 2 3 2 4 2 
5 2 . 3 SciPyNumpy 提供 了 一个 非常 方便 
操作 和 计算 的 高维 向量 对象 并 提供 基本 
的 操作 方法 而 Scipy 是 在 Numpy 的 基础 
上 提供 很多 很多 的 函数 和 方法 去 直接 
完成 你 需要 的 矩阵 操作 有兴趣 可以 浏览 Scipy 
方法 索引 查看 具体 的 方法 函数 略 多 要 
都 记下来 有点 困难 随 用 随 查吧/nr 向量 距离 
计算 需要 特别 拎 出来 说 一下 的 是 向量 
之间 的 距离 计算 这个 Scipy 提供 了 很好 的 
接口 scipy . spatial . distance . pdist import numpy 
as np from scipy . spatial . distance import pdist 
squareform # 0 1 # 1 0 # 2 0 
x = np . array 0 1 1 0 2 
0 print x # 计算 矩阵 每 一行 和每/nr 一行 
之间 的 欧氏距离 # d i j 是 x i 
和 x j 之间 的 距离 # 结果 如下 # 
0 . 1.41421356 2.23606798 # 1.41421356 0 . 1 . 
# 2.23606798 1 . 0 . d = squareform pdist 
x euclidean print d 1 2 3 4 5 6 
7 8 9 1 0 1 1 1 2 1 
3 1 4 1 5 1 6 1 7 1 
2 3 4 5 6 7 8 9 1 0 
1 1 1 2 1 3 1 4 1 5 
1 6 1 7 2 . 4 Matplotlib 这是 python 
中 的 一个 作图 工具包 如果 你 熟悉 matlab 的 
语法 的话 应该会 用得 挺 顺手 可以 通过 matplotlib . 
pyplot . plot 了解 更多 绘图 相关 的 设置 和 
参数 import numpy as np import matplotlib . pyplot as 
plt # 计算 x 和 对应 的 sin 值 作为 
y x = np . arange 0 3 * np 
. pi 0.1 y = np . sin x # 
用 matplotlib 绘 出点 的 变化 曲线 plt . plot 
x y plt . show # 只有 调用 plt . 
show 之后 才能 显示 1 2 3 4 5 6 
7 8 9 1 0 1 2 3 4 5 
6 7 8 9 1 0 结果 如下 # 在 
一个 图中 画出 2条 曲线 import numpy as np import 
matplotlib . pyplot as plt # 计算 x 对应 的 
sin 和 cos 值 x = np . arange 0 
3 * np . pi 0.1 y _ sin = 
np . sin x y _ cos = np . 
cos x # 用 matplotlib 作图 plt . plot x 
y _ sin plt . plot x y _ cos 
plt . xlabel x axis label plt . ylabel y 
axis label plt . title Sine and Cosine plt . 
legend Sine Cosine plt . show 1 2 3 4 
5 6 7 8 9 1 0 1 1 1 
2 1 3 1 4 1 5 1 6 1 
7 1 2 3 4 5 6 7 8 9 
1 0 1 1 1 2 1 3 1 4 
1 5 1 6 1 7 # 用 subplot 分到 
子 图里 import numpy as np import matplotlib . pyplot 
as plt # 得到 x 对应 的 sin 和 cos 
值 x = np . arange 0 3 * np 
. pi 0.1 y _ sin = np . sin 
x y _ cos = np . cos x # 
2 * 1个 子图 第一 个 位置 . plt . 
subplot 2 1 1 # 画 第一 个 子图 plt 
. plot x y _ sin plt . title Sine 
# 画 第 2个 子图 plt . subplot 2 1 
2 plt . plot x y _ cos plt . 
title Cosine plt . show 1 2 3 4 5 
6 7 8 9 1 0 1 1 1 2 
1 3 1 4 1 5 1 6 1 7 
1 8 1 9 2 0 2 1 2 2 
1 2 3 4 5 6 7 8 9 1 
0 1 1 1 2 1 3 1 4 1 
5 1 6 1 7 1 8 1 9 2 
0 2 1 2 2 2 . 5 简单 图片 
读写 可以 使用 imshow 来 显示 图片 import numpy as 
np from scipy . misc import imread imresize import matplotlib 
. pyplot as plt img = imread / Users / 
HanXiaoyang / Comuter _ vision / computer _ vision . 
jpg img _ tinted = img * 1 0.95 0.9 
# 显示 原始 图片 plt . subplot 1 2 1 
plt . imshow img # 显示 调色 后的/nr 图片 plt 
. subplot 1 2 2 plt . imshow np . 
uint8 img _ tinted plt . show 1 2 3 
4 5 6 7 8 9 1 0 1 1 
1 2 1 3 1 4 1 5 1 6 
1 2 3 4 5 6 7 8 9 1 
0 1 1 1 2 1 3 1 4 1 
5 1 6 参考 资料 与 原文 cs231n python / 
Numpy 指南 