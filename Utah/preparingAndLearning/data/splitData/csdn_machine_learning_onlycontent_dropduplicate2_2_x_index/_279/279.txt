对“机器学习”跃跃欲试的你，可能也有这样的问题：入门机器学习，我需要会那种（些）酷炫的编程语言呢？别问了，这个问题的“正解”可能会让你大吃一惊。
不论你选择哪种语言，只要对这种语言下的机器学习库和工具足够熟悉，语言本身就没有那么重要了。现在对应各种语言的机器学习库层出不穷。根据你在公司中担任的角色和所要完成的任务不同，某些语言和工具可能会比其他的更好用。
R
R 是一种为专统计计算而设计的语言。它在大规模的数据挖掘、可视化和报告方面已经取得了巨大的成功。你能够轻松地获取各种的包（通过 CRAN）来使用几乎所有的机器学习算法、统计测试和分析等。R 语言本身有着优美（虽然有些人会觉得晦涩）的语法用来表达数据的关系、变换和并行操作。
KDNuggets 最近组织了一次投票，结果表明 R 是 2015 年用于解决分析、挖掘及其他数据科学任务的最受欢迎的语言。不过，近年来 Python 的人气也在急剧上升。
MATLAB
MATLAB 在学术界很受欢迎，因为它能处理复杂的数学表达式，对代数和微积分有强大的支持，还支持符号运算。同时，从数字信号处理到计算生物学，又或者是其他的科目，它都有对应的工具箱可用。它经常被用于开发新的机器学习算法的原型，有时也会被用于开发最终完整的工具。它的商用许可的确非常昂贵，但也对得起它在研发方面带来的方便。Octave 是一款免费的 MATLAB 替代品。它的语法与 MATLAB 几乎相同，但只提供一部分工具箱，IDE 也略微逊色。
Python
虽然 Python 是一种更通用的编程语言和脚本语言，但它在数据科学家和机器学习工程师中的人气也是急剧上升。跟 R 和 MATLAB 不同，它并没有内置数据处理和科学计算专用的语法，但它有像 NumPy、SciPy 和 Pandas 这样的库用更友好的语法提供了同样的功能。
像 scikit-learn、Theano 和 TensorFlow 这样的机器学习库让你能够方便地训练各种机器学习模型，还能用上分布式计算。当然，这些库中最影响性能的部分一般还是用 C/C++ 甚至 Fortan 编写的，而 Python 包则是作为它们的接口（这在 R 中也很常见）。
但 Python 最大的优势在于它的生态系统使得你能够很方便地搭建起一个复杂的端到端服务，比如用 Django 或是 Flask 搭建 Web 应用，或是用 PyQt 开发桌面应用，甚至用 ROS 搭建一个自主机器人。
这种强大的通用性也是我们在“机器学习工程师”纳米学位项目中大量使用 Python 的主要原因。
Java
由于它干净一致的实现、面向对象编程的风格以及通过 JVM 获得的平台独立性，Java 是很多软件工程师的首选语言。它以简洁性和灵活性为代价换取了明确性和可靠性，使它在实现重要的企业软件系统时非常受欢迎。对于那些一直使用 Java 的公司，当他们需要开发机器学习产品时，为了保持同样的可靠性和避免写一堆混乱的接口，他们可能更倾向于继续使用 Java。
除了一些可以用来做分析和原型开发的库和工具（比如 Weka）以外，要用 Java 开发大规模分布式的机器学习系统，我们有很多选择，比如 Spark+MLlib、Mahout、H2O 以及 Deeplearning4j。这些库和框架也很方便跟工业级别的数据处理和存储系统比如 Hadoop/HDFS 整合在一起。
C/C++
在开发像操作系统组件和网络协议这样计算性能和内存使用效率极为重要的底层软件时，C/C++ 是最理想的选择。由于同样的原因，它们在实现机器学习算法的关键部分时也很受欢迎。但是它们没有内建的关于数据处理操作的抽象，内存管理的任务也很繁重，这使得它们对新手来说不太合适，而且在开发完整的端到端系统时也比较笨重。
在开发嵌入式系统（比如智能汽车、智能传感器等），可能必须使用 C/C++。而在其他场景下，用它们进行开发的便利程度可能要视现有的基础设施和具体的应用而定。不过无论如何，我们并不缺少 C/C++ 的机器学习库，比如 LibSVM、Shark 和 mlpack。
企业级解决方案
在这些语言和库以外，还有很多统计建模和商业分析的商用产品，用于在更为受控的数据处理环境下应用机器学习模型。这些产品，包括 RapidMiner、IBM SPSS、SAS+JMP 和 Stata 等，它们的目标是为数据分析提供可靠和端到端的解决方案，通常也会将 API 或是脚本语法暴露给用户。
近年来还涌现出了一批“机器学习即服务”平台，比如 Amazon Machine Learning、Google Prediction、DataRobot、IBM Watson 和 Microsoft Azure Machine Learning 等。它们使你能够拓展你的机器学习产品的规模，处理巨量的数据以及快速地对不同的模型进行试验。只要你在机器学习领域打好了坚实的基础，使用这些平台就像学习使用一门新工具一样简单。
特别提示
选择语言和库时要注意考虑开发时间和实际性能之间的平衡。一条能够飞速处理数据的流水线如果需要几个月来开发，在有些情况下这可能就毫无用处。一般来说，能够快速地搭建和测试原型会更重要，因为一开始你肯定会失败。
这也是为什么大部分公司都想寻找那种已经有惯用的工具 / 语言 / 库的机器学习工程师。工业界往往会用 Python 和 R 这样的高层次语言来开发算法的原型，然后用 Java 或是 C/C++ 来开发生产级别的解决方案。
这篇文章对你有所启发？不如分享到朋友圈，让更多伙伴看到！
▲ 本文由优达学城（Udacity）原创，作者 Arpan Chakraborty，原标题 Languages and Libraries for Machine Learning