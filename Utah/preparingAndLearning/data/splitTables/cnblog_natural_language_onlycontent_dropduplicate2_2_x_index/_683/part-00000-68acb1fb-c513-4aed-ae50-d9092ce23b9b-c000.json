{"content2":"自然语言处理(1)之NLTK与PYTHON\n题记: 由于现在的项目是搜索引擎，所以不由的对自然语言处理产生了好奇，再加上一直以来都想学Python，只是没有机会与时间。碰巧这几天在亚马逊上找书时发现了这本《Python自然语言处理》，瞬间觉得这对我同时入门自然语言处理与Python有很大的帮助。所以最近都会学习这本书，也写下这些笔记。\n1. NLTK简述\nNLTK模块及功能介绍\n语言处理任务\nNLTK模块\n功能描述\n获取语料库\nnltk.corpus\n语料库和词典的标准化接口\n字符串处理\nnltk.tokenize,nltk.stem\n分词、句子分解、提取主干\n搭配研究\nnltk.collocations\nt-检验，卡方，点互信息\n词性标示符\nnltk.tag\nn-gram，backoff，Brill，HMM，TnT\n分类\nnltk.classify,nltk.cluster\n决策树，最大熵，朴素贝叶斯，EM，k-means\n分块\nnltk.chunk\n正则表达式，n-gram，命名实体\n解析\nnltk.parse\n图标，基于特征，一致性，概率性，依赖项\n语义解释\nnltk.sem,nltk.inference\nλ演算，一阶逻辑，模型检验\n指标评测\nnltk.metrics\n精度，召回率，协议系数\n概率与估计\nnltk.probability\n频率分布，平滑概率分布\n应用\nnltk.app,nltk.chat\n图形化的关键词排序，分析器，WordNet查看器，聊天机器人\n语言学领域的工作\nnltk.toolbox\n处理SIL工具箱格式的数据\n2. NLTK安装\n我的Python版本是2.7.5，NLTK版本2.0.4\n1 DESCRIPTION 2 The Natural Language Toolkit (NLTK) is an open source Python library 3 for Natural Language Processing. A free online book is available. 4 (If you use the library for academic research, please cite the book.) 5 6 Steven Bird, Ewan Klein, and Edward Loper (2009). 7 Natural Language Processing with Python. O'Reilly Media Inc. 8 http://nltk.org/book 9 10 @version: 2.0.4\n安装步骤跟http://www.nltk.org/install.html 一样\n1. 安装Setuptools: http://pypi.python.org/pypi/setuptools\n在页面的最下面setuptools-5.7.tar.gz\n2. 安装 Pip: 运行 sudo easy_install pip(一定要以root权限运行)\n3. 安装 Numpy (optional): 运行 sudo pip install -U numpy\n4. 安装 NLTK: 运行 sudo pip install -U nltk\n5. 进入python，并输入以下命令\n1 192:chapter2 rcf$ python 2 Python 2.7.5 (default, Mar 9 2014, 22:15:05) 3 [GCC 4.2.1 Compatible Apple LLVM 5.0 (clang-500.0.68)] on darwin 4 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. 5 >>> import nltk 6 >>> nltk.download()\n当出现以下界面进行nltk_data的下载\n也可直接到 http://nltk.googlecode.com/svn/trunk/nltk_data/index.xml 去下载数据包，并拖到Download Directory。我就是这么做的。\n最后在Python目录运行以下命令以及结果，说明安装已成功\n1 from nltk.book import * 2 *** Introductory Examples for the NLTK Book *** 3 Loading text1, ..., text9 and sent1, ..., sent9 4 Type the name of the text or sentence to view it. 5 Type: 'texts()' or 'sents()' to list the materials. 6 text1: Moby Dick by Herman Melville 1851 7 text2: Sense and Sensibility by Jane Austen 1811 8 text3: The Book of Genesis 9 text4: Inaugural Address Corpus 10 text5: Chat Corpus 11 text6: Monty Python and the Holy Grail 12 text7: Wall Street Journal 13 text8: Personals Corpus 14 text9: The Man Who Was Thursday by G . K . Chesterton 1908\n3. NLTK的初次使用\n现在开始进入正题，由于本人没学过python，所以使用NLTK也就是学习Python的过程。初次学习NLTK主要使用的时NLTK里面自带的一些现有数据，上图中已由显示，这些数据都在nltk.book里面。\n3.1 搜索文本\nconcordance:搜索text1中的monstrous\n1 >>> text1.concordance(\"monstrous\") 2 Building index... 3 Displaying 11 of 11 matches: 4 ong the former , one was of a most monstrous size . ... This came towards us , 5 ON OF THE PSALMS . \" Touching that monstrous bulk of the whale or ork we have r 6 ll over with a heathenish array of monstrous clubs and spears . Some were thick 7 d as you gazed , and wondered what monstrous cannibal and savage could ever hav 8 that has survived the flood ; most monstrous and most mountainous ! That Himmal 9 they might scout at Moby Dick as a monstrous fable , or still worse and more de 10 th of Radney .'\" CHAPTER 55 Of the Monstrous Pictures of Whales . I shall ere l 11 ing Scenes . In connexion with the monstrous pictures of whales , I am strongly 12 ere to enter upon those still more monstrous stories of them which are to be fo 13 ght have been rummaged out of this monstrous cabinet there is no telling . But 14 of Whale - Bones ; for Whales of a monstrous size are oftentimes cast up dead u\nsimilar:查找text1中与monstrous相关的所有词语\n1 >>> text1.similar(\"monstrous\") 2 Building word-context index... 3 abundant candid careful christian contemptible curious delightfully 4 determined doleful domineering exasperate fearless few gamesome 5 horrible impalpable imperial lamentable lazy loving\ndispersion_plot：用离散图判断词在文本的位置即偏移量\n1 >>> text4.dispersion_plot([\"citizens\",\"democracy\",\"freedom\",\"duties\",\"America\"])\n3.2 计数词汇\nlen:获取长度，即可获取文章的词汇个数，也可获取单个词的长度\n1 >>> len(text1) #计算text1的词汇个数 2 260819 3 >>> len(set(text1)) #计算text1 不同的词汇个数 4 19317 5 >>> len(text1[0]) #计算text1 第一个词的长度 6 1\nsorted:排序\n1 >>> sent1 2 ['Call', 'me', 'Ishmael', '.'] 3 >>> sorted(sent1) 4 ['.', 'Call', 'Ishmael', 'me']\n3.3 频率分布\nnltk.probability.FreqDist\n1 >>> fdist1=FreqDist(text1) #获取text1的频率分布情况 2 >>> fdist1 　　　　　　　　#text1具有19317个样本,但是总体有260819个值 3 <FreqDist with 19317 samples and 260819 outcomes> 4 >>> keys=fdist1.keys() 5 >>> keys[:50] #获取text1的前50个样本\n6 [',', 'the', '.', 'of', 'and', 'a', 'to', ';', 'in', 'that', \"'\", '-', 'his', 'it', 'I', 's', 'is', 'he', 'with', 'was', 'as', '\"', 'all', 'for', 'this', '!', 'at', 'by', 'but', 'not', '--', 'him', 'from', 'be', 'on', 'so', 'whale', 'one', 'you', 'had', 'have', 'there', 'But', 'or', 'were', 'now', 'which', '?', 'me', 'like']\n1 >>> fdist1.items()[:50] #text1的样本分布情况，比如','出现了18713次，总共的词为260819 2 [(',', 18713), ('the', 13721), ('.', 6862), ('of', 6536), ('and', 6024), ('a', 4569), ('to', 4542), (';', 4072), ('in', 3916), ('that', 2982), (\"'\", 2684), ('-', 2552), ('his', 2459), ('it', 2209), ('I', 2124), ('s', 1739), ('is', 1695), ('he', 1661), ('with', 1659), ('was', 1632), ('as', 1620), ('\"', 1478), ('all', 1462), ('for', 1414), ('this', 1280), ('!', 1269), ('at', 1231), ('by', 1137), ('but', 1113), ('not', 1103), ('--', 1070), ('him', 1058), ('from', 1052), ('be', 1030), ('on', 1005), ('so', 918), ('whale', 906), ('one', 889), ('you', 841), ('had', 767), ('have', 760), ('there', 715), ('But', 705), ('or', 697), ('were', 680), ('now', 646), ('which', 640), ('?', 637), ('me', 627), ('like', 624)]\n1 >>> fdist1.hapaxes()[:50] #text1的样本只出现一次的词 2 ['!\\'\"', '!)\"', '!*', '!--\"', '\"...', \"',--\", \"';\", '):', ');--', ',)', '--\\'\"', '---\"', '---,', '.\"*', '.\"--', '.*--', '.--\"', '100', '101', '102', '103', '104', '105', '106', '107', '108', '109', '11', '110', '111', '112', '113', '114', '115', '116', '117', '118', '119', '12', '120', '121', '122', '123', '124', '125', '126', '127', '128', '129', '130']\n3 >>> fdist1['!\\'\"']\n4 1\n1 >>> fdist1.plot(50,cumulative=True) #画出text1的频率分布图\n3.4 细粒度的选择词\n1 >>> long_words=[w for w in set(text1) if len(w) > 15] #获取text1内样本词汇长度大于15的词并按字典序排序 2 >>> sorted(long_words) 3 ['CIRCUMNAVIGATION', 'Physiognomically', 'apprehensiveness', 'cannibalistically', 'characteristically', 'circumnavigating', 'circumnavigation', 'circumnavigations', 'comprehensiveness', 'hermaphroditical', 'indiscriminately', 'indispensableness', 'irresistibleness', 'physiognomically', 'preternaturalness', 'responsibilities', 'simultaneousness', 'subterraneousness', 'supernaturalness', 'superstitiousness', 'uncomfortableness', 'uncompromisedness', 'undiscriminating', 'uninterpenetratingly'] 4 >>> fdist1=FreqDist(text1) #获取text1内样本词汇长度大于7且出现次数大于7的词并按字典序排序\n5 >>> sorted([wforwin set(text5) if len(w) > 7 and fdist1[w] > 7]) 6 ['American', 'actually', 'afternoon', 'anything', 'attention', 'beautiful', 'carefully', 'carrying', 'children', 'commanded', 'concerning', 'considered', 'considering', 'difference', 'different', 'distance', 'elsewhere', 'employed', 'entitled', 'especially', 'everything', 'excellent', 'experience', 'expression', 'floating', 'following', 'forgotten', 'gentlemen', 'gigantic', 'happened', 'horrible', 'important', 'impossible', 'included', 'individual', 'interesting', 'invisible', 'involved', 'monsters', 'mountain', 'occasional', 'opposite', 'original', 'originally', 'particular', 'pictures', 'pointing', 'position', 'possibly', 'probably', 'question', 'regularly', 'remember', 'revolving', 'shoulders', 'sleeping', 'something', 'sometimes', 'somewhere', 'speaking', 'specially', 'standing', 'starting', 'straight', 'stranger', 'superior', 'supposed', 'surprise', 'terrible', 'themselves', 'thinking', 'thoughts', 'together', 'understand', 'watching', 'whatever', 'whenever', 'wonderful', 'yesterday', 'yourself']\n3.5 词语搭配和双连词\n用bigrams()可以实现双连词\n1 >>> bigrams(['more','is','said','than','done']) 2 [('more', 'is'), ('is', 'said'), ('said', 'than'), ('than', 'done')] 3 >>> text1.collocations() 4 Building collocations list 5 Sperm Whale; Moby Dick; White Whale; old man; Captain Ahab; sperm 6 whale; Right Whale; Captain Peleg; New Bedford; Cape Horn; cried Ahab; 7 years ago; lower jaw; never mind; Father Mapple; cried Stubb; chief 8 mate; white whale; ivory leg; one hand\n3.6 NLTK频率分类中定义的函数\n例子\n描述\nfdist=FreqDist(samples)\n创建包含给定样本的频率分布\nfdist.inc(sample)\n增加样本\nfdist['monstrous']\n计数给定样本出现的次数\nfdist.freq('monstrous')\n样本总数\nfdist.N()\n以频率递减顺序排序的样本链表\nfdist.keys()\n以频率递减的顺序便利样本\nfor sample in fdist:\n数字最大的样本\nfdist.max()\n绘制频率分布表\nfdist.tabulate()\n绘制频率分布图\nfdist.plot()\n绘制积累频率分布图\nfdist.plot(cumulative=True)\n绘制积累频率分布图\nfdist1<fdist2\n测试样本在fdist1中出现的样本是否小于fdist2\n最后看下text1的类情况. 使用type可以查看变量类型，使用help()可以获取类的属性以及方法。以后想要获取具体的方法可以使用help()，这个还是很好用的。\n1 >>> type(text1) 2 <class 'nltk.text.Text'> 3 >>> help('nltk.text.Text') 4 Help on class Text in nltk.text: 5 6 nltk.text.Text = class Text(__builtin__.object) 7 | A wrapper around a sequence of simple (string) tokens, which is 8 | intended to support initial exploration of texts (via the 9 | interactive console). Its methods perform a variety of analyses 10 | on the text's contexts (e.g., counting, concordancing, collocation 11 | discovery), and display the results. If you wish to write a 12 | program which makes use of these analyses, then you should bypass 13 | the ``Text`` class, and use the appropriate analysis function or 14 | class directly instead. 15 | 16 | A ``Text`` is typically initialized from a given document or 17 | corpus. E.g.: 18 | 19 | >>> import nltk.corpus 20 | >>> from nltk.text import Text 21 | >>> moby = Text(nltk.corpus.gutenberg.words('melville-moby_dick.txt')) 22 | 23 | Methods defined here: 24 | 25 | __getitem__(self, i) 26 | 27 | __init__(self, tokens, name=None) 28 | Create a Text object. 29 | 30 | :param tokens: The source text. 31 | :type tokens: sequence of str 32 | 33 | __len__(self) 34 | 35 | __repr__(self) 36 | :return: A string representation of this FreqDist. 37 | :rtype: string 38 | 39 | collocations(self, num=20, window_size=2) 40 | Print collocations derived from the text, ignoring stopwords. 41 | 42 | :seealso: find_collocations 43 | :param num: The maximum number of collocations to print. 44 | :type num: int 45 | :param window_size: The number of tokens spanned by a collocation (default=2) 46 | :type window_size: int 47 | 48 | common_contexts(self, words, num=20) 49 | Find contexts where the specified words appear; list 50 | most frequent common contexts first. 51 | 52 | :param word: The word used to seed the similarity search 53 | :type word: str 54 | :param num: The number of words to generate (default=20) 55 | :type num: int 56 | :seealso: ContextIndex.common_contexts()\n4. 语言理解的技术\n1. 词意消歧\n2. 指代消解\n3. 自动生成语言\n4. 机器翻译\n5. 人机对话系统\n6. 文本的含义\n5. 总结\n虽然是初次接触Python，NLTK，但是我已经觉得他们的好用以及方便，接下来就会深入的学习他们。"}
