{"content2":"flatten()函数用法\nflatten是numpy.ndarray.flatten的一个函数，即返回一个一维数组。\nflatten只能适用于numpy对象，即array或者mat，普通的list列表不适用！。\na.flatten()：a是个数组，a.flatten()就是把a降到一维，默认是按行的方向降 。\na.flatten().A：a是个矩阵，降维后还是个矩阵，矩阵.A（等效于矩阵.getA()）变成了数组。具体看下面的例子：\n1、用于array（数组）对象\n?\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n>>> from numpy import *\n>>> a=array([[1,2],[3,4],[5,6]])\n>>> a\narray([[1, 2],\n[3, 4],\n[5, 6]])\n>>> a.flatten() #默认按行的方向降维\narray([1, 2, 3, 4, 5, 6])\n>>> a.flatten('F') #按列降维\narray([1, 3, 5, 2, 4, 6])\n>>> a.flatten('A') #按行降维\narray([1, 2, 3, 4, 5, 6])\n>>>\n2、用于mat（矩阵）对象\n?\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n>>> a=mat([[1,2,3],[4,5,6]])\n>>> a\nmatrix([[1, 2, 3],\n[4, 5, 6]])\n>>> a.flatten()\nmatrix([[1, 2, 3, 4, 5, 6]])\n>>> a=mat([[1,2,3],[4,5,6]])\n>>> a\nmatrix([[1, 2, 3],\n[4, 5, 6]])\n>>> a.flatten()\nmatrix([[1, 2, 3, 4, 5, 6]])\n>>> y=a.flatten().A\n>>> shape(y)\n(1L, 6L)\n>>> shape(y[0])\n(6L,)\n>>> a.flatten().A[0]\narray([1, 2, 3, 4, 5, 6])\n>>>\n从中可以看出matrix.A的用法和矩阵发生的变化。\n3、但是该方法不能用于list对象，想要list达到同样的效果可以使用列表表达式：\n?\n1\n2\n3\n4\n5\n>>> a=array([[1,2],[3,4],[5,6]])\n>>> [y for x in a for y in x]\n[1, 2, 3, 4, 5, 6]\n>>>\n！\n下面看下Python中flatten用法\n一、用在数组\n?\n1\n2\n3\n4\n>>> a = [[1,3],[2,4],[3,5]]\n>>> a = array(a)\n>>> a.flatten()\narray([1, 3, 2, 4, 3, 5])\n二、用在列表\n如果直接用flatten函数会出错\n?\n1\n2\n3\n4\n5\n6\n7\n>>> a = [[1,3],[2,4],[3,5]]\n>>> a.flatten()\nTraceback (most recent call last):\nFile \"<pyshell#10>\", line 1, in <module>\na.flatten()\nAttributeError: 'list' object has no attribute 'flatten'\n正确的用法\n?\n1\n2\n3\n4\n>>> a = [[1,3],[2,4],[3,5],[\"abc\",\"def\"]]\n>>> a1 = [y for x in a for y in x]\n>>> a1\n[1, 3, 2, 4, 3, 5, 'abc', 'def']\n或者（不理解）\n?\n1\n2\n3\n4\n>>> a = [[1,3],[2,4],[3,5],[\"abc\",\"def\"]]\n>>> flatten = lambda x: [y for l in x for y in flatten(l)] if type(x) is list else [x]\n>>> flatten(a)\n[1, 3, 2, 4, 3, 5, 'abc', 'def']\n三、用在矩阵\n?\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n>>> a = [[1,3],[2,4],[3,5]]\n>>> a = mat(a)\n>>> y = a.flatten()\n>>> y\nmatrix([[1, 3, 2, 4, 3, 5]])\n>>> y = a.flatten().A\n>>> y\narray([[1, 3, 2, 4, 3, 5]])\n>>> shape(y)\n(1, 6)\n>>> shape(y[0])\n(6,)\n>>> y = a.flatten().A[0]\n>>> y\narray([1, 3, 2, 4, 3, 5])\n2017年老男孩全栈python第2期视频教程\n55G老男孩python全栈开发全套视频教程 包含:基础篇,前端篇,web框架篇,项目实战篇\n2018全栈开发Flask Python Web网站编程价值2400\n2018Python Flask打造一个视频网站实战视频教程   ...2\n2018小象学院《分布式爬虫实战》第二期视频教程\nPython高级编程技巧实战 基于Python项目与面试题讲解  ...2\nPython分布式爬虫打造搜索引擎网站（价值388元）\n小象最新Python机器学习升级版视频学习教程\n麦子学院Python自动化开发 类Zabbix监控项目开发与实战视频教程\n2017AI人工智能时代基础实战python机器学习深度学习算法全套视频教程\nAI人工智能时代基础实战python机器学习深度学习算法视频教程  ...2\n2017年最新Python3.6网络爬虫实战案例基础+实战+框架+分布式高清视频教程\nPython数据分析基础与实践 Python数据分析实践课程 Python视频教程\n2017AI人工智能基础实战python机器深度学习算法视频教程  ...2\nPython Matplotlib实战视频教程 莫烦老师Python课程+麻省理工MIT Python大牛公开课\nPython自动化开发-类Zabbix监控项目开发与实战 老男孩教学总监Alex主讲\n2017最新python数据分析入门与实战   ...2\n2017最新python入门+进阶+实战课堂教学管理系统开发全套完整版  ...2\n2017年最新Python3.6网络爬虫实战案例基础+实战+框架+分布式高清视频教程\n高清中文PDF：数据处理、分析、科学计算、自然语言处理  ...2"}
