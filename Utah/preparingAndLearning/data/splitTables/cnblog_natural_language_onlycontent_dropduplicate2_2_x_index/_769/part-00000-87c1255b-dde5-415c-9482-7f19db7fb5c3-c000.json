{"content2":"转载请注明出处“一块努力的牛皮糖”：http://www.cnblogs.com/yuxc/\n新手上路，翻译不恰之处，恳请指出，不胜感谢\nUpdated 1st 2011.8.5\n2.2 Conditional Frequency Distributions 条件频率分布\nWe introduced frequency distributions in Section 1.3. We saw that given some list mylist of words or other items, FreqDist(mylist)would compute the number of occurrences of each item in the list. Here we will generalize this idea（这里我们将泛化这个想法）.\nWhen the texts of a corpus are divided into several categories (by genre, topic, author,etc.), we can maintain separate frequency distributions for each category. This will allow us to study systematic differences between the categories. In the previous section, we achieved this using NLTK’s ConditionalFreqDist data type. A conditional frequency distribution（条件频率分布）is a collection of frequency distributions, each one for a different\"condition.\"（所谓“条件”其实就是类型嘛） The condition will often be the category of the text. Figure 2-4 depicts a fragment of a conditional frequency distribution having just two conditions, one for news text and one for romance text.\nFigure 2-4. Counting words appearing in a text collection (文本搜集)(a conditional frequency distribution).\nConditions and Events 条件和事件\nA frequency distribution counts observable events, such as the appearance of words in a text. A conditional frequency distribution needs to pair each event with a condition（用条件来对每一个事件配对）.So instead of processing a sequence of words①, we have to process a sequence of pairs②:\n>>> text = ['The', 'Fulton', 'County', 'Grand', 'Jury', 'said', ...]\n>>> pairs = [('news', 'The'), ('news', 'Fulton'), ('news', 'County'), ...]\nEach pair has the form (condition, event). If we were processing the entire Brown Corpus by genre, there would be 15 conditions (one per genre) and 1,161,192 events (one per word)\nCounting Words by Genre 按类型统计单词\nIn Section 2.1, we saw a conditional frequency distribution where the condition was the section of the Brown Corpus, and for each condition we counted words. Whereas FreqDist() takes a simple list as input, ConditionalFreqDist()takes a list of pairs.\n>>> from nltk.corpus import brown\n>>> cfd = nltk.ConditionalFreqDist(\n... (genre, word)\n... for genre in brown.categories()\n... for word in brown.words(categories=genre))\nLet’s break this down（分解）, and look at just two genres, news and romance. For each genre②, we loop over every word in the genre③, producing pairs consisting of the genre and the word①:\n>>> genre_word = [(genre, word) ① #二元组pair\n... for genre in ['news', 'romance'] ②\n... for word in brown.words(categories=genre)] ③\n>>> len(genre_word)\n170576\nSo, as we can see in the following code, pairs at the beginning of the list genre_word will be of the form ('news', word) ①, whereas those at the end will be of the form ('romance', word)②.\n>>> genre_word[:4]\n[('news', 'The'), ('news', 'Fulton'), ('news', 'County'), ('news', 'Grand')] ①\n>>> genre_word[-4:]\n[('romance', 'afraid'), ('romance', 'not'), ('romance', \"''\"), ('romance', '.')] ②\nWe can now use this list of pairs to create a ConditionalFreqDist, and save it in a variable cfd. As usual, we can type the name of the variable to inspect it①, and verify it has two conditions②:\n>>> cfd = nltk.ConditionalFreqDist(genre_word)\n>>> cfd ①\n<ConditionalFreqDist with 2 conditions>\n>>> cfd.conditions()\n['news', 'romance'] ②\nLet’s access the two conditions, and satisfy ourselves that each is just a frequency distribution:\n>>> cfd['news']\n<FreqDist with 100554 outcomes>\n>>> cfd['romance']\n<FreqDist with 70022 outcomes>\n>>> list(cfd['romance'])\n[',', '.', 'the', 'and', 'to', 'a', 'of', '``', \"''\", 'was', 'I', 'in', 'he', 'had',\n'?', 'her', 'that', 'it', 'his', 'she', 'with', 'you', 'for', 'at', 'He', 'on', 'him'\n'said', '!', '--', 'be', 'as', ';', 'have', 'but', 'not', 'would', 'She', 'The', ...]\n>>> cfd['romance']['could']\n193\nPlotting and Tabulating Distributions 绘图和制表分布\nApart from combining two or more frequency distributions, and being easy to initialize, a ConditionalFreqDistprovides some useful methods for tabulation and plotting.\nThe plot in Figure 2-1 was based on a conditional frequency distribution reproduced in the following code. The condition is either of the words america or citizen②, and the counts being plotted are the number of times the word occurred in a particular speech. It exploits the fact that the filename for each speech—for example, 1865-Lincoln.txt—contains the year as the first four characters①. This code generates the pair ('america', '1865') for every instance of a word whose lowercased form starts with america—such as Americans—in the file 1865-Lincoln.txt.\n>>> from nltk.corpus import inaugural\n>>> cfd = nltk.ConditionalFreqDist(\n... (target, fileid[:4])\n... for fileid in inaugural.fileids()\n... for w in inaugural.words(fileid)\n... for target in ['america', 'citizen']\n... if w.lower().startswith(target))\nThe plot in Figure 2-2 was also based on a conditional frequency distribution, reproduced in the following code. This time, the condition is the name of the language, and the counts being plotted are derived from(来源于) word lengths①. It exploits the fact that the filename for each language is the language name followed by '-Latin1' (the character encoding字符编码).\n>>> from nltk.corpus import udhr\n>>> languages = ['Chickasaw', 'English', 'German_Deutsch',\n... 'Greenlandic_Inuktikut', 'Hungarian_Magyar', 'Ibibio_Efik']\n>>> cfd = nltk.ConditionalFreqDist(\n... (lang, len(word)) ①\n... for lang in languages\n... for word in udhr.words(lang + '-Latin1'))\nIn the plot() and tabulate() methods, we can optionally specify which conditions to display with a conditions= parameter. When we omit it, we get all the conditions. Similarly, we can limit the samples to display with a samples= parameter. This makes it possible to load a large quantity of data into a conditional frequency distribution, and then to explore it by plotting or tabulating selected conditions and samples. It also gives us full control over the order of conditions and samples in any displays. For example, we can tabulatethe cumulative frequency data just for two languages, and for words less than 10 characters long, as shown next. We interpret the last cell on the top row to mean that 1,638 words of the English text have nine or fewer letters.\n>>> cfd.tabulate(conditions=['English', 'German_Deutsch'],\n... samples=range(10), cumulative=True)\n0 1 2 3 4 5 6 7 8 9\nEnglish 0 185 525 883 997 1166 1283 1440 1558 1638\nGerman_Deutsch 0 171 263 614 717 894 1013 1110 1213 1275\n如果关了cumulative=False，结果就如下：\nIn [8]: cfd.tabulate(conditions=['English', 'German_Deutsch'],\n...: samples=range(10), cumulative=False)\n0 1 2 3 4 5 6 7 8 9\nEnglish 0 185 340 358 114 169 117 157 118 80\nGerman_Deutsch 0 171 92 351 103 177 119 97 103 62\nYour Turn: Working with the news and romance genres from the Brown Corpus, find out which days of the week are most newsworthy（有报道价值的）, and which are most romantic. Define a variable called days containing a list of days of the week, i.e., ['Monday', ...]. Now tabulate the counts for these words using cfd.tabulate(samples=days). Now try the same thing using plot in place of tabulate. You may control the output order of days with the help of an extra parameter: conditions=['Monday', ...].\nYou may have noticed that the multiline expressions we have been using with conditional frequency distributions look like list comprehensions, but without the brackets. In general, when we use a list comprehension as a parameter to a function, like set([w.lower for w in t]), we are permitted to omit the square brackets and just write set(w.lower() for w in t). (See the discussion of “generator expressions” in Section 4.2 for more about this.)\nGenerating Random Text with Bigrams 用双连词产生随机文本\nWe can use a conditional frequency distribution to create a table of bigrams (wordpairs, introduced in Section 1.3). The bigrams() function takes a list of words and builds a list of consecutive word pairs:\n>>> sent = ['In', 'the', 'beginning', 'God', 'created', 'the', 'heaven',\n... 'and', 'the', 'earth', '.']\n>>> nltk.bigrams(sent)\n[('In', 'the'), ('the', 'beginning'), ('beginning', 'God'), ('God', 'created'),\n('created', 'the'), ('the', 'heaven'), ('heaven', 'and'), ('and', 'the'),\n('the', 'earth'), ('earth', '.')]\nIn Example 2-1, we treat each word as a condition, and for each one we effectively create a frequency distribution over the following words. The function generate_model() contains a simple loop to generate text. When we call the function, we choose a word (such as 'living') as our initial context. Then, once inside the loop, we print the current value of the variable word, and reset word to be the most likely token in that context (using max()); next time through the loop, we use that word as our new context. As you can see by inspecting the output, this simple approach to text generation tends to get stuck（陷入僵局） in loops. Another method would be to randomly choose the next word from among the available words.\nExample 2-1. Generating random text: This program obtains all bigrams from the text of the book of Genesis, then constructs a conditional frequency distribution to record which words are most likely to follow a given word; e.g., after the word living, the most likely word is creature; the generate_model() function uses this data, and a seed（种子） word, to generate random text.\ndef generate_model(cfdist, word, num=15):\nfor i in range(num):\nprint word,\nword = cfdist[word].max()\ntext = nltk.corpus.genesis.words('english-kjv.txt')\nbigrams = nltk.bigrams(text)\ncfd = nltk.ConditionalFreqDist(bigrams)①\n>>> print cfd['living']\n<FreqDist: 'creature': 7, 'thing': 4, 'substance': 2, ',': 1, '.': 1, 'soul': 1>\n>>> generate_model(cfd, 'living')\nliving creature that he said , and the land of the land of the land\nConditional frequency distributions are a useful data structure for many NLP tasks.Their commonly used methods are summarized in Table 2-4.\nTable 2-4. NLTK’s conditional frequency distributions: Commonly used methods and idioms for defining, accessing, and visualizing a conditional frequency distribution of counters\nExample\nDescription\ncfdist = ConditionalFreqDist(pairs)\nCreate a conditional frequency distribution from a list of pairs pair是一个二元组\ncfdist.conditions()\nAlphabetically sorted list of conditions 按字母排序的\ncfdist[condition]\nThe frequency distribution for this condition\ncfdist[condition][sample]\nFrequency for the given sample for this condition\ncfdist.tabulate()\nTabulate the conditional frequency distribution\ncfdist.tabulate(samples, conditions)\nTabulation limited to the specified samples and conditions\ncfdist.plot()\nGraphical plot of the conditional frequency distribution\ncfdist.plot(samples, conditions)\nGraphical plot limited to the specified samples and conditions\ncfdist1 < cfdist2\nTest if samples in cfdist1 occur less frequently than in cfdist2"}
