{"content2":"MIT自然语言处理第四讲：标注（第二部分）\n发表于 2009年03月7号 由 52nlp\n自然语言处理：标注\nNatural Language Processing: Tagging\n作者：Regina Barzilay（MIT,EECS Department, November 15, 2004)\n译者：我爱自然语言处理（www.52nlp.cn ，2009年3月7日）\n学习标注（Learning to Tag）\n* 基于转换的学习（Transformation-based Learning）\n* 隐马尔科夫标注器（Hidden Markov Model Taggers）\n* 对数线性模型（Log-linear models）\n二、 基于转换的学习（Transformation-based Learning ——TBL）\na) 概述：\ni. TBL 介于符号法和基于语料库方法之间（TBL is “in between” symbolic and corpus-based methods）；\nii. TBL利用了更广泛的词汇知识和句法规则——很少的参数估计（TBL exploit a wider range of lexical and syntactic regularities (very few parameters to estimate)）\niii. TBL关键部分（Key TBL components）：\n1. 一个容许的用于“纠错”的转换规范（a specification of which “error-correcting” transformations are admissible）\n2. 学习算法（the learning algorithm）\nb) 转换（Transformations）\ni. 重写规则(Rewrite rule)： tag1 → tag2, 如果C满足某个条件（if C holds）\n– 模板是手工选择的（Templates are hand-selected）\nii. 触发条件（Triggering environment (C)）：:\n1. 标记触发（tag-triggered）\n2. 单词触发（word-triggered）\n3. 形态触发（morphology-triggered）\nc) 转换模板（Transformation Templates）\ni. 图略；\nii. 附：TBL算法的提出者Eric Brill（1995-Transformation-Based Error-Driven Learning and Natural Language Processing: A Case Study in Part of Speech Tagging)中的模板：\n1. The preceding (following) word is tagged z.\n2. The word two before (after) is tagged z.\n3. One of the two preceding (following) words is tagged z.\n4. One of the three preceding (following) words is tagged z.\n5. The preceding word is tagged z and the following word is tagged w.\n6. The preceding (following) word is tagged z and the word two before (after) is tagged w.\n当条件满足时，将标记１变为标记２（Change tag１ to tag ２ when），其中变量a，b，z和w在词性集里取值（where a, b, z and w are variables over the set of parts of speech）。\niii. 举例：\n源标记　　　　目标标记　　　　触发条件\nNN 　　　　　　VB 　　　　　previous tag is TO\nVBP 　　　　　VB 　　　　　one of the previous tags is MD\nJJR　　　　　　JJR 　　　　　next tag is JJ\nVBP　　　　　　VB 　　　　　one of the prev. two words is “n’t”\nd) TBL的学习（Learning component of TBL）：\ni. 贪婪搜索转换的最优序列（Greedy search for the optimal sequence of transformations）：\n1. 选择最好的转换（Select the best transformations）；\n2. 决定它们应用的顺序（Determine their order of applications）；\ne) 算法（Algorithm）\n注释（Notations）：\n1. Ck — 第k次迭代时的语料库标注（corpus tagging at iteration k）\n2. E(Ck) — k次标注语料库的错误数（the number of mistakes in tagged corpus）\nC0 := corpus with each word tagged with its most frequent tag\nfor k:= 0 step 1 do\nv:=the transformation ui that minimizes r(ui(Ck))\nif (E(Ck)− E(v(Ck)) < then break fi\nCk+1 := v(Ck)\nτk+1 := τ\nend\n输出序列（Output sequence）: τ1,...,τn\nf) 初始化（Initialization）\ni. 备选方案（Alternative approaches）\n1. 随机（random）\n2. 频率最多的标记（most frequent tag）\n3. ...\nii. 实际上TBL对于初始分配并不敏感（In practice, TBL is not sensitive to the original assignment）\ng) 规则应用（Rule Application）：\ni. 从左到右的应用顺序（Left-to-right order of application）\nii. Immediate vs delayed effect:\nConsider “A → B if the preceding tag is A”\n– Immediate: AAAA →?\n– Delayed: AAAA → ?\nh) 规则应用（Rule Selection）：\ni. 我们选择模板及其相应的实例（We select both the template, and its instantiation）；\nii. 每个规则对已给出的标注进行修改（Each rule τ modifies given annotations）\n1. 某些情况下提高（improves in some places ）：Cimproved(τ)\n2. 某些情况下降低（worsens in some places）：Cworsened (τ)\n3. 对剩余数据不触动（does not touch the remaining data）\niii. 规则的贡献是（The contribution of the rule is）：\nCimproved(τ)− Cworsened (τ)\niv. 第i次迭代的规则选择（Rule selection at iteration i）：\nτ_selected (i)= argmax_τ_contrib(τ)\ni) TBL标注器（The Tagger）：\ni. 输入（Input）：\n1. 未标注的数据（untagged data）；\n2. 经由学习器学习得到规则（S）（rules (S) learned by the learner）；\nii. 标注（Tagging）：\n1. 使用与学习器相同的初始值（use the same initialization as the learner did）\n2. 应用所有学习得到的规则，保持合适的应用顺序（apply all the learned rules ，keep the proper order of application)\n3. 最后的即时数据为输出（the last intermediate data is the output）\nj) 讨论（Discussion）\ni. TBL的时间复杂度是多少（What is the time complexity of TBL）?\nii. 有无可能建立一个无监督的TBL标注器（Is it possible to develop an unsupervised TBL tagger）?\nk) 与其他模型的关系（Relation to Other Models）：\ni. 概率模型（Probabilistic models）：\n1. “k-best”标注（“k-best” tagging）；\n2. 对先验知识编码（encoding of prior knowledge）；\nii. 决策树（Decision Trees）\n1. TBL 很有效（TBL is more powerful (Brill, 1995)）；\n2. TBL对于过度学习“免疫”（TBL is immune to overfitting）。\n关于TBL，《自然语言处理综论》第8章有更通俗的解释和更详细的算法说明。\n附：课程及课件pdf下载MIT英文网页地址：\nhttp://people.csail.mit.edu/regina/6881/"}
