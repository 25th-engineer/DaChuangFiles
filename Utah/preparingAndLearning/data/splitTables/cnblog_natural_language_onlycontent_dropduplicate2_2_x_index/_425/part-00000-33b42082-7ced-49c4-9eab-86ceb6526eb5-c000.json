{"content2":"原创翻译，如需转载，请与博主联系：yuxcer@126.com\n新手上路，翻译不恰之处，恳请指出，不胜感谢\n2.5 WordNet\nWordNet is a semantically oriented dictionary of English, similar to a traditional thesaurus（辞典）but with a richer structure. NLTK includes the English WordNet, with 155,287 words and 117,659 synonym（同义词）sets. We’ll begin by looking at synonyms and how they are accessed in WordNet.\nSenses and Synonyms 意义和同义词\nConsider the sentence in (1a). If we replace the word motorcar in (1a) with automobile, to get (1b), the meaning of the sentence stays pretty much the same:\n(1) a. Benz is credited with the invention of the motorcar.\nb. Benz is credited with the invention of the automobile.\nSince everything else in the sentence has remained unchanged, we can conclude that the words motorcar and automobile have the same meaning, i.e., they are synonyms.\nWe can explore these words with the help of WordNet:\n>>> from nltk.corpus import wordnet as wn\n>>> wn.synsets('motorcar')\n[Synset('car.n.01')]\nThus, motorcar has just one possible meaning and it is identified as car.n.01, the first noun sense of car. The entity car.n.01 is called a synset, or “synonym set,”（同义词集）a collection of synonymous words (or “lemmas”):\n>>> wn.synset('car.n.01').lemma_names\n['car', 'auto', 'automobile', 'machine', 'motorcar']\nEach word of a synset can have several meanings, e.g., car can also signify a train carriage, a gondola（货车）, or an elevator car. However, we are only interested in the single meaning that is common to all words of this synset. Synsets also come with a prose（平凡的） definition and some example sentences:\n>>> wn.synset('car.n.01').definition\n'a motor vehicle with four wheels; usually propelled by an internal combustion engine（内燃机）'\n>>> wn.synset('car.n.01').examples\n['he needs a car to get to work']\nAlthough definitions help humans to understand the intended meaning of a synset, the words of the synset are often more useful for our programs. To eliminate ambiguity, we will identify these words as car.n.01.automobile, car.n.01.motorcar, and so on. This pairing of a synset with a word is called a lemma（一个同义词集的单词配对称为词条）. We can get all the lemmas for a given synset①, look up a particular lemma②, get the synset corresponding to a lemma③, and get the “name” of a lemma④:\n>>> wn.synset('car.n.01').lemmas ①\n[Lemma('car.n.01.car'), Lemma('car.n.01.auto'), Lemma('car.n.01.automobile'),\nLemma('car.n.01.machine'), Lemma('car.n.01.motorcar')]\n>>> wn.lemma('car.n.01.automobile') ②\nLemma('car.n.01.automobile')\n>>> wn.lemma('car.n.01.automobile').synset ③\nSynset('car.n.01')\n>>> wn.lemma('car.n.01.automobile').name ④\n'automobile'\nUnlike the words automobile and motorcar, which are unambiguous and have one synset, the word car is ambiguous, having five synsets:\n>>> wn.synsets('car')\n[Synset('car.n.01'), Synset('car.n.02'), Synset('car.n.03'), Synset('car.n.04'),\nSynset('cable_car.n.01')]\n>>> for synset in wn.synsets('car'):\n... print synset.lemma_names\n...\n['car', 'auto', 'automobile', 'machine', 'motorcar']\n['car', 'railcar', 'railway_car', 'railroad_car']\n['car', 'gondola']\n['car', 'elevator_car']\n['cable_car', 'car']\nFor convenience, we can access all the lemmas involving the word car as follows:\n>>> wn.lemmas('car')\n[Lemma('car.n.01.car'), Lemma('car.n.02.car'), Lemma('car.n.03.car'),\nLemma('car.n.04.car'), Lemma('cable_car.n.01.car')]\nYour Turn: Write down all the senses of the word dish that you can think of. Now, explore this word with the help of WordNet, using the same operations shown earlier.\nThe WordNet Hierarchy WordNet层次结构\nWordNet synsets correspond to abstract concepts（抽象的概念）, and they don’t always have corresponding words in English. These concepts are linked together in a hierarchy. Some concepts are very general, such as Entity, State, Event; these are called unique beginnersor root synsets（根同义词集）. Others, such as gas guzzler（油老虎） and hatchback（带掀式后背的小轿车）, are much more specific. A small portion of a concept hierarchy is illustrated in Figure 2-8.\nFigure 2-8. Fragment of WordNet concept hierarchy: Nodes correspond to synsets; edges indicate the hypernym（上位词）/hyponym（下位词） relation, i.e., the relation between superordinate（同hypernym） and subordinate（从属的） concepts\nWordNet makes it easy to navigate between concepts. For example, given a concept like motorcar, we can look at the concepts that are more specific—the (immediate) hyponyms.\n>>> motorcar = wn.synset('car.n.01')\n>>> types_of_motorcar = motorcar.hyponyms()\n>>> types_of_motorcar[26]\nSynset('ambulance.n.01')\n>>> sorted([lemma.name for synset in types_of_motorcar for lemma in synset.lemmas])\n['Model_T', 'S.U.V.', 'SUV', 'Stanley_Steamer', 'ambulance', 'beach_waggon',\n'beach_wagon', 'bus', 'cab', 'compact', 'compact_car', 'convertible',\n'coupe', 'cruiser', 'electric', 'electric_automobile', 'electric_car',\n'estate_car', 'gas_guzzler', 'hack', 'hardtop', 'hatchback', 'heap',\n'horseless_carriage', 'hot-rod', 'hot_rod', 'jalopy', 'jeep', 'landrover',\n'limo', 'limousine', 'loaner', 'minicar', 'minivan', 'pace_car', 'patrol_car',\n'phaeton', 'police_car', 'police_cruiser', 'prowl_car', 'race_car', 'racer',\n'racing_car', 'roadster', 'runabout', 'saloon', 'secondhand_car', 'sedan',\n'sport_car', 'sport_utility', 'sport_utility_vehicle', 'sports_car', 'squad_car',\n'station_waggon', 'station_wagon', 'stock_car', 'subcompact', 'subcompact_car',\n'taxi', 'taxicab', 'tourer', 'touring_car', 'two-seater', 'used-car', 'waggon',\n'wagon']\nWe can also navigate up（浏览） the hierarchy by visiting hypernyms. Some words have multiple paths, because they can be classified in more than one way. There are two paths between car.n.01 and entity.n.01 because wheeled_vehicle.n.01 can be classified as both a vehicle and a container.\n>>> motorcar.hypernyms()\n[Synset('motor_vehicle.n.01')]\n>>> paths = motorcar.hypernym_paths()\n>>> len(paths)\n2\n>>> [synset.name for synset in paths[0]]\n['entity.n.01', 'physical_entity.n.01', 'object.n.01', 'whole.n.02', 'artifact.n.01',\n'instrumentality.n.03', 'container.n.01', 'wheeled_vehicle.n.01',\n'self-propelled_vehicle.n.01', 'motor_vehicle.n.01', 'car.n.01']\n>>> [synset.name for synset in paths[1]]\n['entity.n.01', 'physical_entity.n.01', 'object.n.01', 'whole.n.02', 'artifact.n.01',\n'instrumentality.n.03', 'conveyance.n.03', 'vehicle.n.01', 'wheeled_vehicle.n.01',\n'self-propelled_vehicle.n.01', 'motor_vehicle.n.01', 'car.n.01']\nWe can get the most general hypernyms (or root hypernyms) of a synset as follows:\n>>> motorcar.root_hypernyms()\n[Synset('entity.n.01')]\nYour Turn:Try out NLTK’s convenient graphical WordNet browser: nltk.app.wordnet(). Explore the WordNet hierarchy by following the hypernym and hyponym links.\nMore Lexical Relations 更多词汇关系\nHypernyms and hyponyms are called lexical relations（词汇关系） because they relate one synset to another. These two relations navigate up and down the “is-a” hierarchy. Another important way to navigate the WordNet network is from items to their components (meronyms 部分) or to the things they are contained in (holonyms整体). For example, the parts of a tree are its trunk（树干）, crown（树冠）, and so on; these are the part_meronyms(). The substance（实质） a tree is made of includes heartwood（心材） and sapwood（边材）, i.e., the substance_meronyms(). A collection of trees forms a forest, i.e., the member_holonyms():\n>>> wn.synset('tree.n.01').part_meronyms()\n[Synset('burl.n.02'), Synset('crown.n.07'), Synset('stump.n.01'),\nSynset('trunk.n.01'), Synset('limb.n.02')]\n>>> wn.synset('tree.n.01').substance_meronyms()\n[Synset('heartwood.n.01'), Synset('sapwood.n.01')]\n>>> wn.synset('tree.n.01').member_holonyms()\n[Synset('forest.n.01')]\nTo see just how intricate（复杂的） things can get, consider the word mint, which has several closely related senses. We can see that mint.n.04 is part of mint.n.02 and the substance from which mint.n.05 is made.\n>>> for synset in wn.synsets('mint', wn.NOUN):\n... print synset.name + ':', synset.definition\n...\nbatch.n.02: (often followed by `of') a large number or amount or extent\nmint.n.02: any north temperate（北温带）plant of the genus Mentha with aromatic leaves and\nsmall mauve（淡紫色） flowers\nmint.n.03: any member of the mint family of plants\nmint.n.04: the leaves of a mint plant used fresh or candied\nmint.n.05: a candy(糖果) that is flavored（加味）with a mint oil\nmint.n.06: a plant where money is coined by authority of the government\n>>> wn.synset('mint.n.04').part_holonyms()\n[Synset('mint.n.02')]\n>>> wn.synset('mint.n.04').substance_holonyms()\n[Synset('mint.n.05')]\nThere are also relationships between verbs. For example, the act of walking involves the act of stepping, so walking entails（蕴涵） stepping. Some verbs have multiple entailments:\n>>> wn.synset('walk.v.01').entailments()\n[Synset('step.v.01')]\n>>> wn.synset('eat.v.01').entailments()\n[Synset('swallow.v.01'), Synset('chew.v.01')]\n>>> wn.synset('tease.v.03').entailments()\n[Synset('arouse.v.07'), Synset('disappoint.v.01')]\nSome lexical relationships hold between lemmas, e.g., antonymy（反义词组）:\n>>> wn.lemma('supply.n.02.supply').antonyms()\n[Lemma('demand.n.02.demand')]\n>>> wn.lemma('rush.v.01.rush').antonyms()\n[Lemma('linger.v.04.linger')]\n>>> wn.lemma('horizontal.a.01.horizontal').antonyms()\n[Lemma('vertical.a.01.vertical'), Lemma('inclined.a.02.inclined')]\n>>> wn.lemma('staccato.r.01.staccato').antonyms() 不连续的\n[Lemma('legato.r.01.legato')] 连奏的\nYou can see the lexical relations, and the other methods defined on a synset, using\ndir(). For example, try dir(wn.synset('harmony.n.02')).\nSemantic Similarity 语义相似度\nWe have seen that synsets are linked by a complex network of lexical relations. Given a particular synset, we can traverse the WordNet network to find synsets with related meanings. Knowing which words are semantically related is useful for indexing a collection of texts, so that a search for a general term such as vehicle will match documents containing specific terms such as limousine（豪华轿车）.\nRecall that each synset has one or more hypernym paths that link it to a root hypernym such as entity.n.01. Two synsets linked to the same root may have several hypernyms in common（共同之处） (see Figure 2-8). If two synsets share a very specific hypernym—one that is low down（实情？） in the hypernym hierarchy—they must be closely related.\n>>> right = wn.synset('right_whale.n.01')\n>>> orca = wn.synset('orca.n.01')\n>>> minke = wn.synset('minke_whale.n.01')\n>>> tortoise = wn.synset('tortoise.n.01')\n>>> novel = wn.synset('novel.n.01')\n>>> right.lowest_common_hypernyms(minke)\n[Synset('baleen_whale.n.01')]\n>>> right.lowest_common_hypernyms(orca)\n[Synset('whale.n.02')]\n>>> right.lowest_common_hypernyms(tortoise)\n[Synset('vertebrate.n.01')]\n>>> right.lowest_common_hypernyms(novel)\n[Synset('entity.n.01')]\nOf course we know that whale is very specific (and baleen whale even more so), whereas vertebrate is more general and entity is completely general. We can quantify this concept of generality by looking up the depth of each synset:\n>>> wn.synset('baleen_whale.n.01').min_depth()\n14\n>>> wn.synset('whale.n.02').min_depth()\n13\n>>> wn.synset('vertebrate.n.01').min_depth()\n8\n>>> wn.synset('entity.n.01').min_depth()\n0\nSimilarity measures have been defined over the collection of WordNet synsets that incorporate this insight. For example, path_similarityassigns a score in the range 0–1 based on the shortest path that connects the concepts in the hypernym hierarchy (-1 is returned in those cases where a path cannot be found 没有路径就返回-1). Comparing a synset with itself will return 1（与自己比较返回1）. Consider the following similarity scores, relating right whale（露脊鲸） to minke whale（小须鲸\n）, orca（逆戟鲸）, tortoise, and novel. Although the numbers won’t mean much, they decrease as we move away from the semantic space（语义空间） of sea creatures to inanimate objects（静物）.\n>>> right.path_similarity(minke)\n0.25\n>>> right.path_similarity(orca)\n0.16666666666666666\n>>> right.path_similarity(tortoise)\n0.076923076923076927\n>>> right.path_similarity(novel)\n0.043478260869565216\nSeveral other similarity measures are available; you can type help(wn) for more information. NLTK also includes VerbNet, a hierarchical verb lexicon linked to WordNet. It can be accessed with nltk.corpus.verb net."}
