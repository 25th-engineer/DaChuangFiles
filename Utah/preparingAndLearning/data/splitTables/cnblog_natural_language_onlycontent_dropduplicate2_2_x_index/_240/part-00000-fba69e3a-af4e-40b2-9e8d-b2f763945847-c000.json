{"content2":"【单选40min+在线编程80min】\n单选\n1、以下进程的哪些行为不会导致操作系统向该进程发送一个信号？（）\nA. 程序终止退出\nB. 访问了一个非法的内存地址\nC. 一个该程序正在监听的socket 上来了一个新连接\nD. 发生了除0错误\nE.  a.b.c.d 都不会触发信号\nF.  a.b.c.d 都会触发信号\n2、已知f(x),g(x)，都是凸函数（convex function）下面哪个函数一定仍是凸函数？（）\nA. f(x)*g(x)\nB. f(x)/g(x)\nC. f(g(x))\nD. min{ f(x),g(x)}\nE. max{ f(x),g(x)}\nF. f(x)-g(x)\n3、有关数据挖掘中聚类分析的描述，不正确的是（）\nA. K 均值和K 中心是常用的聚类方法\nB. 聚类分析是一种无监督的学习\nC. 聚类分析可用于异常值检测\nD. 聚类分析可用于数据降维\nE. 基于密度的聚类方法可以发现任意形状的簇\nF.  DBSCAN 是一种基于层次的聚类方法\nLDG：F\n4、在典型的CS服务架构中，假设我们的客户端和服务端都是单进程，同时客户端向服务端建立了很多长连接。当这个服务端进程被 kill -9 命令误杀之后，客户端机器和服务器上的连接会呈现什么样的状态：（ ）\nA. 客户端大量连接处于FIN_WAIT2 状态，服务器大量连接处于CLOSING 状态\nB. 客户端大量连接处于FIN_WAIT2 状态，服务器大量连接处于CLOSING_WAIT状态\nC. 客户端大量连接处于CLOSING状态，服务器大量连接处于FIN_WAIT2状态\nD. 客户端大量连接处于CLOSING_WAIT状态，服务器大量连接处于FIN_WAIT2状态\nE. 客户端大量连接处于CLOSING状态，服务器大量连接处于CLOSING状态\nF. 客户端和服务器都已经不能看到这些连接的状态\n5、下列关于Linux 中 kernel space 和user space 描述错误的是：（）\nA. user space 不能直接对文件进行写操作\nB. 程序代码能手动指定在哪个 space 中运行\nC. user space 不能直接创建进程\nD. user space和kernel space 的运行空间是相互隔离的\nE. kernel space 可以执行任意系统命令\nF. user space 中运行出错不会影响kernel space\nLLT：E\n6、小明主管带领团队同学自驾出行，途中经过一座长为200米的大桥，自驾车队以4米/秒的速度缓慢通过，整个车队通过大桥耗时115秒，已知每辆车长为5米，两车间隔为10米，请问小明的自驾车队有几辆车？（）\nA. 19\nB. 22\nC. 14\nD. 17\nE. 18\nF. 15\n7、有一圆球从高度为H 的地方自由落下，每次弹跳起的高度为原高度的1/2，则从圆球开始落下到第10次着地时运动的距离为：（）\nA. 767H/256\nB. 1533H/512\nC. 3069H/1024\nD. 383H/128\nE. 1023H/256\nF. 以上均不正确\n8、关于Android 系统中的ANR，以下说法中哪个是错误的？（）\nA. ANR 是Android开发中常见问题，开发人员应该极力避免以提升用户体验\nB. 应用ANR的是系统底层来监控的\nC. Activity 和Service 都可能引发ANR\nD. BroadcastReceiver 不接收用户事件输入，onReceive 中不会触发 ANR\nE. 应用开发时应避免在 UI线程做长时间的操作如网络 IO 或大运算量计算以避免ANR\nF. 可以把耗时任务放到AsyncTask 来避免 ANR\n9、若有向无环图G的有向边集合为 E={<1,3>, <3,2>,<1,4>,<3,6>,<4,6>,<3,6>,<6,5>}，则以下属于有向图G的一种拓扑排序的是（）\nA. 1,2,3,4,5,6\nB. 1,3,2,6,4,5\nC. 1,4,6,3,2,5\nD. 1,3,2,4,6,5\nE. 1,3,2,5,4,6\nF. 1,4,6,5,3,2\nLLT：D\n10、在电商搜索干预场景中，一条完整的干预规则包含两个部分：干预条件和干预动作。干预条件是指预设若干条件集合，用于对来访的流量中的检索词、访问来源等特征进行匹配，以确定是否命中干预规则。设计一个系统具备：\n1）对检索词的匹配，模糊匹配和精确匹配；\n2）对数值条件的比较匹配（大于，小于，等于）；\n3）对某些字符串条件（非检索词）进行正则化匹配。\n以下不正确的是：（）\nA. 正则表达式的匹配，实现上使用词典查找树，可提高性能；\nB. 检索词模糊匹配，实现上使用词典查找树，可提高性能；\nC. 精确匹配，将字符串转映射成哈希值，再进行比较，可提高性能；\nD. 检索词的模糊匹配，使用倒排索引，可提高性能；\nE. 上述各种匹配方式中，正则表达式的性能最差；\nF. 数值条件比较匹配，需对数值条件进行遍历计算；\n11、阅读以下代码，计算程序运行结果是：\n12、天气预报说明天降水概率是84%，假设降水和时间无关，请问明天中午12点之前就降水的概率是多大？（）\nA. 30%\nB. 40%\nC. 50%\nD. 60%\nE. 70%\nF. 80%\n13、在一个公司，有10个团队，每个团队有10个成员，同一个团队中的每两个人都是好友，同时每个人都有3个其他团队的好友，假定这个公司的任意两个人都有一条好友链路将他们联系起来，则这个链路最长有多长？（）\nA. 经过11次好友关系\nB. 经过7次好友关系\nC. 经过13次好友关系\nD. 经过15次好友关系\nE. 经过18次好友关系\nF. 经过19次好友关系\n14、一个等差数列的第x,y,z三项的值分别是y,z,x，试求第x+y 项和第z+y项的差值（）\nA. -3\nB. -2\nC. -1\nD. 0\nE. 1\nF. 2\n15、堆栈中有元素abcdef，每次出栈可以选择一个或者两个元素栈，当有两个元素出栈时可以选择其中一个重新入栈，则所有元素为空，那么可能的出栈方式有（）种？\nA. 23\nB. 22\nC. 21\nD. 20\nE. 19\nF. 18\n16、阅读代码，计算结果：\n17、阅读代码，计算结果：\n18、阅读代码，计算结果：\n20、以下函数的时间复杂度是（）\nvoid func(int x, int y, int z) { If(x<=0) printf(“%d,%d\\n”,y,z); else { func(x-1,y+1,z); func(x-1,y,z+1); } }\nA. O（x*y*z）\nB. O（x^2*y^2）\nC. O（2^x）\nD. O（2^x *2^y*2^z）\nE. O（x !）\nF. O（（x*y*z）！）\n问答题：\n1、现在城市有N个路口，每个路口有自己的编号，从0到N-1，每个路口还有自己的交通控制信号，例如0,3 表示1号路口的交通信号每3个时刻变化一次，即0到3时刻0号路口允许通过，3到6时刻不允许通过，而6到9时刻又允许通过；以此类推，所有路口的允许通行都从时刻0开始。同时城市中存在M条道路将这N个路口相连接起来，确保从一个路口到另一个路口都可达，每条路由两个端点加上通行所需的时间表示。现在给定起始路口和目的路口，从0时刻出发，请问最快能在什么时刻到达？\n（编程）\nLDG： 第一题应该有图或者例子吧？\n2、菜鸟\nLDG： 试一下直接用等差求和公式推n和Sn 然后推k在n-1或者n+1第几个 对应加减就知道编号了？\nHJ :\n#include <stdio.h> #include <math.h> #include <stdlib.h> int helper(int a){ int gs = 0; int index = 1; while (a / index > 0){ gs++; index *= 10; } return gs; } int Get(int n){ int x; int imk = 1; int tmp = 0; int diff = 0; while (true){ int i; for (i=1; i<=imk; ++i){ if (tmp + helper(i) == n){ return (i %10); } if (tmp + helper(i) > n){ break; } tmp += helper(i); } if (tmp + helper(i) > n){ diff = i; break; } imk++; } int ds = n - tmp; int len = helper(diff); int res = len - ds; int res_index = pow(10, res); x = (diff / res_index) % 10; // do something return x; } int main() { int n; scanf(\"%d\",&n); int r = Get(n); printf(\"%d\\n\",r); }"}
