{"content2":"4.6   Program Development 程序开发\nProgramming is a skill that is acquired over several years of experience with a variety of programming languages and tasks. Key high-level abilities are algorithm design and its manifestation in structured programming（主要的高级技能是算法设计以及在结构化编程中的实现）. Key low-level abilities include familiarity with the syntactic constructs of the language, and knowledge of a variety of diagnostic methods for trouble-shooting a program which does not exhibit the expected behavior（主要的低级技能包括熟悉语言的语法概念和对于一些解决程序没有达到预期效果的诊断方法）.This section describes the internal structure of a program module and how to organize a multi-module program. Then it describes various kinds of error that arise during program development, what you can do to fix them and, better still, to avoid them in the first place（起先）.\nStructure of a Python Module Python模块的结构\nThe purpose of a program module is to bring logically-related definitions and functions together in order to facilitate re-use and abstraction（程序模块的目的是将逻辑相关的定义和函数放到一起为了促使重用和抽象）. Python modules are nothing more than individual .py files. For example, if you were working with a particular corpus format, the functions to read and write the format could be kept together. Constants used by both formats, such as field separators, or a EXTN = \".inf\" filename extension（文件扩展名）, could be shared. If the format was updated, you would know that only one file needed to be changed. Similarly, a module could contain code for creating and manipulating a particular data structure such as syntax trees, or code for performing a particular processing task such as plotting corpus statistics.\nWhen you start writing Python modules, it helps to have some examples to emulate. You can locate the code for any NLTK module on your system using the __file__variable, e.g.:\n>>> nltk.metrics.distance.__file__\n'/usr/lib/python2.5/site-packages/nltk/metrics/distance.pyc'\nThis returns the location of the compiled .pyc file for the module, and you'll probably see a different location on your machine. The file that you will need to open is the corresponding .py source file, and this will be in the same directory as the .pyc file. Alternatively, you can view the latest version of this module on the web at http://code.google.com/p/nltk/source/browse/trunk/nltk/nltk/metrics/distance.py .\nLike every other NLTK module, distance.py begins with a group of comment lines giving a one-line title of the module and identifying the authors. (Since the code is distributed, it also includes the URL where the code is available, a copyright statement, and license information.) Next is the module-level docstring, a triple-quoted multiline string containing information about the module that will be printed when someone types help(nltk.metrics.distance).\n# Natural Language Toolkit: Distance Metrics\n#\n# Copyright (C) 2001-2009 NLTK Project\n# Author: Edward Loper <edloper@gradient.cis.upenn.edu>\n#         Steven Bird <sb@csse.unimelb.edu.au>\n#         Tom Lippincott <tom@cs.columbia.edu>\n# URL: <http://www.nltk.org/>\n# For license information, see LICENSE.TXT\n#\n\"\"\"\nDistance Metrics.\nCompute the distance between two items (usually strings).\nAs metrics, they must satisfy the following three requirements:\n1. d(a, a) = 0\n2. d(a, b) >= 0\n3. d(a, c) <= d(a, b) + d(b, c)\n\"\"\"\nAfter this comes all the import statements required for the module, then any global variables, followed by a series of function definitions that make up most of the module. Other modules define \"classes,\" the main building block of object-oriented programming, which falls outside the scope of this book. (Most NLTK modules also include a demo() function which can be used to see examples of the module in use.)\nNote\nSome module variables and functions are only used within the module. These should have names beginning with an underscore, e.g. _helper(), since this will hide the name. If another module imports this one, using the idiom: from module import *, these names will not be imported. You can optionally list the externally accessible names of a module using a special built-in variable like this: __all__ = ['edit_distance','jaccard_distance'].\nMulti-Module Programs 多模块程序\nSome programs bring together a diverse range of tasks, such as loading data from a corpus, performing some analysis tasks on the data, then visualizing it. We may already have stable modules that take care of loading data and producing visualizations. Our work might involve coding up the analysis task, and just invoking functions from the existing modules. This scenario is depicted in Figure 4.7.\nFigure 4.7: Structure of a Multi-Module Program: The main program my_program.py imports functions from two other modules; unique analysis tasks are localized to the main program, while common loading and visualization tasks are kept apart to facilitate re-use and abstraction.\nBy dividing our work into several modules and using import statements to access functions defined elsewhere, we can keep the individual modules simple and easy to maintain. This approach will also result in a growing collection of modules, and make it possible for us to build sophisticated systems involving a hierarchy of modules. Designing such systems well is a complex software engineering task, and beyond the scope of this book.\nSources of Error 错误源\nMastery of programming depends on having a variety of problem-solving skills to draw upon（总结） when the program doesn't work as expected. Something as trivial（不重要的） as a mis-placed symbol might cause the program to behave very differently. We call these \"bugs\" because they are tiny in comparison to the damage they can cause. They creep into our code unnoticed, and it's only much later when we're running the program on some new data that their presence is detected. Sometimes, fixing one bug only reveals another, and we get the distinct impression that the bug is on the move（bug到处跑啊）. The only reassurance（安慰） we have is that bugs are spontaneous and not the fault of the programmer（我们唯一的安慰是bug是无意识发生的而不是程序员的错。哈哈，这话是什么意思呢...）.\nFlippancy aside, debugging code is hard because there are so many ways for it to be faulty. Our understanding of the input data, the algorithm, or even the programming language, may be at fault. Let's look at examples of each of these.\nFirst, the input data may contain some unexpected characters. For example, WordNet synset names have the form tree.n.01, with three components separated using periods. The NLTK WordNet module initially decomposed these names using split('.'). However, this method broke when someone tried to look up the word PhD, which has the synset name ph.d..n.01, containing four periods instead of the expected two. The solution was to use rsplit('.', 2) to do at most two splits, using the rightmost instances of the period, and leaving the ph.d. string intact. Although several people had tested the module before it was released, it was some weeks before someone detected the problem (see http://code.google.com/p/nltk/issues/detail?id=297 ).\nSecond, a supplied function might not behave as expected. For example, while testing NLTK's interface to WordNet, one of the authors noticed that no synsets had any antonyms defined, even though the underlying database provided a large quantity of antonym information. What looked like a bug in the WordNet interface turned out to be a misunderstanding about WordNet itself: antonyms are defined for lemmas, not for synsets. The only \"bug\" was a misunderstanding of the interface (see http://code.google.com/p/nltk/issues/detail?id=98 ).\nThird, our understanding of Python's semantics may be at fault. It is easy to make the wrong assumption about the relative scope of two operators. For example, \"%s.%s.%02d\" % \"ph.d.\", \"n\",1  produces a run-time error TypeError: not enough arguments for formatstring. This is because the percent operator has higher precedence than the comma operator. The fix is to add parentheses in order to force the required scope. As another example, suppose we are defining a function to collect all tokens of a text having a given length. The function has parameters for the text and the word length, and an extra parameter that allows the initial value of the result to be given as a parameter:\n>>> def find_words(text, wordlength, result=[]):\n...     for word in text:\n...         if len(word) == wordlength:\n...             result.append(word)\n...     return result\n>>> find_words(['omg', 'teh', 'lolcat', 'sitted', 'on', 'teh', 'mat'], 3)\n['omg', 'teh', 'teh', 'mat']\n>>> find_words(['omg', 'teh', 'lolcat', 'sitted', 'on', 'teh', 'mat'], 2, ['ur'])\n['ur', 'on']\n>>> find_words(['omg', 'teh', 'lolcat', 'sitted', 'on', 'teh', 'mat'], 3)\n['omg', 'teh', 'teh', 'mat', 'omg', 'teh', 'teh', 'mat']\nThe first time we call find_words() , we get all three-letter words as expected. The second time we specify an initial value for the result, a one-element list['ur'], and as expected, the result has this word along with the other two-letter word in our text. Now, the next time we call find_words()  we use the same parameters as in , but we get a different result! Each time we call find_words() with no third parameter, the result will simply extend the result of the previous call, rather than start with the empty result list as specified in the function definition. The program's behavior is not as expected because we incorrectly assumed that the default value was created at the time the function was invoked. However, it is created just once, at the time the Python interpreter loads the function. This one list object is used whenever no explicit value is provided to the function.\n解决办法，在函数开始加一个判断，如下：\nif result==[]:\nresult=[]\nDebugging Techniques 调试技术\nSince most code errors result from the programmer making incorrect assumptions, the first thing to do when you detect a bug is to check your assumptions（检测你的假设）. Localize the problem by adding print statements to the program, showing the value of important variables, and showing how far the program has progressed.\nIf the program produced an \"exception\" — a run-time error — the interpreter will print a stack trace, pinpointing（精确地指出） the location of program execution at the time of the error. If the program depends on input data, try to reduce this to the smallest size while still producing the error.\nOnce you have localized the problem to a particular function, or to a line of code, you need to work out what is going wrong. It is often helpful to recreate the situation using the interactive command line. Define some variables then copy-paste the offending line of code into the session and see what happens. Check your understanding of the code by reading some documentation, and examining other code samples that purport（意图） to do the same thing that you are trying to do. Try explaining your code to someone else, in case they can see where things are going wrong.\nPython provides a debugger which allows you to monitor the execution of your program, specify line numbers where execution will stop (i.e. breakpoints 断点), and step through（逐步调试） sections of code and inspect the value of variables. You can invoke the debugger on your code as follows:\n>>> import pdb\n>>> import mymodule\n>>> pdb.run('mymodule.myfunction()')\nIt will present you with a prompt (Pdb) where you can type instructions to the debugger. Type help to see the full list of commands. Typing step (or just s) will execute the current line and stop. If the current line calls a function, it will enter the function and stop at the first line. Typing next (or just n) is similar, but it stops execution at the next line in the current function. The break (or b) command can be used to create or list breakpoints. Type continue (or c) to continue execution as far as the next breakpoint. Type the name of any variable to inspect its value.\nWe can use the Python debugger to locate the problem in our find_words() function. Remember that the problem arose the second time the function was called. We'll start by calling the function without using the debugger , using the smallest possible input. The second time, we'll call it with the debugger .\n>>> import pdb\n>>> find_words(['cat'], 3)\n['cat']\n>>> pdb.run(\"find_words(['dog'], 3)\")\n> <string>(1)<module>()\n(Pdb) step\n--Call--\n> <stdin>(1)find_words()\n(Pdb) args\ntext = ['dog']\nwordlength = 3\nresult = ['cat']\nHere we typed just two commands into the debugger: step took us inside the function, and args showed the values of its arguments (or parameters). We see immediately that result has an initial value of ['cat'], and not the empty list as expected. The debugger has helped us to localize the problem, prompting us to check our understanding of Python functions.\nDefensive Programming 防守型编程\nIn order to avoid some of the pain of debugging, it helps to adopt some defensive programming habits. Instead of writing a 20-line program then testing it, build the program bottom-up out of small pieces that are known to work. Each time you combine these pieces to make a larger unit, test it carefully to see that it works as expected. Consider adding assert statements to your code, specifying properties of a variable, e.g. assert(isinstance(text, list)). If the value of the text variable later becomes a string when your code is used in some larger context, this will raise an AssertionError and you will get immediate notification of the problem.\nOnce you think you've found the bug, view your solution as a hypothesis. Try to predict the effect of your bugfix before re-running the program. If the bug isn't fixed, don't fall into the trap of blindly changing the code in the hope that it will magically start working again. Instead, for each change, try to articulate a hypothesis about what is wrong and why the change will fix the problem. Then undo the change if the problem was not resolved.\nAs you develop your program, extend its functionality, and fix any bugs, it helps to maintain a suite of test cases. This is called regression testing（回归测试）, since it is meant to detect situations where the code \"regresses\" — where a change to the code has an unintended side-effect of breaking something that used to work. Python provides a simple regression testing framework in the form of the doctest module. This module searches a file of code or documentation for blocks of text that look like an interactive Python session, of the form you have already seen many times in this book. It executes the Python commands it finds, and tests that their output matches the output supplied in the original file. Whenever there is a mismatch, it reports the expected and actual values. For details please consult the doctestdocumentation at http://docs.python.org/library/doctest.html . Apart from its value for regression testing, the doctest module is useful for ensuring that your software documentation stays in sync with your code.\nPerhaps the most important defensive programming strategy is to set out your code clearly, choose meaningful variable and function names, and simplify the code wherever possible by decomposing it into functions and modules with well-documented interfaces.也许最重要的防守型编程策略是清晰地书写你的代码，选择有意义的便利和函数名，并且尽可能地通过分解成带有良好文档的接口的函数和模块来简化代码。"}
