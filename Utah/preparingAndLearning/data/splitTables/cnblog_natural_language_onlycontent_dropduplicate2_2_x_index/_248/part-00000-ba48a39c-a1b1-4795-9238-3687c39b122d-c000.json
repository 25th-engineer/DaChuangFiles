{"content2":"一、 基本介绍\na) 标注问题（Tagging）\ni. 任务（Task）: 在句子中为每个词标上合适的词性\nii. 输入（Input）: Our enemies are innovative and resourceful , and so are we. They never stop thinking about new ways to harm our country and our people, and neither do we.\niii. 输出（Output）: Our/PRP$ enemies/NNS are/VBP innovative/JJ and/CC resourceful/JJ ,/, and/CC so/RB are/VB we/PRP ?/?. They/PRP never/RB stop/VB thinking/VBG about/IN new/JJ ways/NNS to/TO harm/VB our/PROP$ country/NN and/CC our/PRP$ people/NN, and/CC neither/DT do/VB we/PRP.\nb) Motivation\ni. 词性标注对于许多应用领域是非常重要的\n1. 语法分析（Parsing）\n2. 语言模型（Language modeling）\n3. 问答系统和信息抽取（Q&A and Information extraction）\n4. 文本语音转换（Text-to-speech）\nii. 标注技术可用于各种任务\n1. 语义标注（Semantic tagging）\n2. 对话标注（Dialogue tagging）\nc) 如何确定标记集?\ni. “The definition [of the parts of speech] are very far from having attained the degree of exactitude found in Euclidean geometry” Jespersen, The Philosophy of Grammar\nii. 粗糙的词典类别划分基本达成一致至少对某些语言来说\n1. 封闭类（Closed class）: 介词，限定词，代词，小品词，助动词\n2. 开放类（Open class）: 名词，动词，形容词和副词\niii. 各种粒度的多种标记集\n1. Penn tag set (45 tags), Brown tag set (87 tags), CLAWS2 tag set (132 tags)\n2. 示例：Penn Tree Tags\n标记（Tag） 说明（Description） 举例（Example）\nCC 　　　　　conjunction 　　　　and, but\nDT 　　　　　determiner 　　　　　a, the\nJJ 　　　　　　adjective 　　　　　red\nNN 　　　　　noun, sing. 　　　　　rose\nRB 　　　　　　adverb 　　　　　　quickly\nVBD 　　　　verb, past tense 　　　grew\nd) 标注难吗?\ni. 举例：“Time flies like an arrow”\nii. 许多单词可能会出现在几种不同的类别中\niii. 然而，大多数单词似乎主要在一个类别中出现\n1. “Dumb”标注器在给单词标注最常用的标记时获得了90%的准确率\n2. 对于90%的准确率我们满足吗?\niv. 标注的信息资源：\n1. 词汇（Lexical）: 观察单词本身\n单词（Word） 名词（Noun） 动词（Verb） 介词（Preposition）\nflies 　　　　　21 　　　　　23 　　　　　0\nlike 　　　　　10 　　　　　30 　　　　　21\n2. 组合（Syntagmatic）: 观察邻近单词\n——哪个组合更像: “DT JJ NN” or “DT JJ VBP“?\n二、 基于转换的学习\na) 概述：\ni. TBL 介于符号法和基于语料库方法之间；\nii. TBL利用了更广泛的词汇知识和句法规则——很少的参数估计\niii. TBL关键部分：\n1. 一个容许的用于“纠错”的转换规范\n2. 学习算法\nb) 转换\ni. 重写规则(Rewrite rule)： tag1 → tag2, 如果C满足某个条件（if C holds）\n– 模板是手工选择的（Templates are hand-selected）\nii. 触发条件（Triggering environment (C)）：:\n1. 标记触发（tag-triggered）\n2. 单词触发（word-triggered）\n3. 形态触发（morphology-triggered）\nc) 转换模板（Transformation Templates）\ni. 图略；\nii. 附：TBL算法的提出者Eric Brill（1995-Transformation-Based Error-Driven Learning and Natural Language Processing: A Case Study in Part of Speech Tagging)中的模板：\n1. The preceding (following) word is tagged z.\n2. The word two before (after) is tagged z.\n3. One of the two preceding (following) words is tagged z.\n4. One of the three preceding (following) words is tagged z.\n5. The preceding word is tagged z and the following word is tagged w.\n6. The preceding (following) word is tagged z and the word two before (after) is tagged w.\n当条件满足时，将标记１变为标记２（Change tag１ to tag ２ when），其中变量a，b，z和w在词性集里取值（where a, b, z and w are variables over the set of parts of speech）。\niii. 举例：\n源标记　　　　目标标记　　　　触发条件\nNN 　　　　　　VB 　　　　　previous tag is TO\nVBP 　　　　　VB 　　　　　one of the previous tags is MD\nJJR　　　　　　JJR 　　　　　next tag is JJ\nVBP　　　　　　VB 　　　　　one of the prev. two words is “n’t”\nd) TBL的学习（Learning component of TBL）：\ni. 贪婪搜索转换的最优序列：\n1. 选择最好的转换；\n2. 决定它们应用的顺序；\ne) 算法（Algorithm）\n注释（Notations）：\n1. Ck — 第k次迭代时的语料库标注（corpus tagging at iteration k）\n2. E(Ck) — k次标注语料库的错误数（the number of mistakes in tagged corpus）\nC0 := corpus with each word tagged with its most frequent tag\nfor k:= 0 step 1 do\nv:=the transformation ui that minimizes r(ui(Ck))\nif (E(Ck)− E(v(Ck)) < then break fi\nCk+1 := v(Ck)\nτk+1 := τ\nend\n输出序列（Output sequence）: τ1,...,τn\nf) 初始化（Initialization）\ni. 备选方案（Alternative approaches）\n1. 随机（random）\n2. 频率最多的标记（most frequent tag）\n3. ...\nii. 实际上TBL对于初始分配并不敏感\ng) 规则应用（Rule Application）：\ni. 从左到右的应用顺序\nii. Immediate vs delayed effect:\nConsider “A → B if the preceding tag is A”\n– Immediate: AAAA →?\n– Delayed: AAAA → ?\nh) 规则选择（Rule Selection）：\ni. 我们选择模板及其相应的实例；\nii. 每个规则对已给出的标注进行修改\n1. 某些情况下提高：Cimproved(τ)\n2. 某些情况下降低：Cworsened (τ)\n3. 对剩余数据不触动\niii. 规则的贡献是：\nCimproved(τ)− Cworsened (τ)\niv. 第i次迭代的规则选择：\nτ_selected (i)= argmax_τ_contrib(τ)\ni) TBL标注器（The Tagger）：\ni. 输入（Input）：\n1. 未标注的数据；\n2. 经由学习器学习得到规则（S）；\nii. 标注（Tagging）：\n1. 使用与学习器相同的初始值\n2. 应用所有学习得到的规则，保持合适的应用顺序\n3. 最后的即时数据为输出\nj) 讨论（Discussion）\ni. TBL的时间复杂度是多少?\nii. 有无可能建立一个无监督的TBL标注器?\nk) 与其他模型的关系（Relation to Other Models）：\ni. 概率模型（Probabilistic models）：\n1. “k-best”标注（“k-best” tagging）；\n2. 对先验知识编码（encoding of prior knowledge）；\nii. 决策树（Decision Trees）\n1. TBL 很有效（TBL is more powerful (Brill, 1995)）；\n2. TBL对于过度学习“免疫”（TBL is immune to overfitting）。\n关于TBL，《自然语言处理综论》第8章有更通俗的解释和更详细的算法说明。\n三、 马尔科夫模型（Markov Model）\na) 直观（Intuition）：对于序列中的每个单词挑选最可能的标记（Pick the most likely tag for each word of a sequence）\ni. 我们将对P(T,S)建模，其中T是一个标记序列，S是一个单词序列\nii.　P({T}delim{|}{S}{})={P(T,S)}/{sum{T}{}{P(T,S)}}\nTagger(S)= argmax_{T in T^n}logP({T}delim{|}{S}{})\n= argmax_{T in T^n}logP({T,S}{})\nb) 参数估计（Parameter Estimation）\ni. 应用链式法则（Apply chain rule）:\nP(T,S)={prod{j=1}{n}{P({T_j}delim{|}{S_1,...S_{j-1},T_1,...,T_{j-1}}{})}}*\nP({S_j}delim{|}{S_1,...S_{j-1}T_1,...,T_{j}}{})\nii. 独立性假设（马尔科夫假设）（Assume independence (Markov assumption)）:\n={prod{j=1}{n}{P({T_j}delim{|}{T_{j-2},T_{j-1}}{})}}*P({S_j}delim{|}{T_j}{})\nc) 举例（Example）\ni. They/PRP never/RB stop/VB thinking/VBG about/IN new/JJ 　ways/NNS to/TO harm/VB our/PROP$ country/NN and/CC our/PRP$ 　people/NN, and/CC neither/DT do/VB we/PRP.\nii. P(T, S)=P(PRP|S, S)∗P(They|PRP)∗P(RB|S, PRP)∗P(never|RB)∗...\nd) 估计转移概率（Estimating Transition Probabilities）\nP({T_j}delim{|}{T_{j-2},T_{j-1}}{})=\n{lambda_1}*{{Count(T_{j-2},T_{j-1},T_j)}/{Count(T_{j-2},T_{j-1})}}\n+{lambda_2}*{{Count(T_{j-1},T_j)}/{Count(T_{j-1})}}\n+{lambda_3}*{{Count(T_j)}/{Count(sum{i}{}{T_i})}}\ne) 估计发射概率（Estimating Emission Probabilities）\nP({S_j}delim{|}{T_j}{})={Count(S_j,T_j)}/{Count(T_j)}\ni. 问题（Problem）: 未登录词或罕见词（unknown or rare words）\n1. 专有名词（Proper names）\n“King Abdullah of Jordan, the King of Morocco, I mean, there’s a series of places — Qatar, Oman – I mean, places that are developing— Bahrain — they’re all developing the habits of free societies.”\n2. 新词（New words）\n“They misunderestimated me.”\nf) 处理低频词（Dealing with Low Frequency Words）\ni. 将词表分为两个集合（Split vocabulary into two sets）\n1. 常用词（Frequent words）— 在训练集中出现超过5次的词（words occurring more than 5 times in training）\n2. 低频词（Low frequency words）— 训练集中的其他词（all other words）\nii. 依据前缀、后缀等将低频词映射到一个小的、有限的集合中\ng) 有效标注（Efficient Tagging）\ni. 对于一个单词序列，如何寻找最可能的标记序列?\n1. 盲目搜索的方法是可怕的— 对于N个标记和W个单词计算代价是N^W.\n2. 主意（Idea）: 使用备忘录（Viterbi算法）\n——结束于相同标记的序列可以压缩在一起，因为下一个标记仅依赖于此序列的当前标记\n图示如下：\nh) Viterbi 算法（The Viterbi Algorithm）\ni. 初始情况（Base case）:\npi delim{[}{0, START}{]} = log 1 = 0\npi delim{[}{0, t_{-1}}{]} = log 0 = infty\n对所有其他的t_{-1}(for all other t_{-1})\nii. 递归情况（Recursive case）:\n1. 对于i = 1...S.length及对于所有的t_{-1} in T:\npi delim{[}{i, t_{-1}}{]} = {max}under{t in T union START}{ pi delim{[}{i-1, t}{]} + log P(t_{-1}delim{|}{t}{}) + log P(S_i delim{|}{t_{-1}}{})}\n2. 回朔指针允许我们找出最大概率序列:\nBP delim{[}{i, t_{-1}}{]} = {argmax}under{t in T union START}{ pi delim{[}{i-1, t}{]} + log P(t_{-1}delim{|}{t}{}) + log P(S_i delim{|}{t_{-1}}{})}\ni) 性能（Performance）\ni. HMM标注器对于训练非常简单（HMM taggers are very simple to train）\nii. 表现相对很好（Perform relatively well） (over 90% performance on named entities)\niii. 最大的困难是对p(单词|标记)建模（Main difficulty is modeling of p(word|tag)）\n四、 结论（Conclusions）\na) 标注是一个相对比较简单的任务，至少在一个监督框架下对于英语来说\nb) 影响标注器性能的因素包括:\ni. 训练集数量（The amount of training data available）\nii. 标记集（The tag set）\niii. 训练集和测试集的词汇差异（The difference in vocabulary between the training and the testing）\niv. 未登录词（Unknown words）\nc) TBL和HMM框架可用于其他自然语言处理任务（TBL and HMM framework can be used for other tasks）"}
