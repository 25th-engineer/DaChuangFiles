{"content2":"Melanie Tosik目前就职于旅游搜索公司WayBlazer，她的工作内容是通过自然语言请求来生产个性化旅游推荐路线。回顾她的学习历程，她为期望入门自然语言处理的初学者列出了一份学习资源清单。\ndisplaCy网站上的可视化依赖解析树\nhttps://demos.explosion.ai/displacy/?text=Great%2C%20this%20is%20just%20what%20I%20needed!&model=en&cpu=1&cph=0\n记得我曾经读到过这样一段话，如果你觉得有必要回答两次同样的问题，那就把答案发到博客上，这可能是一个好主意。根据这一原则，也为了节省回答问题的时间，我在这里给出该问题的标准问法：“我的背景是研究**科学，我对学习NLP很有兴趣。应该从哪说起呢？”\n在您一头扎进去阅读本文之前，请注意，下面列表只是提供了非常通用的入门清单（有可能不完整）。 为了帮助读者更好地阅读，我在括号内添加了简短的描述并对难度做了估计。最好具备基本的编程技能（例如Python）。\n在线课程\n• Dan Jurafsky 和 Chris Manning：自然语言处理[非常棒的视频介绍系列]\nhttps://www.youtube.com/watch?v=nfoudtpBV68&list=PL6397E4B26D00A269\n• 斯坦福CS224d：自然语言处理的深度学习[更高级的机器学习算法、深度学习和NLP的神经网络架构]\nhttp://cs224d.stanford.edu/syllabus.html\n• Coursera：自然语言处理简介[由密西根大学提供的NLP课程]\nhttps://www.coursera.org/learn/natural-language-processing\n图书馆和开放资源\n• spaCy（网站，博客）[Python; 新兴的开放源码库并自带炫酷的用法示例、API文档和演示应用程序]\n网站网址：https://spacy.io/\n博客网址：https://explosion.ai/blog/\n演示应用网址: https://spacy.io/docs/usage/showcase\n• 自然语言工具包（NLTK）（网站，图书）[Python; NLP实用编程介绍，主要用于教学目的]\n网站网址：http://www.nltk.org\n图书网址: http://www.nltk.org/book/\n• 斯坦福CoreNLP（网站）[由Java开发的高质量的自然语言分析工具包]\n网站网址: https://stanfordnlp.github.io/CoreNLP/\n活跃的博客\n• 自然语言处理博客（HalDaumé）\n博客网址：https://nlpers.blogspot.com/\n• Google研究博客\n博客网址：https://research.googleblog.com/\n• 语言日志博客（Mark Liberman）\n博客网址：http://languagelog.ldc.upenn.edu/nll/\n书籍\n• 言语和语言处理（Daniel Jurafsky和James H. Martin）[经典的NLP教科书，涵盖了所有NLP的基础知识，第3版即将出版]\nhttps://web.stanford.edu/~jurafsky/slp3/\n• 统计自然语言处理的基础（Chris Manning和HinrichSchütze）[更高级的统计NLP方法]\nhttps://nlp.stanford.edu/fsnlp/\n• 信息检索简介（Chris Manning，Prabhakar Raghavan和HinrichSchütze）[关于排名/搜索的优秀参考书]\nhttps://nlp.stanford.edu/IR-book/\n• 自然语言处理中的神经网络方法（Yoav Goldberg）[深入介绍NLP的NN方法，和相对应的入门书籍]\nhttps://www.amazon.com/Network-Methods-Natural-Language-Processing/dp/1627052984\n入门书籍： http://u.cs.biu.ac.il/~yogo/nnlp.pdf\n其它杂项\n• 如何在TensorFlow中构建word2vec模型[学习指南]\nhttps://www.tensorflow.org/versions/master/tutorials/word2vec/index.html\n• NLP深度学习的资源[按主题分类的关于深度学习的顶尖资源的概述]\nhttps://github.com/andrewt3000/dl4nlp\n• 最后一句话：计算语言学和深度学习——论自然语言处理的重要性。（Chris Manning）[文章]\nhttp://mitp.nautil.us/article/170/last-words-computational-linguistics-and-deep-learning\n• 对分布式表征的自然语言的理解（Kyunghyun Cho）[关于NLU的ML / NN方法的独立讲义]\nhttps://github.com/nyu-dl/NLP_DL_Lecture_Note/blob/master/lecture_note.pdf\n• 带泪水的贝叶斯推论（Kevin Knight）[教程工作簿]\nhttp://www.isi.edu/natural-language/people/bayes-with-tears.pdf\n• 国际计算语言学协会（ACL）[期刊选集]\nhttp://aclanthology.info/\n• 果壳问答网站(Quora)：我是如何学习自然语言处理的？\nhttps://www.quora.com/How-do-I-learn-Natural-Language-Processing\nDIY项目和数据集\n资料来源：http://gunshowcomic.com/\n• Nicolas Iderhoff已经创建了一份公开的、详尽的NLP数据集的列表。除了这些，这里还有一些项目，可以推荐给那些想要亲自动手实践的NLP新手们：\n数据集：https://github.com/niderhoff/nlp-datasets\n• 基于隐马尔可夫模型（HMM）实现词性标注（POS tagging）.\nhttps://en.wikipedia.org/wiki/Part-of-speech_tagging\nhttps://en.wikipedia.org/wiki/Hidden_Markov_model\n• 使用CYK算法执行上下文无关的语法解析\nhttps://en.wikipedia.org/wiki/CYK_algorithm\nhttps://en.wikipedia.org/wiki/Context-free_grammar\n• 在文本集合中，计算给定两个单词之间的语义相似度，例如点互信息（PMI，Pointwise Mutual Information）\nhttps://en.wikipedia.org/wiki/Semantic_similarity\nhttps://en.wikipedia.org/wiki/Pointwise_mutual_information\n• 使用朴素贝叶斯分类器来过滤垃圾邮件\nhttps://en.wikipedia.org/wiki/Naive_Bayes_classifier\nhttps://en.wikipedia.org/wiki/Naive_Bayes_spam_filtering\n• 根据单词之间的编辑距离执行拼写检查\nhttps://en.wikipedia.org/wiki/Spell_checker\nhttps://en.wikipedia.org/wiki/Edit_distance\n• 实现一个马尔科夫链文本生成器\nhttps://en.wikipedia.org/wiki/Markov_chain\n• 使用LDA实现主题模型\nhttps://en.wikipedia.org/wiki/Topic_model\nhttps://en.wikipedia.org/wiki/Latent_Dirichlet_allocation\n• 使用word2vec从大型文本语料库，例如维基百科，生成单词嵌入。\nhttps://code.google.com/archive/p/word2vec/\nhttps://en.wikipedia.org/wiki/Wikipedia:Database_download\nNLP在社交媒体上\n• Twitter：#nlproc，NLPers上的文章列表（由Jason Baldrige提供）\nhttps://twitter.com/hashtag/nlproc\nhttps://twitter.com/jasonbaldridge/lists/nlpers\n• Reddit 社交新闻站点：/r/LanguageTechnology\nhttps://www.reddit.com/r/LanguageTechnology\n• Medium发布平台：Nlp\nhttps://medium.com/tag/nlp\n原文链接：\nhttps://medium.com/towards-data-science/how-to-get-started-in-nlp-6a62aa4eaeff"}
