{"content2":"支持中文分词（N-最短路分词、CRF分词、索引分词、用户自定义词典、词性标注），命名实体识别（中国人名、音译人名、日本人名、地名、实体机构名识别），关键词提取，自动摘要，短语提取，拼音转换，简繁转换，文本推荐，依存句法分析（MaxEnt依存句法分析、CRF依存句法分析）。提供Lucene插件，兼容Lucene4.x。\nHanLP: Han Language Processing\n汉语言处理包\nHanLP是由一系列模型与算法组成的Java工具包，目标是促进自然语言处理在生产环境中的应用。HanLP具备功能完善、性能高效、架构清晰、语料时新、可自定义的特点。\nHanLP提供下列功能：\n中文分词\n最短路分词\nN-最短路分词\nCRF分词\n索引分词\n极速词典分词\n用户自定义词典\n词性标注\n命名实体识别\n中国人名识别\n音译人名识别\n日本人名识别\n地名识别\n实体机构名识别\n关键词提取\nTextRank关键词提取\n自动摘要\nTextRank自动摘要\n短语提取\n基于互信息和左右信息熵的短语提取\n拼音转换\n多音字\n声母\n韵母\n声调\n简繁转换\n繁体中文分词\n简繁分歧词\n文本推荐\n语义推荐\n拼音推荐\n字词推荐\n依存句法分析\nMaxEnt依存句法分析\nCRF依存句法分析\n语料库工具\n分词语料预处理\n词频词性词典制作\nBiGram统计\n词共现统计\nCoNLL语料预处理\nCoNLL UA/LA/DA评测工具\n在提供丰富功能的同时，HanLP内部模块坚持低耦合、模型坚持惰性加载、服务坚持静态提供、词典坚持明文发布，使用非常方便，同时自带一些语料处理工具，帮助用户训练自己的语料。\n项目地址\nHanLP项目主页：https://github.com/hankcs/HanLP\nHanLP下载地址：https://github.com/hankcs/HanLP/releases\n内存要求\n内存120MB以上（-Xms120m -Xmx120m -Xmn64m），标准数据包（35万核心词库+默认用户词典），分词测试正常。\n全部词典和模型都是惰性加载的，如果你只用拼音转换的话，则只加载拼音词典，未加载的词典相当于不存在，不占内存。同理，模型也是如此。\n下载与配置\n方式一、通过Maven的pom.xml\n为了方便用户，特提供内置了数据包的Portable版，只需在pom.xml加入：\n<dependency>\n<groupId>com.hankcs</groupId>\n<artifactId>hanlp</artifactId>\n<version>portable-1.2.4</version>\n</dependency>\n零配置，即可使用基本功能（除CRF分词、依存句法分析外的全部功能）。连Maven都懒得用的话，可以直接下载portable版的jar。\n如果用户有自定义的需求，可以参考方式二，使用hanlp.properties进行配置。\n目前Portable体积仅仅5.7MB，作为代价，使用的是1998年的小词典，对现代汉语的支持有限；所以还是建议外挂下面的数据包比较好。\n方式二、下载jar、data、hanlp.properties\nHanLP将数据与程序分离，给予用户自定义的自由。\n1、下载jar\nhanlp.jar\n2、下载data\n数据包\n功能\n体积（MB）\ndata.zip\n全部词典，全部模型\n280（注：分词词典大约40MB，主要是句法分析模型占体积，可以自行删除。）\n在GitHub的release页面Ctrl＋F搜索data即可，下载后解压到任意目录，接下来通过配置文件告诉HanLP数据包的位置。\nHanLP中的数据分为词典和模型，其中词典是词法分析必需的，模型是句法分析必需的。\ndata\n│\n├─dictionary\n└─model\n用户可以自行增删替换，如果不需要句法分析功能的话，随时可以删除model文件夹。\n3、配置文件\n示例配置文件:hanlp.properties\n配置文件的作用是告诉HanLP数据包的位置，只需修改第一行\nroot=usr/home/HanLP/\n为data的父目录即可，比如data目录是/Users/hankcs/Documents/data，那么root=/Users/hankcs/Documents/。\n如果选用mini词典的话，则需要修改配置文件：\nCoreDictionaryPath=data/dictionary/CoreNatureDictionary.mini.txt\nBiGramDictionaryPath=data/dictionary/CoreNatureDictionary.ngram.mini.txt\n最后将HanLP.properties放入classpath即可，对于Eclipse，一般是：\n$Project/bin\nWeb项目的话可以放在如下位置：\n$Project/WEB-INF/classes\n对于任何项目，都可以放到src目录下，编译时IDE会自动将其复制到classpath中。\n如果放置不当，HanLP会智能提示当前环境下的合适路径，并且尝试从项目根目录读取数据集。\n调用方法\nHanLP几乎所有的功能都可以通过工具类HanLP快捷调用，当你想不起来调用方法时，只需键入HanLP.，IDE应当会给出提示，并展示HanLP完善的文档。\n推荐用户始终通过工具类HanLP调用，这么做的好处是，将来HanLP升级后，用户无需修改调用代码。\n所有Demo都位于com.hankcs.demo下。\n1. 第一个Demo\nSystem.out.println(HanLP.segment(\"你好，欢迎使用HanLP汉语处理包！\"));\n2. 标准分词\nList<Term> termList = StandardTokenizer.segment(\"商品和服务\");\nSystem.out.println(termList);\n说明\nHanLP中有一系列“开箱即用”的静态分词器，以Tokenizer结尾，在接下来的例子中会继续介绍。\nHanLP.segment其实是对StandardTokenizer.segment的包装。\n分词结果包含词性，每个词性的意思请查阅《HanLP词性标注集》。\n算法详解\n《词图的生成》\n3. NLP分词\nList<Term> termList = NLPTokenizer.segment(\"中国科学院计算技术研究所的宗成庆教授正在教授自然语言处理课程\");\nSystem.out.println(termList);\n说明\nNLP分词NLPTokenizer会执行全部命名实体识别和词性标注。\n4. 索引分词\nList<Term> termList = IndexTokenizer.segment(\"主副食品\");\nfor (Term term : termList)\n{\nSystem.out.println(term + \" [\" + term.offset + \":\" + (term.offset + term.word.length()) + \"]\");\n}\n说明\n索引分词IndexTokenizer是面向搜索引擎的分词器，能够对长词全切分，另外通过term.offset可以获取单词在文本中的偏移量。\n5. N-最短路径分词\nSegment nShortSegment = new NShortSegment().enableCustomDictionary(false).enablePlaceRecognize(true).enableOrganizationRecognize(true);\nSegment shortestSegment = new DijkstraSegment().enableCustomDictionary(false).enablePlaceRecognize(true).enableOrganizationRecognize(true);\nString[] testCase = new String[]{\n\"今天，刘志军案的关键人物,山西女商人丁书苗在市二中院出庭受审。\",\n\"刘喜杰石国祥会见吴亚琴先进事迹报告团成员\",\n};\nfor (String sentence : testCase)\n{\nSystem.out.println(\"N-最短分词：\" + nShortSegment.seg(sentence) + \"\\n最短路分词：\" + shortestSegment.seg(sentence));\n}\n说明\nN最短路分词器NShortSegment比最短路分词器慢，但是效果稍微好一些，对命名实体识别能力更强。\n一般场景下最短路分词的精度已经足够，而且速度比N最短路分词器快几倍，请酌情选择。\n算法详解\n《N最短路径的Java实现与分词应用》\n6. CRF分词\n/**\n* CRF分词(在最新训练的未压缩100MB模型下，能够取得较好的效果，可以投入生产环境)\n*\n* @author hankcs\n*/\npublic class DemoCRFSegment\n{\npublic static void main(String[] args)\n{\nHanLP.Config.ShowTermNature = false;    // 关闭词性显示\nSegment segment = new CRFSegment();\nString[] sentenceArray = new String[]\n{\n\"HanLP是由一系列模型与算法组成的Java工具包，目标是普及自然语言处理在生产环境中的应用。\",\n\"鐵桿部隊憤怒情緒集結 馬英九腹背受敵\",           // 繁体无压力\n\"馬英九回應連勝文“丐幫說”：稱黨內同志談話應謹慎\",\n\"高锰酸钾，强氧化剂，紫红色晶体，可溶于水，遇乙醇即被还原。常用作消毒剂、水净化剂、氧化剂、漂白剂、毒气吸收剂、二氧化碳精制剂等。\", // 专业名词有一定辨识能力\n\"《夜晚的骰子》通过描述浅草的舞女在暗夜中扔骰子的情景,寄托了作者对庶民生活区的情感\",    // 非新闻语料\n\"这个像是真的[委屈]前面那个打扮太江户了，一点不上品...@hankcs\",                       // 微博\n\"鼎泰丰的小笼一点味道也没有...每样都淡淡的...淡淡的，哪有食堂2A的好次\",\n\"克里斯蒂娜·克罗尔说：不，我不是虎妈。我全家都热爱音乐，我也鼓励他们这么做。\",\n\"今日APPS：Sago Mini Toolbox培养孩子动手能力\",\n\"财政部副部长王保安调任国家统计局党组书记\",\n\"2.34米男子娶1.53米女粉丝 称夫妻生活没问题\",\n\"你看过穆赫兰道吗\",\n\"乐视超级手机能否承载贾布斯的生态梦\"\n};\nfor (String sentence : sentenceArray)\n{\nList<Term> termList = segment.seg(sentence);\nSystem.out.println(termList);\n}\n}\n}\n说明\nCRF对新词有很好的识别能力，但是无法利用自定义词典。\n算法详解\n《CRF分词的纯Java实现》\n《CRF++模型格式说明》\n7. 极速词典分词\n/**\n* 演示极速分词，基于AhoCorasickDoubleArrayTrie实现的词典分词，适用于“高吞吐量”“精度一般”的场合\n* @author hankcs\n*/\npublic class DemoHighSpeedSegment\n{\npublic static void main(String[] args)\n{\nString text = \"江西鄱阳湖干枯，中国最大淡水湖变成大草原\";\nSystem.out.println(SpeedTokenizer.segment(text));\nlong start = System.currentTimeMillis();\nint pressure = 1000000;\nfor (int i = 0; i < pressure; ++i)\n{\nSpeedTokenizer.segment(text);\n}\ndouble costTime = (System.currentTimeMillis() - start) / (double)1000;\nSystem.out.printf(\"分词速度：%.2f字每秒\", text.length() * pressure / costTime);\n}\n}\n说明\n极速分词是词典最长分词，速度极其快，精度一般。\n在i7上跑出了2000万字每秒的速度。\n算法详解\n《Aho Corasick自动机结合DoubleArrayTrie极速多模式匹配》\n8. 用户自定义词典\npublic class DemoCustomDictionary\n{\npublic static void main(String[] args)\n{\n// 动态增加\nCustomDictionary.add(\"攻城狮\");\n// 强行插入\nCustomDictionary.insert(\"白富美\", \"nz 1024\");\n// 删除词语（注释掉试试）\n//        CustomDictionary.remove(\"攻城狮\");\nSystem.out.println(CustomDictionary.add(\"单身狗\", \"nz 1024 n 1\"));\nSystem.out.println(CustomDictionary.get(\"单身狗\"));\nString text = \"攻城狮逆袭单身狗，迎娶白富美，走上人生巅峰\";  // 怎么可能噗哈哈！\n// DoubleArrayTrie分词\nfinal char[] charArray = text.toCharArray();\nCustomDictionary.parseText(charArray, new AhoCorasickDoubleArrayTrie.IHit<CoreDictionary.Attribute>()\n{\n@Override\npublic void hit(int begin, int end, CoreDictionary.Attribute value)\n{\nSystem.out.printf(\"[%d:%d]=%s %s\\n\", begin, end, new String(charArray, begin, end - begin), value);\n}\n});\n// 首字哈希之后二分的trie树分词\nBaseSearcher searcher = CustomDictionary.getSearcher(text);\nMap.Entry entry;\nwhile ((entry = searcher.next()) != null)\n{\nSystem.out.println(entry);\n}\n// 标准分词\nSystem.out.println(HanLP.segment(text));\n// Note:动态增删不会影响词典文件\n// 目前CustomDictionary使用DAT储存词典文件中的词语，用BinTrie储存动态加入的词语，前者性能高，后者性能低\n// 之所以保留动态增删功能，一方面是历史遗留特性，另一方面是调试用；未来可能会去掉动态增删特性。\n}\n说明\nCustomDictionary是一份全局的用户自定义词典，可以随时增删，影响全部分词器。\n另外可以在任何分词器中关闭它。通过代码动态增删不会保存到词典文件。\n追加词典\nCustomDictionary主词典文本路径是data/dictionary/custom/CustomDictionary.txt，用户可以在此增加自己的词语（不推荐）；也可以单独新建一个文本文件，通过配置文件CustomDictionaryPath=data/dictionary/custom/CustomDictionary.txt; 我的词典.txt;来追加词典（推荐）。\n始终建议将相同词性的词语放到同一个词典文件里，便于维护和分享。\n词典格式\n每一行代表一个单词，格式遵从[单词] [词性A] [A的频次] [词性B] [B的频次] ... 如果不填词性则表示采用词典的默认词性。\n词典的默认词性默认是名词n，可以通过配置文件修改：全国地名大全.txt ns;如果词典路径后面空格紧接着词性，则该词典默认是该词性。\n关于用户词典的更多信息请参考词典说明一章。\n算法详解\n《Trie树分词》\n《Aho Corasick自动机结合DoubleArrayTrie极速多模式匹配》\n9. 中国人名识别\nString[] testCase = new String[]{\n\"签约仪式前，秦光荣、李纪恒、仇和等一同会见了参加签约的企业家。\",\n\"王国强、高峰、汪洋、张朝阳光着头、韩寒、小四\",\n\"张浩和胡健康复员回家了\",\n\"王总和小丽结婚了\",\n\"编剧邵钧林和稽道青说\",\n\"这里有关天培的有关事迹\",\n\"龚学平等领导,邓颖超生前\",\n};\nSegment segment = HanLP.newSegment().enableNameRecognize(true);\nfor (String sentence : testCase)\n{\nList<Term> termList = segment.seg(sentence);\nSystem.out.println(termList);\n}\n说明\n目前分词器基本上都默认开启了中国人名识别，比如HanLP.segment()接口中使用的分词器等等，用户不必手动开启；上面的代码只是为了强调。\n有一定的误命中率，比如误命中关键年，则可以通过在data/dictionary/person/nr.txt加入一条关键年 A 1来排除关键年作为人名的可能性，也可以将关键年作为新词登记到自定义词典中。\n如果你通过上述办法解决了问题，欢迎向我提交pull request，词典也是宝贵的财富。\n算法详解\n《实战HMM-Viterbi角色标注中国人名识别》\n9. 音译人名识别\nString[] testCase = new String[]{\n\"一桶冰水当头倒下，微软的比尔盖茨、Facebook的扎克伯格跟桑德博格、亚马逊的贝索斯、苹果的库克全都不惜湿身入镜，这些硅谷的科技人，飞蛾扑火似地牺牲演出，其实全为了慈善。\",\n\"世界上最长的姓名是简森·乔伊·亚历山大·比基·卡利斯勒·达夫·埃利奥特·福克斯·伊维鲁莫·马尔尼·梅尔斯·帕特森·汤普森·华莱士·普雷斯顿。\",\n};\nSegment segment = HanLP.newSegment().enableTranslatedNameRecognize(true);\nfor (String sentence : testCase)\n{\nList<Term> termList = segment.seg(sentence);\nSystem.out.println(termList);\n}\n说明\n目前分词器基本上都默认开启了音译人名识别，用户不必手动开启；上面的代码只是为了强调。\n算法详解\n《层叠隐马模型下的音译人名和日本人名识别》\n11. 日本人名识别\nString[] testCase = new String[]{\n\"北川景子参演了林诣彬导演的《速度与激情3》\",\n\"林志玲亮相网友:确定不是波多野结衣？\",\n};\nSegment segment = HanLP.newSegment().enableJapaneseNameRecognize(true);\nfor (String sentence : testCase)\n{\nList<Term> termList = segment.seg(sentence);\nSystem.out.println(termList);\n}\n说明\n目前标准分词器默认关闭了日本人名识别，用户需要手动开启；这是因为日本人名的出现频率较低，但是又消耗性能。\n算法详解\n《层叠隐马模型下的音译人名和日本人名识别》\n12. 地名识别\nString[] testCase = new String[]{\n\"武胜县新学乡政府大楼门前锣鼓喧天\",\n\"蓝翔给宁夏固原市彭阳县红河镇黑牛沟村捐赠了挖掘机\",\n};\nSegment segment = HanLP.newSegment().enablePlaceRecognize(true);\nfor (String sentence : testCase)\n{\nList<Term> termList = segment.seg(sentence);\nSystem.out.println(termList);\n}\n说明\n目前标准分词器都默认关闭了地名识别，用户需要手动开启；这是因为消耗性能，其实多数地名都收录在核心词典和用户自定义词典中。\n在生产环境中，能靠词典解决的问题就靠词典解决，这是最高效稳定的方法。\n算法详解\n《实战HMM-Viterbi角色标注地名识别》\n13. 机构名识别\nString[] testCase = new String[]{\n\"我在上海林原科技有限公司兼职工作，\",\n\"我经常在台川喜宴餐厅吃饭，\",\n\"偶尔去地中海影城看电影。\",\n};\nSegment segment = HanLP.newSegment().enableOrganizationRecognize(true);\nfor (String sentence : testCase)\n{\nList<Term> termList = segment.seg(sentence);\nSystem.out.println(termList);\n}\n说明\n目前分词器默认关闭了机构名识别，用户需要手动开启；这是因为消耗性能，其实常用机构名都收录在核心词典和用户自定义词典中。\nHanLP的目的不是演示动态识别，在生产环境中，能靠词典解决的问题就靠词典解决，这是最高效稳定的方法。\n算法详解\n《层叠HMM-Viterbi角色标注模型下的机构名识别》\n14. 关键词提取\nString content = \"程序员(英文Programmer)是从事程序开发、维护的专业人员。一般将程序员分为程序设计人员和程序编码人员，但两者的界限并不非常清楚，特别是在中国。软件从业人员分为初级程序员、高级程序员、系统分析员和项目经理四大类。\";\nList<String> keywordList = HanLP.extractKeyword(content, 5);\nSystem.out.println(keywordList);\n说明\n内部采用TextRankKeyword实现，用户可以直接调用TextRankKeyword.getKeywordList(document, size)\n算法详解\n《TextRank算法提取关键词的Java实现》\n15. 自动摘要\nString document = \"算法可大致分为基本算法、数据结构的算法、数论算法、计算几何的算法、图的算法、动态规划以及数值分析、加密算法、排序算法、检索算法、随机化算法、并行算法、厄米变形模型、随机森林算法。\\n\" +\n\"算法可以宽泛的分为三类，\\n\" +\n\"一，有限的确定性算法，这类算法在有限的一段时间内终止。他们可能要花很长时间来执行指定的任务，但仍将在一定的时间内终止。这类算法得出的结果常取决于输入值。\\n\" +\n\"二，有限的非确定算法，这类算法在有限的时间内终止。然而，对于一个（或一些）给定的数值，算法的结果并不是唯一的或确定的。\\n\" +\n\"三，无限的算法，是那些由于没有定义终止定义条件，或定义的条件无法由输入的数据满足而不终止运行的算法。通常，无限算法的产生是由于未能确定的定义终止条件。\";\nList<String> sentenceList = HanLP.extractSummary(document, 3);\nSystem.out.println(sentenceList);\n说明\n内部采用TextRankSentence实现，用户可以直接调用TextRankSentence.getTopSentenceList(document, size)。\n算法详解\n《TextRank算法自动摘要的Java实现》\n16. 短语提取\nString text = \"算法工程师\\n\" +\n\"算法（Algorithm）是一系列解决问题的清晰指令，也就是说，能够对一定规范的输入，在有限时间内获得所要求的输出。\" +\n\"如果一个算法有缺陷，或不适合于某个问题，执行这个算法将不会解决这个问题。不同的算法可能用不同的时间、\" +\n\"空间或效率来完成同样的任务。一个算法的优劣可以用空间复杂度与时间复杂度来衡量。算法工程师就是利用算法处理事物的人。\\n\" +\n\"\\n\" +\n\"1职位简介\\n\" +\n\"算法工程师是一个非常高端的职位；\\n\" +\n\"专业要求：计算机、电子、通信、数学等相关专业；\\n\" +\n\"学历要求：本科及其以上的学历，大多数是硕士学历及其以上；\\n\" +\n\"语言要求：英语要求是熟练，基本上能阅读国外专业书刊；\\n\" +\n\"必须掌握计算机相关知识，熟练使用仿真工具MATLAB等，必须会一门编程语言。\\n\" +\n\"\\n\" +\n\"2研究方向\\n\" +\n\"视频算法工程师、图像处理算法工程师、音频算法工程师 通信基带算法工程师\\n\" +\n\"\\n\" +\n\"3目前国内外状况\\n\" +\n\"目前国内从事算法研究的工程师不少，但是高级算法工程师却很少，是一个非常紧缺的专业工程师。\" +\n\"算法工程师根据研究领域来分主要有音频/视频算法处理、图像技术方面的二维信息算法处理和通信物理层、\" +\n\"雷达信号处理、生物医学信号处理等领域的一维信息算法处理。\\n\" +\n\"在计算机音视频和图形图像技术等二维信息算法处理方面目前比较先进的视频处理算法：机器视觉成为此类算法研究的核心；\" +\n\"另外还有2D转3D算法(2D-to-3D conversion)，去隔行算法(de-interlacing)，运动估计运动补偿算法\" +\n\"(Motion estimation/Motion Compensation)，去噪算法(Noise Reduction)，缩放算法(scaling)，\" +\n\"锐化处理算法(Sharpness)，超分辨率算法(Super Resolution),手势识别(gesture recognition),人脸识别(face recognition)。\\n\" +\n\"在通信物理层等一维信息领域目前常用的算法：无线领域的RRM、RTT，传送领域的调制解调、信道均衡、信号检测、网络优化、信号分解等。\\n\" +\n\"另外数据挖掘、互联网搜索算法也成为当今的热门方向。\\n\" +\n\"算法工程师逐渐往人工智能方向发展。\";\nList<String> phraseList = HanLP.extractPhrase(text, 5);\nSystem.out.println(phraseList);\n说明\n内部采用MutualInformationEntropyPhraseExtractor实现，用户可以直接调用MutualInformationEntropyPhraseExtractor..extractPhrase(text, size)。\n算法详解\n《基于互信息和左右信息熵的短语提取识别》\n17. 拼音转换\n/**\n* 汉字转拼音\n* @author hankcs\n*/\npublic class DemoPinyin\n{\npublic static void main(String[] args)\n{\nString text = \"重载不是重任\";\nList<Pinyin> pinyinList = HanLP.convertToPinyinList(text);\nSystem.out.print(\"原文,\");\nfor (char c : text.toCharArray())\n{\nSystem.out.printf(\"%c,\", c);\n}\nSystem.out.println();\nSystem.out.print(\"拼音（数字音调）,\");\nfor (Pinyin pinyin : pinyinList)\n{\nSystem.out.printf(\"%s,\", pinyin);\n}\nSystem.out.println();\nSystem.out.print(\"拼音（符号音调）,\");\nfor (Pinyin pinyin : pinyinList)\n{\nSystem.out.printf(\"%s,\", pinyin.getPinyinWithToneMark());\n}\nSystem.out.println();\nSystem.out.print(\"拼音（无音调）,\");\nfor (Pinyin pinyin : pinyinList)\n{\nSystem.out.printf(\"%s,\", pinyin.getPinyinWithoutTone());\n}\nSystem.out.println();\nSystem.out.print(\"声调,\");\nfor (Pinyin pinyin : pinyinList)\n{\nSystem.out.printf(\"%s,\", pinyin.getTone());\n}\nSystem.out.println();\nSystem.out.print(\"声母,\");\nfor (Pinyin pinyin : pinyinList)\n{\nSystem.out.printf(\"%s,\", pinyin.getShengmu());\n}\nSystem.out.println();\nSystem.out.print(\"韵母,\");\nfor (Pinyin pinyin : pinyinList)\n{\nSystem.out.printf(\"%s,\", pinyin.getYunmu());\n}\nSystem.out.println();\nSystem.out.print(\"输入法头,\");\nfor (Pinyin pinyin : pinyinList)\n{\nSystem.out.printf(\"%s,\", pinyin.getHead());\n}\nSystem.out.println();\n}\n}\n说明\nHanLP不仅支持基础的汉字转拼音，还支持声母、韵母、音调、音标和输入法首字母首声母功能。\nHanLP能够识别多音字，也能给繁体中文注拼音。\n最重要的是，HanLP采用的模式匹配升级到AhoCorasickDoubleArrayTrie，性能大幅提升，能够提供毫秒级的响应速度！\n算法详解\n《汉字转拼音与简繁转换的Java实现》\n18. 简繁转换\n/**\n* 简繁转换\n* @author hankcs\n*/\npublic class DemoTraditionalChinese2SimplifiedChinese\n{\npublic static void main(String[] args)\n{\nSystem.out.println(HanLP.convertToTraditionalChinese(\"用笔记本电脑写程序\"));\nSystem.out.println(HanLP.convertToSimplifiedChinese(\"「以後等妳當上皇后，就能買士多啤梨慶祝了」\"));\n}\n}\n说明\nHanLP能够识别简繁分歧词，比如打印机=印表機。许多简繁转换工具不能区分“以后”“皇后”中的两个“后”字，HanLP可以。\n算法详解\n《汉字转拼音与简繁转换的Java实现》\n19. 文本推荐\n/**\n* 文本推荐(句子级别，从一系列句子中挑出与输入句子最相似的那一个)\n* @author hankcs\n*/\npublic class DemoSuggester\n{\npublic static void main(String[] args)\n{\nSuggester suggester = new Suggester();\nString[] titleArray =\n(\n\"威廉王子发表演说 呼吁保护野生动物\\n\" +\n\"《时代》年度人物最终入围名单出炉 普京马云入选\\n\" +\n\"“黑格比”横扫菲：菲吸取“海燕”经验及早疏散\\n\" +\n\"日本保密法将正式生效 日媒指其损害国民知情权\\n\" +\n\"英报告说空气污染带来“公共健康危机”\"\n).split(\"\\\\n\");\nfor (String title : titleArray)\n{\nsuggester.addSentence(title);\n}\nSystem.out.println(suggester.suggest(\"发言\", 1));       // 语义\nSystem.out.println(suggester.suggest(\"危机公共\", 1));   // 字符\nSystem.out.println(suggester.suggest(\"mayun\", 1));      // 拼音\n}\n}\n说明\n在搜索引擎的输入框中，用户输入一个词，搜索引擎会联想出最合适的搜索词，HanLP实现了类似的功能。\n可以动态调节每种识别器的权重\n20. 语义距离\n/**\n* 语义距离\n* @author hankcs\n*/\npublic class DemoWordDistance\n{\npublic static void main(String[] args)\n{\nString[] wordArray = new String[]\n{\n\"香蕉\",\n\"苹果\",\n\"白菜\",\n\"水果\",\n\"蔬菜\",\n\"自行车\",\n\"公交车\",\n\"飞机\",\n\"买\",\n\"卖\",\n\"购入\",\n\"新年\",\n\"春节\",\n\"丢失\",\n\"补办\",\n\"办理\",\n\"送给\",\n\"寻找\",\n\"孩子\",\n\"教室\",\n\"教师\",\n\"会计\",\n};\nfor (String a : wordArray)\n{\nfor (String b : wordArray)\n{\nSystem.out.println(a + \"\\t\" + b + \"\\t之间的距离是\\t\" + CoreSynonymDictionary.distance(a, b));\n}\n}\n}\n}\n说明\n设想的应用场景是搜索引擎对词义的理解，词与词并不只存在“同义词”与“非同义词”的关系，就算是同义词，它们之间的意义也是有微妙的差别的。\n算法\n为每个词分配一个语义ID，词与词的距离通过语义ID的差得到。语义ID通过《同义词词林扩展版》计算而来。\n21. 依存句法解析\n/**\n* 依存句法解析\n* @author hankcs\n*/\npublic class DemoDependencyParser\n{\npublic static void main(String[] args)\n{\nSystem.out.println(HanLP.parseDependency(\"把市场经济奉行的等价交换原则引入党的生活和国家机关政务活动中\"));\n}\n}\n说明\n内部采用MaxEntDependencyParser实现，用户可以直接调用MaxEntDependencyParser.compute(sentence)\n也可以调用基于随机条件场的依存句法分析器CRFDependencyParser.compute(sentence)\n在封闭测试集上准确率有90%以上，但在开放测试集上则不理想。\n算法详解\n《最大熵依存句法分析器的实现》\n《基于CRF序列标注的中文依存句法分析器的Java实现》\n词典说明\n本章详细介绍HanLP中的词典格式，满足用户自定义的需要。HanLP中有许多词典，它们的格式都是相似的，形式都是文本文档，随时可以修改。\n基本格式\n词典分为词频词性词典和词频词典。\n词频词性词典\n每一行代表一个单词，格式遵从[单词] [词性A] [A的频次] [词性B] [B的频次] ...。\n词频词典\n每一行代表一个单词，格式遵从[单词] [单词的频次]。\n每一行的分隔符为空格符或制表符\n少数词典有自己的专用格式，比如同义词词典兼容《同义词词林扩展版》的文本格式，而转移矩阵词典则是一个csv表格。\n下文主要介绍通用词典，如不注明，词典特指通用词典。\n数据结构\nTrie树（字典树）是HanLP中使用最多的数据结构，为此，我实现了通用的Trie树，支持泛型、遍历、储存、载入。\n用户自定义词典采用AhoCorasickDoubleArrayTrie和二分Trie树储存，其他词典采用基于双数组Trie树(DoubleArrayTrie)实现的AC自动机AhoCorasickDoubleArrayTrie。\n储存形式\n词典有两个形态：文本文件(filename.txt)和缓存文件(filename.txt.bin或filename.txt.trie.dat和filename.txt.trie.value)。\n文本文件\n采用明文储存，UTF-8编码，CRLF换行符。\n缓存文件\n就是一些二进制文件，通常在文本文件的文件名后面加上.bin表示。有时候是.trie.dat和.trie.value。后者是历史遗留产物，分别代表trie树的数组和值。\n如果你修改了任何词典，只有删除缓存才能生效。\n修改方法\nHanLP的核心词典训练自人民日报2014语料，语料不是完美的，总会存在一些错误。这些错误可能会导致分词出现奇怪的结果，这时请打开调试模式排查问题：\nHanLP.Config.enableDebug();\n核心词性词频词典\n比如你在data/dictionary/CoreNatureDictionary.txt中发现了一个不是词的词，或者词性标注得明显不对，那么你可以修改它，然后删除缓存文件使其生效。\n核心二元文法词典\n二元文法词典data/dictionary/CoreNatureDictionary.ngram.txt储存的是两个词的接续，如果你发现不可能存在这种接续时，删掉即可。\n你也可以添加你认为合理的接续，但是这两个词必须同时在核心词典中才会生效。\n命名实体识别词典\n基于角色标注的命名实体识别比较依赖词典，所以词典的质量大幅影响识别质量。\n这些词典的格式与原理都是类似的，请阅读相应的文章或代码修改它。\n如果问题解决了，欢迎向我提交一个pull request，这是我在代码库中保留明文词典的原因，众人拾柴火焰高！\n版权\nApache License Version 2.0\nApache License Version 2.0\nHanLP产品初始知识产权归上海林原信息科技有限公司所有，任何人和企业可以无偿使用，可以对产品、源代码进行任何形式的修改，可以打包在其他产品中进行销售。\n任何使用了HanLP的全部或部分功能、词典、模型的项目、产品或文章等形式的成果必须显式注明HanLP及此项目主页。\n鸣谢\n感谢下列优秀开源项目：\ndarts-clone-java\naho-corasick\nSharpICTCLAS\nsnownlp\nansj_seg\nnlp-lang\n感谢NLP界各位学者老师的著作：\n《基于角色标注的中国人名自动识别研究》张华平 刘群\n《基于层叠隐马尔可夫模型的中文命名实体识别》俞鸿魁 张华平 刘群 吕学强 施水才\n《基于角色标注的中文机构名识别》俞鸿魁 张华平 刘群\n《基于最大熵的依存句法分析》 辛霄 范士喜 王轩 王晓龙\nAn Efficient Implementation of Trie Structures, JUN-ICHI AOE AND KATSUSHI MORIMOTO\nTextRank: Bringing Order into Texts, Rada Mihalcea and Paul Tarau"}
