{"content2":"3.8 Segmentation   分割\nThis section discusses more advanced concepts, which you may prefer to skip on the first time through this chapter. Tokenization is an instance of a more general problem of segmentation. In this section, we will look at two other instances of this problem, which use radically（根本上）different techniques to the ones we have seen so far in this chapter.\nSentence Segmentation 断句\nManipulating texts at the level of individual words often presupposes（假定） the ability to divide a text into individual sentences. As we have seen, some corpora already provide access at the sentence level. In the following example, we compute the average number of words per sentence in the Brown Corpus:\n>>> len(nltk.corpus.brown.words()) / len(nltk.corpus.brown.sents())\n20.250994070456922\nIn other cases, the text is available only as a stream of characters. Before tokenizing the text into words, we need to segment it into sentences. NLTK facilitates this by including the Punkt sentence segmenter (Kiss & Strunk, 2006). Here is an example of its use in segmenting the text of a novel. (Note that if the segmenter’s internal data has been updated by the time you read this, you will see different output.)\n>>> sent_tokenizer=nltk.data.load('tokenizers/punkt/english.pickle')\n>>> text = nltk.corpus.gutenberg.raw('chesterton-thursday.txt')\n>>> sents = sent_tokenizer.tokenize(text)\n>>> pprint.pprint(sents[171:181])\n['\"Nonsense!',\n'\" said Gregory, who was very rational when anyone else\\nattempted paradox.',\n'\"Why do all the clerks and navvies in the\\nrailway trains look so sad and tired,...',\n'I will\\ntell you.',\n'It is because they know that the train is going right.',\n'It\\nis because they know that whatever place they have taken a ticket\\nfor that ...',\n'It is because after they have\\npassed Sloane Square they know that the next stat...',\n'Oh, their wild rapture!',\n'oh,\\ntheir eyes like stars and their souls again in Eden, if the next\\nstation w...'\n'\"\\n\\n\"It is you who are unpoetical,\" replied the poet Syme.']\nNotice that this example is really a single sentence, reporting the speech of Mr. Lucian Gregory. However, the quoted speech contains several sentences, and these have been split into individual strings. This is reasonable behavior for most applications.\nSentence segmentation is difficult because a period is used to mark abbreviations, and some periods simultaneously（同时）mark an abbreviation and terminate a sentence, as often happens with acronyms like U.S.A. For another approach to sentence segmentation, see Section 6.2.\nWord Segmentation 断词\nFor some writing systems, tokenizing text is made more difficult by the fact that there is no visual representation of word boundaries. For example, in Chinese, the three-character string: 爱国人 (ai4 “love” [verb], guo3 “country”, ren2 “person”) could be tokenized as 爱国 / 人, “country-loving person,” or as 爱 / 国人, “love country-person.”\nA similar problem arises in the processing of spoken language, where the hearer must segment a continuous speech stream into individual words. A particularly challenging version of this problem arises when we don’t know the words in advance. This is the problem faced by a language learner, such as a child hearing utterances（说话） from a parent.\nConsider the following artificial example, where word boundaries have been removed:\n(1) a. doyouseethekitty\nb. seethedoggy\nc. doyoulikethekitty\nd. likethedoggy\nOur first challenge is simply to represent the problem: we need to find a way to separate text content from the segmentation. We can do this by annotating each character with a boolean value to indicate whether or not a word-break appears after the character (an idea that will be used heavily for “chunking” in Chapter 7). Let’s assume that the learner is given the utterance breaks, since these often correspond to extended pauses. Here is a possible representation, including the initial and target segmentations:\n>>> text = \"doyouseethekittyseethedoggydoyoulikethekittylikethedoggy\"\n>>> seg1 = \"0000000000000001000000000010000000000000000100000000000\"\n>>> seg2 = \"0100100100100001001001000010100100010010000100010010000\"\nObserve that the segmentation strings consist of zeros and ones. They are one character shorter than the source text, since a text of length n can be broken up in only n–1 places. The segment() function in Example 3-2 demonstrates that we can get back to the original segmented text from its representation.\nExample 3-2. Reconstruct segmented text from string representation: seg1 and seg2 represent the initial and final segmentations of some hypothetical（假设）child-directed speech; the segment() function can use them to reproduce the segmented text.\ndef segment(text, segs):\nwords = []\nlast = 0\nfor i in range(len(segs)):\nif segs[i] == '1':\nwords.append(text[last:i+1])\nlast = i+1\nwords.append(text[last:])\nreturn words\n>>> text = \"doyouseethekittyseethedoggydoyoulikethekittylikethedoggy\"\n>>> seg1 = \"0000000000000001000000000010000000000000000100000000000\"\n>>> seg2 = \"0100100100100001001001000010100100010010000100010010000\"\n>>> segment(text, seg1)\n['doyouseethekitty', 'seethedoggy', 'doyoulikethekitty', 'likethedoggy']\n>>> segment(text, seg2)\n['do', 'you', 'see', 'the', 'kitty', 'see', 'the', 'doggy', 'do', 'you',\n'like', 'the', kitty', 'like', 'the', 'doggy']\nNow the segmentation task becomes a search problem: find the bit string that causes the text string to be correctly segmented into words. We assume the learner is acquiring words and storing them in an internal lexicon. Given a suitable lexicon, it is possible to reconstruct the source text as a sequence of lexical items. Following (Brent & Cart-wright, 1995), we can define an objective function（目标函数）, a scoring function whose value we will try to optimize, based on the size of the lexicon and the amount of information needed to reconstruct the source text from the lexicon. We illustrate this in Figure 3-6.\nFigure 3-6. Calculation of objective function: Given a hypothetical segmentation of the source text (on the left), derive a lexicon and a derivation table（推导表） that permit the source text to be reconstructed, then total up（合计） the number of characters used by each lexical item (including a boundary marker 界标) and each derivation, to serve as a score of the quality of the segmentation; smaller values of the score indicate a better segmentation（得分值与分割性能成反比）.（词汇的分数是按长度+界标，推导是由分割的数量）\nIt is a simple matter to implement this objective function, as shown in Example 3-3.\nExample 3-3. Computing the cost of storing the lexicon and reconstructing the source text.\ndef evaluate(text, segs):\nwords = segment(text, segs)\ntext_size = len(words)\nlexicon_size = len(' '.join(list(set(words))))\nreturn text_size + lexicon_size\n>>> text = \"doyouseethekittyseethedoggydoyoulikethekittylikethedoggy\"\n>>> seg1 = \"0000000000000001000000000010000000000000000100000000000\"\n>>> seg2 = \"0100100100100001001001000010100100010010000100010010000\"\n>>> seg3 = \"0000100100000011001000000110000100010000001100010000001\"\n>>> segment(text, seg3)\n['doyou', 'see', 'thekitt', 'y', 'see', 'thedogg', 'y', 'doyou', 'like',\n'thekitt', 'y', 'like', 'thedogg', 'y']\n>>> evaluate(text, seg3)\n46\n>>> evaluate(text, seg2)\n47\n>>> evaluate(text, seg1)\n63\nThe final step is to search for the pattern of zeros and ones that maximizes this objective function, shown in Example 3-4. Notice that the best segmentation includes “words” like thekitty, since there’s not enough evidence in the data to split this any further.\nExample 3-4. Non-deterministic search using simulated annealing（模拟退火算法）: Begin searching with phrase segmentations only; randomly perturb（扰乱） the zeros and ones proportional to the “temperature”; with each iteration the temperature is lowered and the perturbation（扰乱） of boundaries is reduced.\n刚开始仅搜索短语分词；随机地扰乱0和1，与“temperature”成比例；每次迭代温度降低并且边界的扰乱减少了。\nfrom random import randint\ndef flip(segs, pos):\nreturn segs[:pos] + str(1-int(segs[pos])) + segs[pos+1:]\ndef flip_n(segs, n):\nfor i in range(n):\nsegs = flip(segs, randint(0,len(segs)-1))\nreturn segs\ndef anneal(text, segs, iterations, cooling_rate):\ntemperature = float(len(segs))\nwhile temperature > 0.5:\nbest_segs, best = segs, evaluate(text, segs)\nfor i in range(iterations):\nguess = flip_n(segs, int(round(temperature)))\nscore = evaluate(text, guess)\nif score < best:\nbest, best_segs = score, guess\nscore, segs = best, best_segs\ntemperature = temperature / cooling_rate\nprint evaluate(text, segs), segment(text, segs)\nprint\nreturn segs\n>>> text = \"doyouseethekittyseethedoggydoyoulikethekittylikethedoggy\"\n>>> seg1 = \"0000000000000001000000000010000000000000000100000000000\"\n>>> anneal(text, seg1, 5000, 1.2)\n60 ['doyouseetheki', 'tty', 'see', 'thedoggy', 'doyouliketh', 'ekittylike', 'thedoggy']\n58 ['doy', 'ouseetheki', 'ttysee', 'thedoggy', 'doy', 'o', 'ulikethekittylike', 'thedoggy']\n56 ['doyou', 'seetheki', 'ttysee', 'thedoggy', 'doyou', 'liketh', 'ekittylike', 'thedoggy']\n54 ['doyou', 'seethekit', 'tysee', 'thedoggy', 'doyou', 'likethekittylike', 'thedoggy']\n53 ['doyou', 'seethekit', 'tysee', 'thedoggy', 'doyou', 'like', 'thekitty', 'like', 'thedoggy']\n51 ['doyou', 'seethekittysee', 'thedoggy', 'doyou', 'like', 'thekitty', 'like', 'thedoggy']\n42 ['doyou', 'see', 'thekitty', 'see', 'thedoggy', 'doyou', 'like', 'thekitty', 'like', 'thedoggy']\n'0000100100000001001000000010000100010000000100010000000'\nWith enough data, it is possible to automatically segment text into words with a reasonable degree of accuracy. Such methods can be applied to tokenization for writing systems that don’t have any visual representation of word boundaries."}
