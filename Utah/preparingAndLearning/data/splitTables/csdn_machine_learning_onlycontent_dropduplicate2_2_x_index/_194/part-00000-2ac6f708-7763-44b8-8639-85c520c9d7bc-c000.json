{"content2":"传统的机器学习的监督学习分类分类和回归，分类是争对离散的数据，而回归是争对连续的数据，在数据预处理好的基础上要对数据进行预测，通常采用CV交叉验证来进行模型评价和选择。这篇文章通过连续的数据结合sklearn库对各种回归器做一比较：\n1.linear regression\n缺点：顾名思义，linear regression是假设数据服从线性分布的，这一假设前提也限制了该模型的准确率，因为现实中由于噪声等的存在很少有数据是严格服从线性的。\n优点：基于这种假设，linear regression可以通过normal equation求闭合解的方式求得y_predict\n2.logistic regression\n缺点：从线性回归衍生而来，将线性的值域通过sigmoid函数压缩在（0,1）范围内，缺点同linear regression，且也是要求数据是无缺失的\n优点：有两种方式求解，精确的解析解和SGD算法估计，在要求准确性时使用解析解，在要求时间效率时使用SGD 迭代\n3.SVM（支持向量机 ）\n缺点：计算代价比较大，SVM是将低维无序杂乱的数据通过核函数（RBF,poly，linear，sigmoid）映射到高维空间，通过超平面将其分开\n优点：SVM是通过支撑面做分类的，也就是说不需要计算所有的样本，高维数据中只需去少量的样本，节省了内存\n在sklearn默认配置中三种核函数的准确率大概是：RBF>poly>linear\n4.Naive Bayes\n缺点：这一模型适合用在文本样本上，采用了朴素贝叶斯原理假设样本间是相互独立的，因此在关联比较强的样本上效果很差\n优点：也是基于其独立的假设，概率计算大大简化，节省内存和时间\n5.K近邻\n缺点：k需要人为设定，且该算法的复杂度很高\n优点：“近朱者赤，近墨者黑”KNN是无参数训练的模型\n6.决策树（DT）\n缺点：在训练数据上比较耗时\n优点：对数据要求度最低的模型，数据可以缺失，可以是非线性的，可以是不同的类型，，最接近人类逻辑思维的模型，可解释性好\n7.集成模型（众志成城模型）\nrandom forest：随机抽取样本形成多个分类器，通过vote，少数服从多数的方式决定最终属于多数的分类器结果，分类器之间是相互去之间关联的\ngradient boost：弱弱变强，最典型的代表是adaboost（三个臭皮匠，顶个诸葛亮），弱分类器按照一定的计算方式组合形成强的分类器，分类器之间存在关联，最终分类是多个分类器组合的结果\n一般地，GB>RF>DT\n但是集成模型缺点在于受概率的影响，具有不确定性\n以上是常用的回归分类器的比较，在知道各种分类器的优缺点之后就可以使用正确的分类器完成自己的数据处理，如下表是通过计算各类分类器的残差来对比同一任务不同分类器之间的好坏，可以看出来在sklearn默认参数的前提下，准确率排序是：集成模型>DT>SVM>KNN>Linear\n分类回归器\n导入python库命令\n导入函数命令\n残差（%）\nlinear regression\nfrom sklearn.linear_model import LinearRegressor\nlr = LinearRegressor()\n5.223\nSGD regression penalty L2\nfrom sklearn.linear_model import SGDRegressor\nSGDR = SGDRegressor(\"penalty = l2\")\n5.780\nSGD regression penalty L1\nSGDR = SGDRegressor(\"penalty = l1\")\n5.765\nSVR(rbf kernel)\nfrom sklearn .svm import SVR\n（Penalty parameter ：C，Kernel coefficient ：gamma）\nSVR = SVR(kernel=\"rbf\")\n0.627\nSVR(sigmoid kernel)\nSVR = SVR(kernel=\"sigmoid \")\n82.507\nSVR(poly kernel)\nSVR = SVR(kernel=\"poly\")\n20.862\nSVR(linear kernel)\nSVR = SVR(kernel=\"linear\")\n6.451\nKNN（n=5，weights=uniform）\nfrom sklearn.neighbors import KNeighborsRegressor\nknn = KNeighborsRegressor（n=5，weights=\"uniform\"）\n0.731\nKNN（n=5，weights=distance）\nknn = KNeighborsRegressor（n=5，weights=\"distance\"）\n1.087\nDT\nfrom sklearn.tree import DecisionTreeRegressor\nDT = DecisionTreeRegressor()\n0.447\nRandom forest\nfrom sklearn.ensemble import RandomForestRegressor\nRF = RandomForestRegressor()\n0.270\nExtra Trees\nfrom sklearn.ensemble import ExtraTreesRegressor\nET = ExtraTreesRegressor()\n0.246\nGradient Boosting\nfrom sklearn.ensemble import GradientBoostingRegressor\nGB = GradientBoostingRegressor()\n0.284"}
