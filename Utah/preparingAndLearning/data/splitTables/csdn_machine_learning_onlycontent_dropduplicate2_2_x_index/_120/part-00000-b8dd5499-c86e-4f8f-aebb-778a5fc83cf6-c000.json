{"content2":"上周一个叫 Abhishek Thakur 的数据科学家，在他的 Linkedin 发表了一篇文章 Approaching (Almost) Any Machine Learning Problem，介绍他建立的一个自动的机器学习框架，几乎可以解决任何机器学习问题，项目很快也会发布出来。这篇文章迅速火遍 Kaggle，他参加过100多个数据科学相关的竞赛，积累了很多宝贵的经验，看他很幽默地说“写这样的框架需要很多丰富的经验，不是每个人都有这样的经历，而很多人有宝贵的经验，但是他们不愿意分享，我呢恰好是又有一些经验，又愿意分享的人”。当然这篇文章也是受到争议的，很多人觉得并不全面。\n我最近也在准备参加 Kaggle，之前看过几个例子，自己也总结了一个分析的流程，今天看了这篇文章，里面提到了一些高效的方法，最干货的是，他做了一个表格，列出了各个算法通常需要训练的参数。\n这个问题很重要，因为大部分时间都是通过调节参数，训练模型来提高精度。作为一个初学者，第一阶段，最想知道的问题，就是如何调节参数。因为分析的套路很简单，就那么几步，常用的算法也就那么几个，以为把算法调用一下就可以了么，那是肯定不行的。实际过程中，调用完算法后，结果一般都不怎么好，这个时候还需要进一步分析，哪些参数可以调优，哪些数据需要进一步处理，还有什么更合适的算法等等问题。\n接下来一起来看一下他的框架。\n据说数据科学家 60-70％ 的时间都花在数据清洗和应用模型算法上面，这个框架主要针对算法的应用部分。\n什么是 Kaggle？\nKaggle是一个数据科学竞赛的平台，很多公司会发布一些接近真实业务的问题，吸引爱好数据科学的人来一起解决，可以通过这些数据积累经验，提高机器学习的水平。\n应用算法解决 Kaggle 问题，一般有以下几个步骤：\n第一步：识别问题\n第二步：分离数据\n第三步：构造提取特征\n第四步：组合数据\n第五步：分解\n第六步：选择特征\n第七步：选择算法进行训练\n当然，工欲善其事，必先利其器，要先把工具和包都安好。\n最方便的就是安装 Anaconda，这里面包含大部分数据科学所需要的包，直接引入就可以了，常用的包有：\n- pandas：常用来将数据转化成 dataframe 形式进行操作\n- scikit-learn：里面有要用到的机器学习算法模型\n- matplotlib：用来画图\n- 以及 xgboost，keras，tqdm 等。\n第一步：识别问题\n在这一步先明确这个问题是分类还是回归。通过问题和数据就可以判断出来，数据由 X 和 label 列构成，label 可以一列也可以多列，可以是二进制也可以是实数，当它为二进制时，问题属于分类，当它为实数时，问题属于回归。\n第二步：分离数据\n为什么需要将数据分成两部分？\n用 Training Data 来训练模型，用 Validation Data 来检验这个模型的表现，不然的话，通过各种调节参数，模型可以在训练数据集上面表现的非常出色，但是这可能会是过拟合，过拟合就是太依赖现有的数据了，拟合的效果特别好，但是只适用于训练集，以致于来一个新的数据，就不知道该预测成什么了。所以需要有 Validation 来验证一下，看这个模型是在那里自娱自乐呢，还是真的表现出色。\n在 scikit learn 包里就有工具可以帮你做到这些：\n分类问题用 StrtifiedKFold\nfrom sklearn.cross_validation import StratifiedKFold\n回归问题用 KFold\nfrom sklearn.cross_validation import KFold\n第三步：构造特征\n这个时候，需要将数据转化成模型需要的形式。数据有三种类型：数字，类别，文字。当数据是类别的形式时，需要将它的每一类提取出来作为单独一列，然后用二进制表示每条记录相应的值。例如：\nrecord 1: 性别 女\nrecord 2：性别 女\nrecord 3：性别 男\n转化之后就是：\n女 男\nrecord 1: 1 0\nrecord 2：1 0\nrecord 3：0 1\n这个过程 sklearn 也可以帮你做到：\nfrom sklearn.preprocessing import LabelEncoder\n或者\nfrom sklearn.preprocessing import OneHotEncoder\n第四步：组合数据\n处理完 Feature 之后，就将它们组合到一起。\n如果数据是稠密的，就可以用 numpy 的 hstack:\nimport numpy as np X = np.hstack((x1, x2, ...))\n如果是稀疏的，就用 sparse 的 hstack：\nfrom scipy import sparse X = sparse.hstack((x1, x2, ...))\n组合之后，就可以应用以下算法模型：\n- RandomForestClassifier\n- RandomForestRegressor\n- ExtraTreesClassifier\n- ExtraTreesRegressor\n- XGBClassifier\n- XGBRegressor\n但是不能应用线性模型，线性模型之前需要对数据进行正则化而不是上述预处理。\n第五步：分解\n这一步是为了进一步优化模型，可以用以下方法：\nPCA：Principal components analysis，主成分分析，是一种分析、简化数据集的技术。用于减少数据集的维数，同时保持数据集中的对方差贡献最大的特征。\nfrom sklearn.decomposition import PCA\n对于文字数据，在转化成稀疏矩阵之后，可以用 SVD\nfrom sklearn.decomposition import TruncatedSVD\nSVD：Singular Value Decomposition，奇异值分解，是线性代数中一种重要的矩阵分解，它总能找到标准化正交基后方差最大的维度，因此用它进行降维去噪。\n第六步：选择特征\n当特征个数越多时，分析特征、训练模型所需的时间就越长，容易引起“维度灾难”，模型也会越复杂，推广能力也会下降，所以需要剔除不相关或亢余的特征。\n常用的算法有完全搜索，启发式搜索，和随机算法。\n例如，Random Forest：\nfrom sklearn.ensemble import RandomForestClassifier\n或者 xgboost：\nimport xgboost as xgb\n对于稀疏的数据，一个比较有名的方法是 chi-2：\nfrom sklearn.feature_selection import SelectKBest from sklearn.feature_selection import chi2\n第七步：选择算法进行训练\n选择完最相关的参数之后，接下来就可以应用算法，常用的算法有：\nClassification:\nRandom Forest\nGBM\nLogistic Regression\nNaive Bayes\nSupport Vector Machines\nk-Nearest Neighbors\nRegression\nRandom Forest\nGBM\nLinear Regression\nRidge\nLasso\nSVR\n在scikit－learn里可以看到分类和回归的可用的算法一览，包括它们的原理和例子代码。\n在应用各算法之前先要明确这个方法到底是否合适。\n为什么那么多算法里，只提出这几个算法呢，这就需要对比不同算法的性能了。\n这篇神文 Do we Need Hundreds of Classifiers to Solve Real World Classification Problems 测试了179种分类模型在UCI所有的121个数据上的性能，发现Random Forests 和 SVM 性能最好。\n我们可以学习一下里面的调研思路，看看是怎么样得到比较结果的，在我们的实践中也有一定的指导作用。\n但是直接应用算法后，一般精度都不是很理想，这个时候需要调节参数，最干货的问题来了，什么模型需要调节什么参数呢？\n虽然在sklearn的文档里，会列出所有算法所带有的参数，但是里面并不会说调节哪个会有效。在一些mooc课程里，有一些项目的代码，里面可以看到一些算法应用时，他们重点调节的参数，但是有的也不会说清楚为什么不调节别的。这里作者根据他100多次比赛的经验，列出了这个表，我觉得可以借鉴一下，当然，如果有时间的话，去对照文档里的参数列表，再查一下算法的原理，通过理论也是可以判断出来哪个参数影响比较大的。\n调参之后，也并不就是大功告成，这个时候还是需要去思考，是什么原因造成精度低的，是哪些数据的深意还没有被挖掘到，这个时候需要用统计和可视化去再一次探索数据，之后就再走一遍上面的过程。\n我觉得这里还提到了很有用的一条经验是，把所有的 transformer 都保存起来，方便在 validation 数据集上面应用：\n文章里介绍了分析问题的思路，还提到了几条很实用的经验，不过经验终究是别人的经验，只能借鉴，要想提高自己的水平，还是要看到作者背后的事情，就是参加了100多次实战，接下来就去行动吧，享受用算法和代码与数据玩耍的兴奋吧。\n推荐阅读\n历史技术博文链接汇总\n也许可以找到你想要的"}
