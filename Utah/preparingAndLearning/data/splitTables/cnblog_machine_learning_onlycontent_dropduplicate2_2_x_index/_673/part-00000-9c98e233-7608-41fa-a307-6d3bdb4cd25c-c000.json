{"content2":"机器视觉工程应用主要可划分为硬件和软件两大部分。\n硬件：工程应用的第一步就是硬件选型。硬件选型很关键，因为它是你后面工作的基础。主要是光源、工业相机和镜头选择。\n软件：目前业内商业库主要有Halcon，康耐视，DALSA，evision，NI等，开源库有OpenCV.其中NI的labview+vision模块。\n机器视觉工程应用的基本开发思路是：\n一、图像采集，二、图像分割，三、形态学处理，四、特征提取，五、输出结果。\n下面在Halcon下对这四个步骤进行讲解。\n一、图像采集：\nHalcon通过imageacquisition interfaces对各种图像采集卡及各种工业相机进行支持。其中包括：模拟视频信号，数字视频信号Camera Link,数字视频信号IEEE 1394,数字视频信号USB2.0,数字视频信号Gigabit Ethernet等。\nHalcon通过统一的接口封装上述不同相机的image acquisition interfaces,从而达到算子统一化。不同的相机只需更改几个参数就可变更使用。\nHalcon图像获取的思路：1、打开设备，获得该设备的句柄。2、调用采集算子，获取图像。\n1、打开设备，获得该设备的句柄。\nopen_framegrabber('DahengCAM', 1, 1, 0, 0, 0, 0, 'interlaced', 8, 'gray', -1, 'false','HV-13xx', '1', 1, -1, AcqHandle) //连接相机，并设置相关参数\nParameter\nValues\nDefault\nType\nDescription\nName\n'DahengCAM'\nstring\nName of the HALCON interface.\nHorizontalResolution\n1\n1\n1表示水平全部，2为水平1/2，表示图像截取。\nVerticalResolution\n1\n1\n同上，表示垂直方向。\nImageWidth\n<width>\n0\ninteger\n所需的图像部分的宽度（'0 '代表了完整的图像）。\nImageHeight\n<height>\n0\ninteger\n所需的图像部分的高度（0”是完整的图像）\nStartRow\n<width>\n0\ninteger\n所需的图像部分左上方的像素行坐标\nStartColumn\n<column>\n0\ninteger\n所需的图像部分左上方的像素列坐标\nField\n忽视\nBitsPerChannel\n忽视\nColorSpace\n'default', 'gray', 'rgb'\n'gray'\nstring\nHALCON图像的通道模式\nGeneric\n忽视\nExternalTrigger\n'false', 'true'\n'false'\nstring\n外部触发状态\nCameraType\n'HV-13xx', 'HV-20xx', 'HV-30xx', 'HV-31xx','HV-50xx', 'SV-xxxx'\n'HV-13xx'\nstring\n所连接的摄像机系列型。\nDevice\n'1', '2', '3', ...\n'1'\nstring\n相机连接第一个设备号“1”，第二个设备编号“2”。\nPort\n忽视\nLineIn\n忽视\n2、调用采集算子，获取图像。\ngrab_image (Image, AcqHandle) //（同步采集）完后处理图像，然后再采集图像。采集图像的速率受处理速度影响。\ngrab_image_async (Image, AcqHandle,MaxDelay) //（异步采集），一幅画面采集完后相机马上采集下一幅画面，不受处理速度影响。其中第三个参数为：MaxDelay，表示异步采集时可以允许的最大延时，本次采集命令距上次采集命令的时间不能超出MaxDelay，超出即重新采集。\n图像采集其他相关算子：\ngrab_image_start，该算子开始命令相机进行异步采集。只能与grab_image_async（异步采集）一起使用。\n例子：\n* Select a suitable image acquisition interface nameAcqName\nopen_framegrabber(AcqName,1,1,0,0,0,0,'default',-1,'default',-1.0,\\\n'default','default','default',-1,-1,AcqHandle)\ngrab_image(Image1,AcqHandle)//进行同步采集\n* Start next grab\ngrab_image_start(AcqHandle,-1.0)//命令相机进行异步图像采集开始\n* Process Image1 ...\n* Finish asynchronous grab + start next grab\ngrab_image_async(Image2,AcqHandle,-1.0)//读取异步采集的图像\n* Process Image2 ...\nclose_framegrabber(AcqHandle)\n3、相机参数读写\n读取相机参数：\ninfo_framegrabber( : : Name, Query : Information, ValueList)\n写相机参数：\nset_framegrabber_param( : : AcqHandle, Param, Value : )\n二、图像分割：\n图像分割的定义：\n所谓图像分割是指将图像中具有特殊含义的不同区域分割开来，这些区域是互相不交叉的，每个区域都满足特定区域的一致性。\n1、基于阈值的图像分割\nthreshold —采用全局阈值分割图像。\n格式：    threshold(Image : Region : MinGray, MaxGray : )\n自动全局阈值分割的方法：\n（1）计算灰度直方图\n（2）寻找出现频率最多的灰度值（最大值）\n（3）在threshold中使用与最大值有一定距离的值作为阈值\n代码：\ngray_histo(Regions, Image，AbsoluteHisto, RelativeHisto) //计算出图像区域内的绝对和相对灰度值直方图。\nPeakGray := sort_index(AbsoluteHisto)[255] //求出出现频率最多的灰度值\nthreshold(Image,Region,0,PeakGray-25)\nbin_threshold — 使用一个自动确定的阈值分割图像。\n格式：    bin_threshold(Image : Region : : )\ndyn_threshold —使用一个局部阈值分割图像。\n格式：    dyn_threshold(OrigImage, ThresholdImage : RegionDynThresh : Offset, LightDark : )\n例子：\nmean_image(Image,Mean,21,21)\ndyn_threshold(Image,Mean, RegionDynThresh,15,'dark')\nvar_threshold —阈值图像局部均值和标准差的分析。\n格式：    var_threshold(Image : Region : MaskWidth, MaskHeight, StdDevScale, AbsThreshold, LightDark : )\n2、基于边缘的图像分割：寻找区域之间的边界\nwatersheds —从图像中提取分水岭和盆地。\n格式：    watersheds(Image : Basins, Watersheds : : )\nwatersheds_threshold —使用阈值从图像中提取分水岭和盆地。\n格式：    watersheds_threshold(Image : Basins : Threshold : )\n3、基于区域的图像分割：直接创建区域\n三、形态学处理\n形态学处理以集合运算为基础。\n腐蚀、膨胀、开操作、闭操作是所有形态学图像处理的基础。\n开操作（先腐蚀再膨胀）使对象的轮廓变得光滑，断开狭窄的间断和消除细的突出物。\n闭操作（先膨胀再腐蚀）消弥狭窄的间断和长细的鸿沟，消除小的孔洞，填补轮廓线的断裂。\n形体学基础算子：\nerosion1\ndilation1\nopening\nclosing\n常用的形态学相关算子\nconnection\nselect_shape\nopening_circle\nclosing_circle\nopening_rectangle1\nclosing_rectangle1\ncomplement\ndifference\nintersection\nunion1\nshaps_trans\nfill_up\n形态学高级算子：\nboundary\nskeleton\n四、特征提取：\n1、区域特征：\narea\nmoments\nsmallest_rectangle1\nsmallest_circle\nconvexity：区域面积与凸包面积的比例\ncontlength：区域边界的长度\ncompactness\n2、灰度特征\nestimate_noise\nselect_gray\n五、输出结果：\n（1）获取满足条件的区域\n（2）区域分类，比如OCR\n（3）测量\n（4）质量检测"}
