{"content2":"一、集成学习法\n在机器学习的有监督学习算法中，我们的目标是学习出一个稳定的且在各个方面表现都较好的模型，但实际情况往往不这么理想，有时我们只能得到多个有偏好的模型（弱监督模型，在某些方面表现的比较好）。集成学习就是组合这里的多个弱监督模型以期得到一个更好更全面的强监督模型，集成学习潜在的思想是即便某一个弱分类器得到了错误的预测，其他的弱分类器也可以将错误纠正回来。\n集成方法是将几种机器学习技术组合成一个预测模型的元算法，以达到减小方差（bagging）、偏差（boosting）或改进预测（stacking）的效果。\n集成学习在各个规模的数据集上都有很好的策略。\n数据集大：划分成多个小数据集，学习多个模型进行组合\n数据集小：利用Bootstrap方法进行抽样，得到多个数据集，分别训练多个模型再进行组合\n集合方法可分为两类：\n序列集成方法，其中参与训练的基础学习器按照顺序生成（例如 AdaBoost）。序列方法的原理是利用基础学习器之间的依赖关系。通过对之前训练中错误标记的样本赋值较高的权重，可以提高整体的预测效果。\n并行集成方法，其中参与训练的基础学习器并行生成（例如 Random Forest）。并行方法的原理是利用基础学习器之间的独立性，通过平均可以显著降低错误。\n总结一下，集成学习法的特点：\n①  将多个分类方法聚集在一起，以提高分类的准确率。\n（这些算法可以是不同的算法，也可以是相同的算法。）\n②  集成学习法由训练数据构建一组基分类器，然后通过对每个基分类器的预测进行投票来进行分类\n③  严格来说，集成学习并不算是一种分类器，而是一种分类器结合的方法。\n④  通常一个集成分类器的分类性能会好于单个分类器\n⑤  如果把单个分类器比作一个决策者的话，集成学习的方法就相当于多个决策者共同进行一项决策。\n自然地，就产生两个问题：\n1）怎么训练每个算法？\n2）怎么融合每个算法？\n这篇博客介绍一下集成学习的几个方法：Bagging，Boosting以及Stacking。\n1、Bagging（bootstrap aggregating，装袋）\nBagging即套袋法，先说一下bootstrap，bootstrap也称为自助法，它是一种有放回的抽样方法，目的为了得到统计量的分布以及置信区间，其算法过程如下：\nA）从原始样本集中抽取训练集。每轮从原始样本集中使用Bootstraping的方法抽取n个训练样本（在训练集中，有些样本可能被多次抽取到，而有些样本可能一次都没有被抽中）。共进行k轮抽取，得到k个训练集。（k个训练集之间是相互独立的）\nB）每次使用一个训练集得到一个模型，k个训练集共得到k个模型。（注：这里并没有具体的分类算法或回归方法，我们可以根据具体问题采用不同的分类或回归方法，如决策树、感知器等）\nC）对分类问题：将上步得到的k个模型采用投票的方式得到分类结果；对回归问题，计算上述模型的均值作为最后的结果。（所有模型的重要性相同）\n为了让更好地理解bagging方法，这里提供一个例子。\nX 表示一维属性，Y 表示类标号（1或-1）测试条件：当x<=k时，y=？；当x>k时，y=？；k为最佳分裂点\n下表为属性x对应的唯一正确的y类别\n现在进行5轮随机抽样，结果如下\n每一轮随机抽样后，都生成一个分类器\n然后再将五轮分类融合\n对比符号和实际类，我们可以发现：在该例子中，Bagging使得准确率可达90%\n由此，总结一下bagging方法：\n①  Bagging通过降低基分类器的方差，改善了泛化误差\n②  其性能依赖于基分类器的稳定性；如果基分类器不稳定，bagging有助于降低训练数据的随机波动导致的误差；如果稳定，则集成分类器的误差主要由基分类器的偏倚引起\n③  由于每个样本被选中的概率相同，因此bagging并不侧重于训练数据集中的任何特定实例\n常用的集成算法类是随机森林。\n在随机森林中，集成中的每棵树都是由从训练集中抽取的样本（即 bootstrap 样本）构建的。另外，与使用所有特征不同，这里随机选择特征子集，从而进一步达到对树的随机化目的。\n因此，随机森林产生的偏差略有增加，但是由于对相关性较小的树计算平均值，估计方差减小了，导致模型的整体效果更好。\n2、Boosting\n其主要思想是将弱分类器组装成一个强分类器。在PAC（probably approximately correct，概率近似正确）学习框架下，则一定可以将弱分类器组装成一个强分类器。\n关于Boosting的两个核心问题：\n1）在每一轮如何改变训练数据的权值或概率分布？\n通过提高那些在前一轮被弱分类器分错样例的权值，减小前一轮分对样例的权值，来使得分类器对误分的数据有较好的效果。\n2）通过什么方式来组合弱分类器？\n通过加法模型将弱分类器进行线性组合，比如：\nAdaBoost（Adaptive boosting）算法：刚开始训练时对每一个训练例赋相等的权重，然后用该算法对训练集训练t轮，每次训练后，对训练失败的训练例赋以较大的权重，也就是让学习算法在每次学习以后更注意学错的样本，从而得到多个预测函数。通过拟合残差的方式逐步减小残差，将每一步生成的模型叠加得到最终模型。\nGBDT（Gradient Boost Decision Tree)，每一次的计算是为了减少上一次的残差，GBDT在残差减少（负梯度）的方向上建立一个新的模型。\n3、Stacking\nStacking方法是指训练一个模型用于组合其他各个模型。首先我们先训练多个不同的模型，然后把之前训练的各个模型的输出为输入来训练一个模型，以得到一个最终的输出。理论上，Stacking可以表示上面提到的两种Ensemble方法，只要我们采用合适的模型组合策略即可。但在实际中，我们通常使用logistic回归作为组合策略。\n如下图，先在整个训练数据集上通过bootstrap抽样得到各个训练集合，得到一系列分类模型，然后将输出用于训练第二层分类器。\n二、Bagging，Boosting二者之间的区别\n1、Bagging和Boosting的区别：\n1）样本选择上：\nBagging：训练集是在原始集中有放回选取的，从原始集中选出的各轮训练集之间是独立的。\nBoosting：每一轮的训练集不变，只是训练集中每个样例在分类器中的权重发生变化。而权值是根据上一轮的分类结果进行调整。\n2）样例权重：\nBagging：使用均匀取样，每个样例的权重相等\nBoosting：根据错误率不断调整样例的权值，错误率越大则权重越大。\n3）预测函数：\nBagging：所有预测函数的权重相等。\nBoosting：每个弱分类器都有相应的权重，对于分类误差小的分类器会有更大的权重。\n4）并行计算：\nBagging：各个预测函数可以并行生成\nBoosting：各个预测函数只能顺序生成，因为后一个模型参数需要前一轮模型的结果。\n2、决策树与这些算法框架进行结合所得到的新的算法：\n1）Bagging + 决策树 = 随机森林\n2）AdaBoost + 决策树 = 提升树\n3）Gradient Boosting + 决策树 = GBDT\n参考博文：\n【1】集成学习总结 & Stacking方法详解  https://blog.csdn.net/willduan1/article/details/73618677\n【2】Bagging和Boosting 概念及区别  https://www.cnblogs.com/liuwu265/p/4690486.html\n【3】集成学习法之bagging方法和boosting方法 https://blog.csdn.net/qq_30189255/article/details/51532442\n【4】机器学习中的集成学习（Ensemble Learning)  http://baijiahao.baidu.com/s?id=1590266955499942419&wfr=spider&for=pc\n【5】简单易学的机器学习算法——集成方法(Ensemble Method) https://blog.csdn.net/google19890102/article/details/46507387"}
